.\" Automatically generated by Pod::Man version 1.02
.\" Tue Jun 25 07:41:05 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "DBI 3"
.TH DBI 3 "perl v5.6.0" "2002-06-14" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1DBI\s0 \- Database independent interface for Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use DBI;
.Ve
.Vb 2
\&  @driver_names = DBI->available_drivers;
\&  @data_sources = DBI->data_sources($driver_name, \e%attr);
.Ve
.Vb 1
\&  $dbh = DBI->connect($data_source, $username, $auth, \e%attr);
.Ve
.Vb 3
\&  $rv  = $dbh->do($statement);
\&  $rv  = $dbh->do($statement, \e%attr);
\&  $rv  = $dbh->do($statement, \e%attr, @bind_values);
.Ve
.Vb 2
\&  $ary_ref  = $dbh->selectall_arrayref($statement);
\&  $hash_ref = $dbh->selectall_hashref($statement, $key_field);
.Ve
.Vb 2
\&  $ary_ref = $dbh->selectcol_arrayref($statement);
\&  $ary_ref = $dbh->selectcol_arrayref($statement, \e%attr);
.Ve
.Vb 3
\&  @row_ary  = $dbh->selectrow_array($statement);
\&  $ary_ref  = $dbh->selectrow_arrayref($statement);
\&  $hash_ref = $dbh->selectrow_hashref($statement);
.Ve
.Vb 2
\&  $sth = $dbh->prepare($statement);
\&  $sth = $dbh->prepare_cached($statement);
.Ve
.Vb 3
\&  $rc = $sth->bind_param($p_num, $bind_value);
\&  $rc = $sth->bind_param($p_num, $bind_value, $bind_type);
\&  $rc = $sth->bind_param($p_num, $bind_value, \e%attr);
.Ve
.Vb 2
\&  $rv = $sth->execute;
\&  $rv = $sth->execute(@bind_values);
.Ve
.Vb 3
\&  $rc = $sth->bind_param_array($p_num, $bind_values, \e%attr);
\&  $rv = $sth->execute_array(\e%attr);
\&  $rv = $sth->execute_array(\e%attr, @bind_values);
.Ve
.Vb 2
\&  $rc = $sth->bind_col($col_num, \e$col_variable);
\&  $rc = $sth->bind_columns(@list_of_refs_to_vars_to_bind);
.Ve
.Vb 3
\&  @row_ary  = $sth->fetchrow_array;
\&  $ary_ref  = $sth->fetchrow_arrayref;
\&  $hash_ref = $sth->fetchrow_hashref;
.Ve
.Vb 2
\&  $ary_ref  = $sth->fetchall_arrayref;
\&  $ary_ref  = $sth->fetchall_arrayref( $slice, $max_rows );
.Ve
.Vb 1
\&  $hash_ref = $sth->fetchall_hashref( $key_field );
.Ve
.Vb 1
\&  $rv  = $sth->rows;
.Ve
.Vb 3
\&  $rc  = $dbh->begin_work;
\&  $rc  = $dbh->commit;
\&  $rc  = $dbh->rollback;
.Ve
.Vb 1
\&  $quoted_string = $dbh->quote($string);
.Ve
.Vb 3
\&  $rc  = $h->err;
\&  $str = $h->errstr;
\&  $rv  = $h->state;
.Ve
.Vb 1
\&  $rc  = $dbh->disconnect;
.Ve
\&\fIThis synopsis above only lists the major methods.\fR
.Sh "\s-1GETTING\s0 \s-1HELP\s0"
.IX Subsection "GETTING HELP"
If you have questions about \s-1DBI\s0, you can get help from
the \fIdbi-users@perl.org\fR mailing list.
You can subscribe to the list by emailing:
.PP
.Vb 1
\&  dbi-users-help@perl.org
.Ve
Also worth a visit is the \s-1DBI\s0 home page at:
.PP
.Vb 1
\&  http://dbi.perl.org/
.Ve
Before asking any questions, reread this document, consult the
archives and read the \s-1DBI\s0 \s-1FAQ\s0. The archives are listed
at the end of this document and on the \s-1DBI\s0 home page.
The \s-1FAQ\s0 is installed as a the DBI::FAQ manpage module so
you can read it by executing \f(CW\*(C`perldoc DBI::FAQ\*(C'\fR.
.PP
Please note that Tim Bunce does not maintain the mailing lists or the
web page (generous volunteers do that).  So please don't send mail
directly to him; he just doesn't have the time to answer questions
personally. The \fIdbi-users\fR mailing list has lots of experienced
people who should be able to help you if you need it.
.Sh "\s-1NOTE\s0"
.IX Subsection "NOTE"
This is the \s-1DBI\s0 specification that corresponds to the \s-1DBI\s0 version 1.28
(\f(CW\*(C`$Date$\*(C'\fR).
.PP
The \s-1DBI\s0 specification is evolving at a steady pace, so it's
important to check that you have the latest copy.
.PP
The significant user-visible changes in each release are documented
in the the DBI::Changes manpage module so you can read them by executing
\&\f(CW\*(C`perldoc DBI::Changes\*(C'\fR.
.PP
Note also that whenever the \s-1DBI\s0 changes, the drivers take some time to
catch up. Recent versions of the \s-1DBI\s0 have added new features
(generally marked \fI\s-1NEW\s0\fR in the text) that may not yet be supported by the drivers
you use. Talk to the authors of those drivers if you need the new features.
.PP
Extensions to the \s-1DBI\s0 often use the \f(CW\*(C`DBIx::*\*(C'\fR namespace.
See the Naming Conventions and Name Space entry elsewhere in this document and:
.PP
.Vb 1
\&  http://search.cpan.org/search?mode=module&query=DBIx%3A%3A
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1DBI\s0 is a database access module for the Perl programming language.  It defines
a set of methods, variables, and conventions that provide a consistent
database interface, independent of the actual database being used.
.PP
It is important to remember that the \s-1DBI\s0 is just an interface.
The \s-1DBI\s0 is a layer
of \*(L"glue\*(R" between an application and one or more database \fIdriver\fR
modules.  It is the driver modules which do most of the real work. The \s-1DBI\s0
provides a standard interface and framework for the drivers to operate
within.
.Sh "Architecture of a \s-1DBI\s0 Application"
.IX Subsection "Architecture of a DBI Application"
.Vb 11
\&             |<- Scope of DBI ->|
\&                  .-.   .--------------.   .-------------.
\&  .-------.       | |---| XYZ Driver   |---| XYZ Engine  |
\&  | Perl  |       | |   `--------------'   `-------------'
\&  | script|  |A|  |D|   .--------------.   .-------------.
\&  | using |--|P|--|B|---|Oracle Driver |---|Oracle Engine|
\&  | DBI   |  |I|  |I|   `--------------'   `-------------'
\&  | API   |       | |...
\&  |methods|       | |... Other drivers
\&  `-------'       | |...
\&                  `-'
.Ve
The \s-1API\s0, or Application Programming Interface, defines the
call interface and variables for Perl scripts to use. The \s-1API\s0
is implemented by the Perl \s-1DBI\s0 extension.
.PP
The \s-1DBI\s0 \*(L"dispatches\*(R" the method calls to the appropriate driver for
actual execution.  The \s-1DBI\s0 is also responsible for the dynamic loading
of drivers, error checking and handling, providing default
implementations for methods, and many other non-database specific duties.
.PP
Each driver
contains implementations of the \s-1DBI\s0 methods using the
private interface functions of the corresponding database engine.  Only authors
of sophisticated/multi-database applications or generic library
functions need be concerned with drivers.
.Sh "Notation and Conventions"
.IX Subsection "Notation and Conventions"
The following conventions are used in this document:
.PP
.Vb 11
\&  $dbh    Database handle object
\&  $sth    Statement handle object
\&  $drh    Driver handle object (rarely seen or used in applications)
\&  $h      Any of the handle types above ($dbh, $sth, or $drh)
\&  $rc     General Return Code  (boolean: true=ok, false=error)
\&  $rv     General Return Value (typically an integer)
\&  @ary    List of values returned from the database, typically a row of data
\&  $rows   Number of rows processed (if available, else -1)
\&  $fh     A filehandle
\&  undef   NULL values are represented by undefined values in Perl
\&  \e%attr  Reference to a hash of attribute values passed to methods
.Ve
Note that Perl will automatically destroy database and statement handle objects
if all references to them are deleted.
.Sh "Outline Usage"
.IX Subsection "Outline Usage"
To use \s-1DBI\s0,
first you need to load the \s-1DBI\s0 module:
.PP
.Vb 2
\&  use DBI;
\&  use strict;
.Ve
(The \f(CW\*(C`use strict;\*(C'\fR isn't required but is strongly recommended.)
.PP
Then you need to the connect entry elsewhere in this document to your data source and get a \fIhandle\fR for that
connection:
.PP
.Vb 2
\&  $dbh = DBI->connect($dsn, $user, $password,
\&                      { RaiseError => 1, AutoCommit => 0 });
.Ve
Since connecting can be expensive, you generally just connect at the
start of your program and disconnect at the end.
.PP
Explicitly defining the required \f(CW\*(C`AutoCommit\*(C'\fR behavior is strongly
recommended and may become mandatory in a later version.  This
determines whether changes are automatically committed to the
database when executed, or need to be explicitly committed later.
.PP
The \s-1DBI\s0 allows an application to \*(L"prepare\*(R" statements for later
execution.  A prepared statement is identified by a statement handle
held in a Perl variable.
We'll call the Perl variable \f(CW\*(C`$sth\*(C'\fR in our examples.
.PP
The typical method call sequence for a \f(CW\*(C`SELECT\*(C'\fR statement is:
.PP
.Vb 4
\&  prepare,
\&    execute, fetch, fetch, ...
\&    execute, fetch, fetch, ...
\&    execute, fetch, fetch, ...
.Ve
for example:
.PP
.Vb 1
\&  $sth = $dbh->prepare("SELECT foo, bar FROM table WHERE baz=?");
.Ve
.Vb 1
\&  $sth->execute( $baz );
.Ve
.Vb 3
\&  while ( @row = $sth->fetchrow_array ) {
\&    print "@row\en";
\&  }
.Ve
The typical method call sequence for a \fInon\fR-\f(CW\*(C`SELECT\*(C'\fR statement is:
.PP
.Vb 4
\&  prepare,
\&    execute,
\&    execute,
\&    execute.
.Ve
for example:
.PP
.Vb 1
\&  $sth = $dbh->prepare("INSERT INTO table(foo,bar,baz) VALUES (?,?,?)");
.Ve
.Vb 5
\&  while(<CSV>) {
\&    chomp;
\&    my ($foo,$bar,$baz) = split /,/;
\&        $sth->execute( $foo, $bar, $baz );
\&  }
.Ve
The \f(CW\*(C`do()\*(C'\fR method can be used for non repeated \fInon\fR-\f(CW\*(C`SELECT\*(C'\fR statement
(or with drivers that don't support placeholders):
.PP
.Vb 1
\&  $rows_affected = $dbh->do("UPDATE your_table SET foo = foo + 1");
.Ve
To commit your changes to the database (when the AutoCommit entry elsewhere in this document is off):
.PP
.Vb 1
\&  $dbh->commit;  # or call $dbh->rollback; to undo changes
.Ve
Finally, when you have finished working with the data source, you should
the disconnect entry elsewhere in this document from it:
.PP
.Vb 1
\&  $dbh->disconnect;
.Ve
.Sh "General Interface Rules & Caveats"
.IX Subsection "General Interface Rules & Caveats"
The \s-1DBI\s0 does not have a concept of a \*(L"current session\*(R". Every session
has a handle object (i.e., a \f(CW\*(C`$dbh\*(C'\fR) returned from the \f(CW\*(C`connect\*(C'\fR method.
That handle object is used to invoke database related methods.
.PP
Most data is returned to the Perl script as strings. (Null values are
returned as \f(CW\*(C`undef\*(C'\fR.)  This allows arbitrary precision numeric data to be
handled without loss of accuracy.  Beware that Perl may not preserve
the same accuracy when the string is used as a number.
.PP
Dates and times are returned as character strings in the current
default format of the corresponding database engine.  Time zone effects
are database/driver dependent.
.PP
Perl supports binary data in Perl strings, and the \s-1DBI\s0 will pass binary
data to and from the driver without change. It is up to the driver
implementors to decide how they wish to handle such binary data.
.PP
Most databases that understand multiple character sets have a
default global charset. Text stored in the database is, or should
be, stored in that charset; if not, then that's the fault of either
the database or the application that inserted the data. When text is
fetched it should be automatically converted to the charset of the
client, presumably based on the locale. If a driver needs to set a
flag to get that behavior, then it should do so; it should not require
the application to do that.
.PP
Multiple \s-1SQL\s0 statements may not be combined in a single statement
handle (\f(CW\*(C`$sth\*(C'\fR), although some databases and drivers do support this
(notably Sybase and \s-1SQL\s0 Server).
.PP
Non-sequential record reads are not supported in this version of the \s-1DBI\s0.
In other words, records can only be fetched in the order that the
database returned them, and once fetched they are forgotten.
.PP
Positioned updates and deletes are not directly supported by the \s-1DBI\s0.
See the description of the \f(CW\*(C`CursorName\*(C'\fR attribute for an alternative.
.PP
Individual driver implementors are free to provide any private
functions and/or handle attributes that they feel are useful.
Private driver functions can be invoked using the \s-1DBI\s0 \f(CW\*(C`func()\*(C'\fR method.
Private driver attributes are accessed just like standard attributes.
.PP
Many methods have an optional \f(CW\*(C`\e%attr\*(C'\fR parameter which can be used to
pass information to the driver implementing the method. Except where
specifically documented, the \f(CW\*(C`\e%attr\*(C'\fR parameter can only be used to pass
driver specific hints. In general, you can ignore \f(CW\*(C`\e%attr\*(C'\fR parameters
or pass it as \f(CW\*(C`undef\*(C'\fR.
.Sh "Naming Conventions and Name Space"
.IX Subsection "Naming Conventions and Name Space"
The \s-1DBI\s0 package and all packages below it (\f(CW\*(C`DBI::*\*(C'\fR) are reserved for
use by the \s-1DBI\s0. Extensions and related modules use the \f(CW\*(C`DBIx::\*(C'\fR
namespace (see \f(CW\*(C`http://www.perl.com/CPAN/modules/by\-module/DBIx/\*(C'\fR).
Package names beginning with \f(CW\*(C`DBD::\*(C'\fR are reserved for use
by \s-1DBI\s0 database drivers.  All environment variables used by the \s-1DBI\s0
or by individual DBDs begin with "\f(CW\*(C`DBI_\*(C'\fR\*(L" or \*(R"\f(CW\*(C`DBD_\*(C'\fR".
.PP
The letter case used for attribute names is significant and plays an
important part in the portability of \s-1DBI\s0 scripts.  The case of the
attribute name is used to signify who defined the meaning of that name
and its values.
.PP
.Vb 5
\&  Case of name  Has a meaning defined by
\&  ------------  ------------------------
\&  UPPER_CASE    Standards, e.g.,  X/Open, ISO SQL92 etc (portable)
\&  MixedCase     DBI API (portable), underscores are not used.
\&  lower_case    Driver or database engine specific (non-portable)
.Ve
It is of the utmost importance that Driver developers only use
lowercase attribute names when defining private attributes. Private
attribute names must be prefixed with the driver name or suitable
abbreviation (e.g., "\f(CW\*(C`ora_\*(C'\fR\*(L" for Oracle, \*(R"\f(CW\*(C`ing_\*(C'\fR" for Ingres, etc).
.PP
Driver Specific Prefix Registry:
.PP
.Vb 25
\&  ad_      DBD::AnyData
\&  ado_     DBD::ADO
\&  best_    DBD::BestWins
\&  csv_     DBD::CSV
\&  db2_     DBD::DB2
\&  f_       DBD::File
\&  file_    DBD::TextFile
\&  ib_      DBD::InterBase
\&  ing_     DBD::Ingres
\&  ix_      DBD::Informix
\&  msql_    DBD::mSQL
\&  mysql_   DBD::mysql
\&  odbc_    DBD::ODBC
\&  ora_     DBD::Oracle
\&  pg_      DBD::Pg
\&  proxy_   DBD::Proxy
\&  rdb_     DBD::RDB
\&  sapdb_   DBD::SAP_DB
\&  solid_   DBD::Solid
\&  syb_     DBD::Sybase
\&  sql_     SQL::Statement (used by some drivers)
\&  tdat_    DBD::Teradata
\&  tuber_   DBD::Tuber
\&  uni_     DBD::Unify
\&  xbase_   DBD::XBase
.Ve
.Sh "\s-1SQL\s0 \- A Query Language"
.IX Subsection "SQL - A Query Language"
Most \s-1DBI\s0 drivers require applications to use a dialect of \s-1SQL\s0
(Structured Query Language) to interact with the database engine.
The following links provide useful information and further links about
\&\s-1SQL:\s0
.PP
.Vb 3
\&  http://www.altavista.com/query?q=sql+tutorial
\&  http://www.jcc.com/sql_stnd.html
\&  http://www.contrib.andrew.cmu.edu/~shadow/sql.html
.Ve
The \s-1DBI\s0 itself does not mandate or require any particular language to
be used; it is language independent. In \s-1ODBC\s0 terms, the \s-1DBI\s0 is in
\&\*(L"pass-thru\*(R" mode, although individual drivers might not be. The only requirement
is that queries and other statements must be expressed as a single
string of characters passed as the first argument to the the prepare entry elsewhere in this document or
the do entry elsewhere in this document methods.
.PP
For an interesting diversion on the \fIreal\fR history of \s-1RDBMS\s0 and \s-1SQL\s0,
from the people who made it happen, see:
.PP
.Vb 1
\&  http://ftp.digital.com/pub/DEC/SRC/technical-notes/SRC-1997-018-html/sqlr95.html
.Ve
Follow the \*(L"And the rest\*(R" and \*(L"Intergalactic dataspeak\*(R" links for the
\&\s-1SQL\s0 history.
.Sh "Placeholders and Bind Values"
.IX Subsection "Placeholders and Bind Values"
Some drivers support placeholders and bind values.
\&\fIPlaceholders\fR, also called parameter markers, are used to indicate
values in a database statement that will be supplied later,
before the prepared statement is executed.  For example, an application
might use the following to insert a row of data into the \s-1SALES\s0 table:
.PP
.Vb 1
\&  INSERT INTO sales (product_code, qty, price) VALUES (?, ?, ?)
.Ve
or the following, to select the description for a product:
.PP
.Vb 1
\&  SELECT description FROM products WHERE product_code = ?
.Ve
The \f(CW\*(C`?\*(C'\fR characters are the placeholders.  The association of actual
values with placeholders is known as \fIbinding\fR, and the values are
referred to as \fIbind values\fR.
.PP
When using placeholders with the \s-1SQL\s0 \f(CW\*(C`LIKE\*(C'\fR qualifier, you must
remember that the placeholder substitutes for the whole string.
So you should use "\f(CW\*(C`... LIKE ? ...\*(C'\fR" and include any wildcard
characters in the value that you bind to the placeholder.
.PP
\&\fBNull Values\fR
.PP
Undefined values, or \f(CW\*(C`undef\*(C'\fR, can be used to indicate null values.
However, care must be taken in the particular case of trying to use
null values to qualify a \f(CW\*(C`SELECT\*(C'\fR statement. Consider:
.PP
.Vb 1
\&  SELECT description FROM products WHERE product_code = ?
.Ve
Binding an \f(CW\*(C`undef\*(C'\fR (\s-1NULL\s0) to the placeholder will \fInot\fR select rows
which have a \s-1NULL\s0 \f(CW\*(C`product_code\*(C'\fR! Refer to the \s-1SQL\s0 manual for your database
engine or any \s-1SQL\s0 book for the reasons for this.  To explicitly select
NULLs you have to say "\f(CW\*(C`WHERE product_code IS NULL\*(C'\fR" and to make that
general you have to say:
.PP
.Vb 1
\&  ... WHERE (product_code = ? OR (? IS NULL AND product_code IS NULL))
.Ve
and bind the same value to both placeholders.
.PP
\&\fBPerformance\fR
.PP
Without using placeholders, the insert statement shown previously would have to
contain the literal values to be inserted and would have to be
re-prepared and re-executed for each row. With placeholders, the insert
statement only needs to be prepared once. The bind values for each row
can be given to the \f(CW\*(C`execute\*(C'\fR method each time it's called. By avoiding
the need to re-prepare the statement for each row, the application
typically runs many times faster. Here's an example:
.PP
.Vb 9
\&  my $sth = $dbh->prepare(q{
\&    INSERT INTO sales (product_code, qty, price) VALUES (?, ?, ?)
\&  }) or die $dbh->errstr;
\&  while (<>) {
\&      chomp;
\&      my ($product_code, $qty, $price) = split /,/;
\&      $sth->execute($product_code, $qty, $price) or die $dbh->errstr;
\&  }
\&  $dbh->commit or die $dbh->errstr;
.Ve
See the executeand bind_param entries elsewhere in this document for more details.
.PP
The \f(CW\*(C`q{...}\*(C'\fR style quoting used in this example avoids clashing with
quotes that may be used in the \s-1SQL\s0 statement. Use the double-quote like
\&\f(CW\*(C`qq{...}\*(C'\fR operator if you want to interpolate variables into the string.
See the Quote and Quote-like Operators entry in the perlop manpage for more details.
.PP
See also the the bind_column entry elsewhere in this document method, which is used to associate Perl
variables with the output columns of a \f(CW\*(C`SELECT\*(C'\fR statement.
.SH "THE DBI PACKAGE AND CLASS"
.IX Header "THE DBI PACKAGE AND CLASS"
In this section, we cover the \s-1DBI\s0 class methods, utility functions,
and the dynamic attributes associated with generic \s-1DBI\s0 handles.
.Sh "\s-1DBI\s0 Constants"
.IX Subsection "DBI Constants"
Constants representing the values of the \s-1SQL\s0 standard types can be
imported individually by name, or all together by importing the
special \f(CW\*(C`:sql_types\*(C'\fR tag.
.PP
The names and values of all the defined \s-1SQL\s0 standard types can be
produced like this:
.PP
.Vb 3
\&  foreach (@{ $DBI::EXPORT_TAGS{sql_types} }) {
\&    printf "%s=%d\en", $_, &{"DBI::$_"};
\&  }
.Ve
These constants are defined by \s-1SQL/CLI\s0, \s-1ODBC\s0 or both.
\&\f(CW\*(C`SQL_BIGINT\*(C'\fR is (currently) omitted, because \s-1SQL/CLI\s0 and \s-1ODBC\s0 provide
conflicting codes.
.PP
See the the type_info, type_info_all, and bind_param entries elsewhere in this document methods
for possible uses.
.PP
Note that just because the \s-1DBI\s0 defines a named constant for a given
data type doesn't mean that drivers will support that data type.
.Sh "\s-1DBI\s0 Class Methods"
.IX Subsection "DBI Class Methods"
The following methods are provided by the \s-1DBI\s0 class:
.Ip "\f(CW\*(C`connect\*(C'\fR" 4
.IX Item "connect"
.Vb 4
\&  $dbh = DBI->connect($data_source, $username, $password)
\&            or die $DBI::errstr;
\&  $dbh = DBI->connect($data_source, $username, $password, \e%attr)
\&            or die $DBI::errstr;
.Ve
Establishes a database connection, or session, to the requested \f(CW\*(C`$data_source\*(C'\fR.
Returns a database handle object if the connection succeeds. Use
\&\f(CW\*(C`$dbh\-\*(C'\fR>\f(CW\*(C`disconnect\*(C'\fR to terminate the connection.
.Sp
If the connect fails (see below), it returns \f(CW\*(C`undef\*(C'\fR and sets both \f(CW\*(C`$DBI::err\*(C'\fR
and \f(CW\*(C`$DBI::errstr\*(C'\fR. (It does \fInot\fR set \f(CW\*(C`$!\*(C'\fR, etc.) You should generally
test the return status of \f(CW\*(C`connect\*(C'\fR and \f(CW\*(C`print $DBI::errstr\*(C'\fR if it has failed.
.Sp
Multiple simultaneous connections to multiple databases through multiple
drivers can be made via the \s-1DBI\s0. Simply make one \f(CW\*(C`connect\*(C'\fR call for each
database and keep a copy of each returned database handle.
.Sp
The \f(CW\*(C`$data_source\*(C'\fR value should begin with "\f(CW\*(C`dbi:\*(C'\fR\fIdriver_name\fR\f(CW\*(C`:\*(C'\fR". The
\&\fIdriver_name\fR specifies the driver that will be used to make the
connection. (Letter case is significant.)
.Sp
As a convenience, if the \f(CW\*(C`$data_source\*(C'\fR parameter is undefined or empty, the
\&\s-1DBI\s0 will substitute the value of the environment variable \f(CW\*(C`DBI_DSN\*(C'\fR.
If just the \fIdriver_name\fR part is empty (i.e., the \f(CW\*(C`$data_source\*(C'\fR prefix is "\f(CW\*(C`dbi::\*(C'\fR"),
the environment variable \f(CW\*(C`DBI_DRIVER\*(C'\fR is used. If neither variable is set,
then \f(CW\*(C`connect\*(C'\fR dies.
.Sp
Examples of \f(CW\*(C`$data_source\*(C'\fR values are:
.Sp
.Vb 3
\&  dbi:DriverName:database_name
\&  dbi:DriverName:database_name@hostname:port
\&  dbi:DriverName:database=database_name;host=hostname;port=port
.Ve
There is \fIno standard\fR for the text following the driver name. Each
driver is free to use whatever syntax it wants. The only requirement the
\&\s-1DBI\s0 makes is that all the information is supplied in a single string.
You must consult the documentation for the drivers you are using for a
description of the syntax they require. (Where a driver author needs
to define a syntax for the \f(CW\*(C`$data_source\*(C'\fR, it is recommended that
they follow the \s-1ODBC\s0 style, shown in the last example above.)
.Sp
If the environment variable \f(CW\*(C`DBI_AUTOPROXY\*(C'\fR is defined (and the driver in
\&\f(CW\*(C`$data_source\*(C'\fR is not "\f(CW\*(C`Proxy\*(C'\fR") then the connect request will
automatically be changed to:
.Sp
.Vb 1
\&  dbi:Proxy:$ENV{DBI_AUTOPROXY};dsn=$data_source
.Ve
and passed to the \s-1DBD:\s0:Proxy module. \f(CW\*(C`DBI_AUTOPROXY\*(C'\fR is typically set as
"\f(CW\*(C`hostname=...;port=...\*(C'\fR". See the \s-1DBD:\s0:Proxy documentation for more details.
.Sp
If \f(CW\*(C`$username\*(C'\fR or \f(CW\*(C`$password\*(C'\fR are undefined (rather than just empty),
then the \s-1DBI\s0 will substitute the values of the \f(CW\*(C`DBI_USER\*(C'\fR and \f(CW\*(C`DBI_PASS\*(C'\fR
environment variables, respectively.  The \s-1DBI\s0 will warn if the
environment variables are not defined.  However, the everyday use of
these environment
variables is not recommended for security reasons. The mechanism is
primarily intended to simplify testing.
.Sp
\&\f(CW\*(C`DBI\-\*(C'\fR>\f(CW\*(C`connect\*(C'\fR automatically installs the driver if it has not been
installed yet. Driver installation either returns a valid driver
handle, or it \fIdies\fR with an error message that includes the string
"\f(CW\*(C`install_driver\*(C'\fR" and the underlying problem. So \f(CW\*(C`DBI\-\*(C'\fR>\f(CW\*(C`connect\*(C'\fR
will die
on a driver installation failure and will only return \f(CW\*(C`undef\*(C'\fR on a
connect failure, in which case \f(CW\*(C`$DBI::errstr\*(C'\fR will hold the error message.
.Sp
The \f(CW\*(C`$data_source\*(C'\fR argument (with the "\f(CW\*(C`dbi:...:\*(C'\fR" prefix removed) and the
\&\f(CW\*(C`$username\*(C'\fR and \f(CW\*(C`$password\*(C'\fR arguments are then passed to the driver for
processing. The \s-1DBI\s0 does not define any interpretation for the
contents of these fields.  The driver is free to interpret the
\&\f(CW\*(C`$data_source\*(C'\fR, \f(CW\*(C`$username\*(C'\fR, and \f(CW\*(C`$password\*(C'\fR fields in any way, and supply
whatever defaults are appropriate for the engine being accessed.
(Oracle, for example, uses the \s-1ORACLE_SID\s0 and \s-1TWO_TASK\s0 environment
variables if no \f(CW\*(C`$data_source\*(C'\fR is specified.)
.Sp
The \f(CW\*(C`AutoCommit\*(C'\fR and \f(CW\*(C`PrintError\*(C'\fR attributes for each connection default to
\&\*(L"on\*(R". (See the AutoCommitand PrintError entries elsewhere in this document for more information.)
However, it is strongly recommended that you explicitly define \f(CW\*(C`AutoCommit\*(C'\fR
rather than rely on the default. Future versions of
the \s-1DBI\s0 may issue a warning if \f(CW\*(C`AutoCommit\*(C'\fR is not explicitly defined.
.Sp
The \f(CW\*(C`\e%attr\*(C'\fR parameter can be used to alter the default settings of
\&\f(CW\*(C`PrintError\*(C'\fR, \f(CW\*(C`RaiseError\*(C'\fR, \f(CW\*(C`AutoCommit\*(C'\fR, and other attributes. For example:
.Sp
.Vb 4
\&  $dbh = DBI->connect($data_source, $user, $pass, {
\&        PrintError => 0,
\&        AutoCommit => 0
\&  });
.Ve
You can also define connection attribute values within the \f(CW\*(C`$data_source\*(C'\fR
parameter. For example:
.Sp
.Vb 1
\&  dbi:DriverName(PrintError=>0,Taint=>1):...
.Ve
Individual attributes values specified in this way take precedence over
any conflicting values specified via the \f(CW\*(C`\e%attr\*(C'\fR parameter to \f(CW\*(C`connect\*(C'\fR.
.Sp
The \f(CW\*(C`dbi_connect_method\*(C'\fR attribute can be used to specify which driver
method should be called to establish the connection. The only useful
values are 'connect', 'connect_cached', or some specialized case like
\&'Apache::DBI::connect' (which is automatically the default when running
within Apache).
.Sp
Where possible, each session (\f(CW\*(C`$dbh\*(C'\fR) is independent from the transactions
in other sessions. This is useful when you need to hold cursors open
across transactions\*(--for example, if you use one session for your long lifespan
cursors (typically read-only) and another for your short update
transactions.
.Sp
For compatibility with old \s-1DBI\s0 scripts, the driver can be specified by
passing its name as the fourth argument to \f(CW\*(C`connect\*(C'\fR (instead of \f(CW\*(C`\e%attr\*(C'\fR):
.Sp
.Vb 1
\&  $dbh = DBI->connect($data_source, $user, $pass, $driver);
.Ve
In this \*(L"old-style\*(R" form of \f(CW\*(C`connect\*(C'\fR, the \f(CW\*(C`$data_source\*(C'\fR should not start
with "\f(CW\*(C`dbi:driver_name:\*(C'\fR". (If it does, the embedded driver_name
will be ignored). Also note that in this older form of \f(CW\*(C`connect\*(C'\fR,
the \f(CW\*(C`$dbh\-\*(C'\fR>\f(CW\*(C`{AutoCommit}\*(C'\fR attribute is \fIundefined\fR, the
\&\f(CW\*(C`$dbh\-\*(C'\fR>\f(CW\*(C`{PrintError}\*(C'\fR attribute is off, and the old \f(CW\*(C`DBI_DBNAME\*(C'\fR
environment variable is
checked if \f(CW\*(C`DBI_DSN\*(C'\fR is not defined. Beware that this \*(L"old-style\*(R"
\&\f(CW\*(C`connect\*(C'\fR will be withdrawn in a future version of \s-1DBI\s0.
.Ip "\f(CW\*(C`connect_cached\*(C'\fR \fI\s-1NEW\s0\fR" 4
.IX Item "connect_cached NEW"
.Vb 4
\&  $dbh = DBI->connect_cached($data_source, $username, $password)
\&            or die $DBI::errstr;
\&  $dbh = DBI->connect_cached($data_source, $username, $password, \e%attr)
\&            or die $DBI::errstr;
.Ve
\&\f(CW\*(C`connect_cached\*(C'\fR is like the connect entry elsewhere in this document, except that the database handle
returned is also
stored in a hash associated with the given parameters. If another call
is made to \f(CW\*(C`connect_cached\*(C'\fR with the same parameter values, then the
corresponding cached \f(CW\*(C`$dbh\*(C'\fR will be returned if it is still valid.
The cached database handle is replaced with a new connection if it
has been disconnected or if the \f(CW\*(C`ping\*(C'\fR method fails.
.Sp
Note that the behavior of this method differs in several respects from the
behavior of presistent connections implemented by Apache::DBI.
.Sp
Caching can be useful in some applications, but it can also cause
problems and should be used with care. The exact behavior of this
method is liable to change, so if you intend to use it in any production
applications you should discuss your needs on the \fIdbi-users\fR mailing list.
.Sp
The cache can be accessed (and cleared) via the the CachedKids entry elsewhere in this document attribute.
.Ip "\f(CW\*(C`available_drivers\*(C'\fR" 4
.IX Item "available_drivers"
.Vb 2
\&  @ary = DBI->available_drivers;
\&  @ary = DBI->available_drivers($quiet);
.Ve
Returns a list of all available drivers by searching for \f(CW\*(C`DBD::*\*(C'\fR modules
through the directories in \f(CW\*(C`@INC\*(C'\fR. By default, a warning is given if
some drivers are hidden by others of the same name in earlier
directories. Passing a true value for \f(CW\*(C`$quiet\*(C'\fR will inhibit the warning.
.Ip "\f(CW\*(C`data_sources\*(C'\fR" 4
.IX Item "data_sources"
.Vb 2
\&  @ary = DBI->data_sources($driver);
\&  @ary = DBI->data_sources($driver, \e%attr);
.Ve
Returns a list of all data sources (databases) available via the named
driver.  If \f(CW\*(C`$driver\*(C'\fR is empty or \f(CW\*(C`undef\*(C'\fR, then the value of the
\&\f(CW\*(C`DBI_DRIVER\*(C'\fR environment variable is used.
.Sp
The driver will be loaded if it hasn't been already. Note that if the
driver loading fails then it \fIdies\fR with an error message that
includes the string "\f(CW\*(C`install_driver\*(C'\fR" and the underlying problem.
.Sp
Data sources are returned in a form suitable for passing to the
the connect entry elsewhere in this document method (that is, they will include the "\f(CW\*(C`dbi:$driver:\*(C'\fR" prefix).
.Sp
Note that many drivers have no way of knowing what data sources might
be available for it. These drivers return an empty or incomplete list
or may require driver-specific attributes, such as a connected database
handle, to be supplied.
.Ip "\f(CW\*(C`trace\*(C'\fR" 4
.IX Item "trace"
.Vb 2
\&  DBI->trace($trace_level)
\&  DBI->trace($trace_level, $trace_filename)
.Ve
\&\s-1DBI\s0 trace information can be enabled for all handles using the \f(CW\*(C`trace\*(C'\fR
\&\s-1DBI\s0 class method. To enable trace information for a specific handle, use
the similar \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`trace\*(C'\fR method described elsewhere.
.Sp
Trace levels are as follows:
.Sp
.Vb 8
\&  0 - Trace disabled.
\&  1 - Trace DBI method calls returning with results or errors.
\&  2 - Trace method entry with parameters and returning with results.
\&  3 - As above, adding some high-level information from the driver
\&      and some internal information from the DBI.
\&  4 - As above, adding more detailed information from the driver.
\&      Also includes DBI mutex information when using threaded Perl.
\&  5 and above - As above but with more and more obscure information.
.Ve
Trace level 1 is best for a simple overview of what's happening.
Trace level 2 is a good choice for general purpose tracing.  Levels 3
and above (up to 9) are best reserved for investigating a
specific problem, when you need to see \*(L"inside\*(R" the driver and \s-1DBI\s0.
.Sp
The trace output is detailed and typically very useful. Much of the
trace output is formatted using the the neat entry elsewhere in this document function, so strings
in the trace output may be edited and truncated.
.Sp
Initially trace output is written to \f(CW\*(C`STDERR\*(C'\fR.  If \f(CW\*(C`$trace_filename\*(C'\fR is
specified and can be opened in append mode then all trace
output (including that from other handles) is redirected to that file.
A warning is generated is the file can't be opened.
Further calls to \f(CW\*(C`trace\*(C'\fR without a \f(CW\*(C`$trace_filename\*(C'\fR do not alter where
the trace output is sent. If \f(CW\*(C`$trace_filename\*(C'\fR is undefined, then
trace output is sent to \f(CW\*(C`STDERR\*(C'\fR and the previous trace file is closed.
The \f(CW\*(C`trace\*(C'\fR method returns the \fIprevious\fR tracelevel.
.Sp
See also the \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`trace\*(C'\fR and \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`trace_msg\*(C'\fR methods and the
the DEBUGGING entry elsewhere in this document section
for information about the \f(CW\*(C`DBI_TRACE\*(C'\fR environment variable.
.Sh "\s-1DBI\s0 Utility Functions"
.IX Subsection "DBI Utility Functions"
In addition to the methods listed in the previous section,
the \s-1DBI\s0 package also provides these utility functions:
.Ip "\f(CW\*(C`neat\*(C'\fR" 4
.IX Item "neat"
.Vb 1
\&  $str = DBI::neat($value, $maxlen);
.Ve
Return a string containing a neat (and tidy) representation of the
supplied value.
.Sp
Strings will be quoted, although internal quotes will \fInot\fR be escaped.
Values known to be numeric will be unquoted. Undefined (\s-1NULL\s0) values
will be shown as \f(CW\*(C`undef\*(C'\fR (without quotes). Unprintable characters will
be replaced by dot (.).
.Sp
For result strings longer than \f(CW\*(C`$maxlen\*(C'\fR the result string will be
truncated to \f(CW\*(C`$maxlen\-4\*(C'\fR and "\f(CW\*(C`...'\*(C'\fR" will be appended.  If \f(CW\*(C`$maxlen\*(C'\fR is 0
or \f(CW\*(C`undef\*(C'\fR, it defaults to \f(CW\*(C`$DBI::neat_maxlen\*(C'\fR which, in turn, defaults to 400.
.Sp
This function is designed to format values for human consumption.
It is used internally by the \s-1DBI\s0 for the trace entry elsewhere in this document output. It should
typically \fInot\fR be used for formatting values for database use.
(See also the quote entry elsewhere in this document.)
.Ip "\f(CW\*(C`neat_list\*(C'\fR" 4
.IX Item "neat_list"
.Vb 1
\&  $str = DBI::neat_list(\e@listref, $maxlen, $field_sep);
.Ve
Calls \f(CW\*(C`DBI::neat\*(C'\fR on each element of the list and returns a string
containing the results joined with \f(CW\*(C`$field_sep\*(C'\fR. \f(CW\*(C`$field_sep\*(C'\fR defaults
to \f(CW\*(C`", "\*(C'\fR.
.Ip "\f(CW\*(C`looks_like_number\*(C'\fR" 4
.IX Item "looks_like_number"
.Vb 1
\&  @bool = DBI::looks_like_number(@array);
.Ve
Returns true for each element that looks like a number.
Returns false for each element that does not look like a number.
Returns \f(CW\*(C`undef\*(C'\fR for each element that is undefined or empty.
.Ip "\f(CW\*(C`hash\*(C'\fR" 4
.IX Item "hash"
.Vb 1
\&  $hash_value = DBI::hash($buffer, $type);
.Ve
Return a 32\-bit integer 'hash' value corresponding to the contents of \f(CW$buffer\fR.
The \f(CW$type\fR parameter selects which kind of hash algorithm should be used.
.Sp
For the technically curious, type 0 (which is the default if \f(CW$type\fR
isn't specified) is based on the Perl 5.1 hash except that the value
is forced to be negative (for obscure historical reasons).
Type 1 is the better \*(L"Fowler / Noll / Vo\*(R" (\s-1FNV\s0) hash. See
http://www.isthe.com/chongo/tech/comp/fnv/ for more information.
Both types are implemented in C and are very fast.
.Sp
This function doesn't have much to do with databases, except that
it can be handy to store hash values in a database.
.Sh "\s-1DBI\s0 Dynamic Attributes"
.IX Subsection "DBI Dynamic Attributes"
Dynamic attributes are always associated with the \fIlast handle used\fR
(that handle is represented by \f(CW\*(C`$h\*(C'\fR in the descriptions below).
.PP
Where an attribute is equivalent to a method call, then refer to
the method call for all related documentation.
.PP
Warning: these attributes are provided as a convenience but they
do have limitations. Specifically, they have a short lifespan:
because they are associated with
the last handle used, they should only be used \fIimmediately\fR after
calling the method that \*(L"sets\*(R" them.
If in any doubt, use the corresponding method call.
.Ip "\f(CW\*(C`$DBI::err\*(C'\fR" 4
.IX Item "$DBI::err"
Equivalent to \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`err\*(C'\fR.
.Ip "\f(CW\*(C`$DBI::errstr\*(C'\fR" 4
.IX Item "$DBI::errstr"
Equivalent to \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`errstr\*(C'\fR.
.Ip "\f(CW\*(C`$DBI::state\*(C'\fR" 4
.IX Item "$DBI::state"
Equivalent to \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`state\*(C'\fR.
.Ip "\f(CW\*(C`$DBI::rows\*(C'\fR" 4
.IX Item "$DBI::rows"
Equivalent to \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`rows\*(C'\fR. Please refer to the documentation
for the the rows entry elsewhere in this document method.
.Ip "\f(CW\*(C`$DBI::lasth\*(C'\fR" 4
.IX Item "$DBI::lasth"
Returns the \s-1DBI\s0 object handle used for the most recent \s-1DBI\s0 method call.
If the last \s-1DBI\s0 method call was a \s-1DESTROY\s0 then \f(CW$DBI::lasth\fR will return
the handle of the parent of the destroyed handle, if there is one.
.SH "METHODS COMMON TO ALL HANDLES"
.IX Header "METHODS COMMON TO ALL HANDLES"
The following methods can be used by all types of \s-1DBI\s0 handles.
.Ip "\f(CW\*(C`err\*(C'\fR" 4
.IX Item "err"
.Vb 1
\&  $rv = $h->err;
.Ve
Returns the \fInative\fR database engine error code from the last driver
method called. The code is typically an integer but you should not
assume that.
.Sp
The \s-1DBI\s0 resets \f(CW$h\fR->err to undef before most \s-1DBI\s0 method calls, so the
value only has a short lifespan. Also, most drivers share the same
error variables across all their handles, so calling a method on
one handle will typically reset the error on all the other handles
that are children of that driver.
.Sp
If you need to test for individual errors \fIand\fR have your program be
portable to different database engines, then you'll need to determine
what the corresponding error codes are for all those engines and test for
all of them.
.Ip "\f(CW\*(C`errstr\*(C'\fR" 4
.IX Item "errstr"
.Vb 1
\&  $str = $h->errstr;
.Ve
Returns the native database engine error message from the last driver
method called. This has the same lifespan issues as the the err entry elsewhere in this document method
described above.
.Ip "\f(CW\*(C`state\*(C'\fR" 4
.IX Item "state"
.Vb 1
\&  $str = $h->state;
.Ve
Returns an error code in the standard \s-1SQLSTATE\s0 five character format.
Note that the specific success code \f(CW\*(C`00000\*(C'\fR is translated to ''
(false). If the driver does not support \s-1SQLSTATE\s0 (and most don't),
then state will return \f(CW\*(C`S1000\*(C'\fR (General Error) for all errors.
.Sp
The driver is free to return any value via \f(CW\*(C`state\*(C'\fR, e.g., warning
codes, even if it has not declared an error by returning a true value
via the the err entry elsewhere in this document method described above.
.Ip "\f(CW\*(C`set_err\*(C'\fR \fI\s-1NEW\s0\fR" 4
.IX Item "set_err NEW"
.Vb 3
\&  $rv = $h->set_err($err, $errstr);
\&  $rv = $h->set_err($err, $errstr, $state, $method);
\&  $rv = $h->set_err($err, $errstr, $state, $method, $rv);
.Ve
Set the \f(CW\*(C`err\*(C'\fR, \f(CW\*(C`errstr\*(C'\fR, and \f(CW\*(C`state\*(C'\fR values for the handle.
This will trigger the normal \s-1DBI\s0 error handling mechanisms,
such as \f(CW\*(C`RaiseError\*(C'\fR and \f(CW\*(C`HandleError\*(C'\fR, if they are enabled.
This method is typically only used by \s-1DBI\s0 drivers and \s-1DBI\s0 subclasses.
.Sp
The \f(CW$method\fR parameter provides an alternate method name, instead
of the fairly unhelpful '\f(CW\*(C`set_err\*(C'\fR', for the
\&\f(CW\*(C`RaiseError\*(C'\fR/\f(CW\*(C`PrintError\*(C'\fR error string.
.Sp
The \f(CW\*(C`set_err\*(C'\fR method normally returns undef.  The \f(CW$rv\fR parameter
provides an alternate return value. The \f(CW\*(C`HandleError\*(C'\fR subroutine
can access and alter this value.
.Ip "\f(CW\*(C`trace\*(C'\fR" 4
.IX Item "trace"
.Vb 2
\&  $h->trace($trace_level);
\&  $h->trace($trace_level, $trace_filename);
.Ve
\&\s-1DBI\s0 trace information can be enabled for a specific handle (and any
future children of that handle) by setting the trace level using the
\&\f(CW\*(C`trace\*(C'\fR method.
.Sp
Trace level 1 is best for a simple overview of what's happening.
Trace level 2 is a good choice for general purpose tracing.  Levels 3
and above (up to 9) are best reserved for investigating a
specific problem, when you need to see \*(L"inside\*(R" the driver and \s-1DBI\s0.
Set \f(CW\*(C`$trace_level\*(C'\fR to 0 to disable the trace.
.Sp
The trace output is detailed and typically very useful. Much of the
trace output is formatted using the the neat entry elsewhere in this document function, so strings
in the trace output may be edited and truncated.
.Sp
Initially, trace output is written to \f(CW\*(C`STDERR\*(C'\fR.  If \f(CW\*(C`$trace_filename\*(C'\fR is
specified, then the file is opened in append mode and \fIall\fR trace
output (including that from other handles) is redirected to that file.
Further calls to trace without a \f(CW\*(C`$trace_filename\*(C'\fR do not alter where
the trace output is sent. If \f(CW\*(C`$trace_filename\*(C'\fR is undefined, then
trace output is sent to \f(CW\*(C`STDERR\*(C'\fR and the previous trace file is closed.
.Sp
See also the \f(CW\*(C`DBI\-\*(C'\fR>\f(CW\*(C`trace\*(C'\fR method, the \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`{TraceLevel}\*(C'\fR attribute,
and the DEBUGGING entry elsewhere in this document for information about the \f(CW\*(C`DBI_TRACE\*(C'\fR environment variable.
.Ip "\f(CW\*(C`trace_msg\*(C'\fR" 4
.IX Item "trace_msg"
.Vb 2
\&  $h->trace_msg($message_text);
\&  $h->trace_msg($message_text, $min_level);
.Ve
Writes \f(CW\*(C`$message_text\*(C'\fR to the trace file if trace is enabled for \f(CW\*(C`$h\*(C'\fR or
for the \s-1DBI\s0 as a whole. Can also be called as \f(CW\*(C`DBI\-\*(C'\fR>\f(CW\*(C`trace_msg($msg)\*(C'\fR.
See the trace entry elsewhere in this document.
.Sp
If \f(CW\*(C`$min_level\*(C'\fR is defined, then the message is output only if the trace
level is equal to or greater than that level. \f(CW\*(C`$min_level\*(C'\fR defaults to 1.
.Ip "\f(CW\*(C`func\*(C'\fR" 4
.IX Item "func"
.Vb 1
\&  $h->func(@func_arguments, $func_name) or die ...;
.Ve
The \f(CW\*(C`func\*(C'\fR method can be used to call private non-standard and
non-portable methods implemented by the driver. Note that the function
name is given as the last argument.
.Sp
It's also important to note that the \fIfunc()\fR method does not clear
a previous error ($DBI::err etc.) and it does not trigger automatic
error detection (RaiseError etc.) so you must check the return
status and/or \f(CW$h\fR->err to detect errors.
.Sp
(This method is not directly related to calling stored procedures.
Calling stored procedures is currently not defined by the \s-1DBI\s0.
Some drivers, such as \s-1DBD:\s0:Oracle, support it in non-portable ways.
See driver documentation for more details.)
.SH "ATTRIBUTES COMMON TO ALL HANDLES"
.IX Header "ATTRIBUTES COMMON TO ALL HANDLES"
These attributes are common to all types of \s-1DBI\s0 handles.
.PP
Some attributes are inherited by child handles. That is, the value
of an inherited attribute in a newly created statement handle is the
same as the value in the parent database handle. Changes to attributes
in the new statement handle do not affect the parent database handle
and changes to the database handle do not affect existing statement
handles, only future ones.
.PP
Attempting to set or get the value of an unknown attribute is fatal,
except for private driver specific attributes (which all have names
starting with a lowercase letter).
.PP
Example:
.PP
.Vb 2
\&  $h->{AttributeName} = ...;    # set/write
\&  ... = $h->{AttributeName};    # get/read
.Ve
.Ip "\f(CW\*(C`Warn\*(C'\fR (boolean, inherited)" 4
.IX Item "Warn (boolean, inherited)"
Enables useful warnings for certain bad practices. Enabled by default. Some
emulation layers, especially those for Perl 4 interfaces, disable warnings.
Since warnings are generated using the Perl \f(CW\*(C`warn\*(C'\fR function, they can be
intercepted using the Perl \f(CW\*(C`$SIG{_\|_WARN_\|_}\*(C'\fR hook.
.Ip "\f(CW\*(C`Active\*(C'\fR (boolean, read-only)" 4
.IX Item "Active (boolean, read-only)"
True if the handle object is \*(L"active\*(R". This is rarely used in
applications. The exact meaning of active is somewhat vague at the
moment. For a database handle it typically means that the handle is
connected to a database (\f(CW\*(C`$dbh\-\*(C'\fR>\f(CW\*(C`disconnect\*(C'\fR sets \f(CW\*(C`Active\*(C'\fR off).  For
a statement handle it typically means that the handle is a \f(CW\*(C`SELECT\*(C'\fR
that may have more data to fetch. (Fetching all the data or calling \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`finish\*(C'\fR
sets \f(CW\*(C`Active\*(C'\fR off.)
.Ip "\f(CW\*(C`Kids\*(C'\fR (integer, read-only)" 4
.IX Item "Kids (integer, read-only)"
For a driver handle, \f(CW\*(C`Kids\*(C'\fR is the number of currently existing database
handles that were created from that driver handle.  For a database
handle, \f(CW\*(C`Kids\*(C'\fR is the number of currently existing statement handles that
were created from that database handle.
.Ip "\f(CW\*(C`ActiveKids\*(C'\fR (integer, read-only)" 4
.IX Item "ActiveKids (integer, read-only)"
Like \f(CW\*(C`Kids\*(C'\fR, but only counting those that are \f(CW\*(C`Active\*(C'\fR (as above).
.Ip "\f(CW\*(C`CachedKids\*(C'\fR (hash ref)" 4
.IX Item "CachedKids (hash ref)"
For a database handle, returns a reference to the cache (hash) of
statement handles created by the the prepare_cached entry elsewhere in this document method.  For a
driver handle, returns a reference to the cache (hash) of
database handles created by the the connect_cached entry elsewhere in this document method.
.Ip "\f(CW\*(C`CompatMode\*(C'\fR (boolean, inherited)" 4
.IX Item "CompatMode (boolean, inherited)"
Used by emulation layers (such as Oraperl) to enable compatible behavior
in the underlying driver (e.g., \s-1DBD:\s0:Oracle) for this handle. Not normally
set by application code.
.Ip "\f(CW\*(C`InactiveDestroy\*(C'\fR (boolean)" 4
.IX Item "InactiveDestroy (boolean)"
This attribute can be used to disable the \fIdatabase engine\fR related
effect of DESTROYing a handle (which would normally close a prepared
statement or disconnect from the database etc).
.Sp
For a database handle, this attribute does not disable an \fIexplicit\fR
call to the disconnect method, only the implicit call from \s-1DESTROY\s0.
.Sp
The default value, false, means that a handle will be automatically
destroyed when it passes out of scope.  A true value disables automatic
destruction. (Think of the name as meaning 'inactive the \s-1DESTROY\s0 method'.)
.Sp
This attribute is specifically designed for use in Unix applications
that \*(L"fork\*(R" child processes. Either the parent or the child process,
but not both, should set \f(CW\*(C`InactiveDestroy\*(C'\fR on all their shared handles.
Note that some databases, including Oracle, don't support passing a
database connection across a fork.
.Ip "\f(CW\*(C`PrintError\*(C'\fR (boolean, inherited)" 4
.IX Item "PrintError (boolean, inherited)"
This attribute can be used to force errors to generate warnings (using
\&\f(CW\*(C`warn\*(C'\fR) in addition to returning error codes in the normal way.  When set
\&\*(L"on\*(R", any method which results in an error occuring will cause the \s-1DBI\s0 to
effectively do a \f(CW\*(C`warn("$class $method failed: $DBI::errstr")\*(C'\fR where \f(CW\*(C`$class\*(C'\fR
is the driver class and \f(CW\*(C`$method\*(C'\fR is the name of the method which failed. E.g.,
.Sp
.Vb 1
\&  DBD::Oracle::db prepare failed: ... error text here ...
.Ve
By default, \f(CW\*(C`DBI\-\*(C'\fR>\f(CW\*(C`connect\*(C'\fR sets \f(CW\*(C`PrintError\*(C'\fR \*(L"on\*(R".
.Sp
If desired, the warnings can be caught and processed using a \f(CW\*(C`$SIG{_\|_WARN_\|_}\*(C'\fR
handler or modules like \s-1CGI:\s0:Carp and \s-1CGI:\s0:ErrorWrap.
.Ip "\f(CW\*(C`RaiseError\*(C'\fR (boolean, inherited)" 4
.IX Item "RaiseError (boolean, inherited)"
This attribute can be used to force errors to raise exceptions rather
than simply return error codes in the normal way. It is \*(L"off\*(R" by default.
When set \*(L"on\*(R", any method which results in an error will cause
the \s-1DBI\s0 to effectively do a \f(CW\*(C`die("$class $method failed: $DBI::errstr")\*(C'\fR,
where \f(CW\*(C`$class\*(C'\fR is the driver class and \f(CW\*(C`$method\*(C'\fR is the name of the method
that failed. E.g.,
.Sp
.Vb 1
\&  DBD::Oracle::db prepare failed: ... error text here ...
.Ve
If you turn \f(CW\*(C`RaiseError\*(C'\fR on then you'd normally turn \f(CW\*(C`PrintError\*(C'\fR off.
If \f(CW\*(C`PrintError\*(C'\fR is also on, then the \f(CW\*(C`PrintError\*(C'\fR is done first (naturally).
.Sp
Typically \f(CW\*(C`RaiseError\*(C'\fR is used in conjunction with \f(CW\*(C`eval { ... }\*(C'\fR
to catch the exception that's been thrown and followed by an
\&\f(CW\*(C`if ($@) { ... }\*(C'\fR block to handle the caught exception. In that eval
block the \f(CW$DBI::lasth\fR variable can be useful for diagnosis and reporting.
For example, \f(CW$DBI::lasth\fR->{Type} and \f(CW$DBI::lasth\fR->{Statement}.
.Sp
If you want to temporarily turn \f(CW\*(C`RaiseError\*(C'\fR off (inside a library function
that is likely to fail, for example), the recommended way is like this:
.Sp
.Vb 4
\&  {
\&    local $h->{RaiseError};  # localize and turn off for this block
\&    ...
\&  }
.Ve
The original value will automatically and reliably be restored by Perl,
regardless of how the block is exited.
The same logic applies to other attributes, including \f(CW\*(C`PrintError\*(C'\fR.
.Sp
Sadly, this doesn't work for Perl versions up to and including 5.004_04.
Even more sadly, for Perl 5.5 and 5.6.0 it does work but leaks memory!
For backwards compatibility, you could just use \f(CW\*(C`eval { ... }\*(C'\fR instead.
.Ip "\f(CW\*(C`HandleError\*(C'\fR (code ref, inherited)" 4
.IX Item "HandleError (code ref, inherited)"
This attribute can be used to provide your own alternative behaviour
in case of errors. If set to a reference to a subroutine then that
subroutine is called when an error is detected (at the same point that
\&\f(CW\*(C`RaiseError\*(C'\fR and \f(CW\*(C`PrintError\*(C'\fR are handled).
.Sp
The subroutine is called with three parameters: the error message
string that \f(CW\*(C`RaiseError\*(C'\fR and \f(CW\*(C`PrintError\*(C'\fR would use,
the \s-1DBI\s0 handle being used, and the first value being returned by
the method that failed (typically undef).
.Sp
If the subroutine returns a false value then the \f(CW\*(C`RaiseError\*(C'\fR
and/or \f(CW\*(C`PrintError\*(C'\fR attributes are checked and acted upon as normal.
.Sp
For example, to \f(CW\*(C`die\*(C'\fR with a full stack trace for any error:
.Sp
.Vb 2
\&  use Carp;
\&  $h->{HandleError} = sub { confess(shift) };
.Ve
Or to turn errors into exceptions:
.Sp
.Vb 2
\&  use Exception; # or your own favourite exception module
\&  $h->{HandleError} = sub { Exception->new('DBI')->raise($_[0]) };
.Ve
It is possible to 'stack' multiple HandleError handlers by using
closures:
.Sp
.Vb 7
\&  sub your_subroutine {
\&    my $previous_handler = $h->{HandleError};
\&    $h->{HandleError} = sub {
\&      return 1 if $previous_handler and &$previous_handler(@_);
\&      ... your code here ...
\&    }
\&  }
.Ve
Using a \f(CW\*(C`my\*(C'\fR inside a subroutine to store the previous \f(CW\*(C`HandleError\*(C'\fR
value is important.  See the perlsub manpage and the perlref manpage for more information
about \fIclosures\fR.
.Sp
It is possible for \f(CW\*(C`HandleError\*(C'\fR to alter the error message that
will be used by \f(CW\*(C`RaiseError\*(C'\fR and \f(CW\*(C`PrintError\*(C'\fR if it returns false.
It can do that by altering the value of \f(CW$_\fR[0]. This example appends
a stack trace to all errors and, unlike the previous example using
Carp::confess, this will work \f(CW\*(C`PrintError\*(C'\fR as well as \f(CW\*(C`RaiseError\*(C'\fR:
.Sp
.Vb 1
\&  $h->{HandleError} = sub { $_[0]=Carp::longmess($_[0]); 0; };
.Ve
It is also possible for \f(CW\*(C`HandleError\*(C'\fR to hide an error, to a limited
degree, by using the set_err entry elsewhere in this document to reset \f(CW$DBI::err\fR and \f(CW$DBI::errstr\fR,
and altering the return value of the failed method. For example:
.Sp
.Vb 7
\&  $h->{HandleError} = sub {
\&    return 0 unless $_[0] =~ /^\eS+ fetchrow_arrayref failed:/;
\&    return 0 unless $_[1]->err == 1234; # the error to 'hide'
\&    $h->set_err(0,"");  # turn off the error
\&    $_[2] = [ ... ];    # supply alternative return value
\&    return 1;
\&  };
.Ve
This only works for methods which return a single value and is hard
to make reliable (avoiding infinite loops, for example) and so isn't
recommended for general use!  If you find a \fIgood\fR use for it then
please let me know.
.Ip "\f(CW\*(C`ShowErrorStatement\*(C'\fR (boolean, inherited) \fI\s-1NEW\s0\fR" 4
.IX Item "ShowErrorStatement (boolean, inherited) NEW"
This attribute can be used to cause the relevant Statement text to be
appended to the error messages generated by the \f(CW\*(C`RaiseError\*(C'\fR and
\&\f(CW\*(C`PrintError\*(C'\fR attributes. Only applies to errors on statement handles
plus the \fIprepare()\fR, \fIdo()\fR, and the various \f(CW\*(C`select*()\*(C'\fR database handle methods.
(The exact format of the appended text is subject to change.)
.Sp
If \f(CW\*(C`$h\->{ParamValues}\*(C'\fR returns a hash reference of parameter
(placeholder) values then those are formatted and appened to the
end of the Statement text in the error message.
.Ip "\f(CW\*(C`TraceLevel\*(C'\fR (integer, inherited) \fI\s-1NEW\s0\fR" 4
.IX Item "TraceLevel (integer, inherited) NEW"
This attribute can be used as an alternative to the the trace entry elsewhere in this document method
to set the \s-1DBI\s0 trace level for a specific handle.
.Ip "\f(CW\*(C`FetchHashKeyName\*(C'\fR (string, inherited)" 4
.IX Item "FetchHashKeyName (string, inherited)"
This attribute is used to specify which attribute name the
\&\fIfetchrow_hashref()\fR method should use to get the field names for the
hash keys. For historical reasons it defaults to '\f(CW\*(C`NAME\*(C'\fR' but it
is recommended to set it to '\f(CW\*(C`NAME_lc\*(C'\fR' or '\f(CW\*(C`NAME_uc\*(C'\fR' according
to your preference. It can only be set for driver and database tables.
For statement handles the value is frozen when \fIprepare()\fR is called.
.Ip "\f(CW\*(C`ChopBlanks\*(C'\fR (boolean, inherited)" 4
.IX Item "ChopBlanks (boolean, inherited)"
This attribute can be used to control the trimming of trailing space
characters from fixed width character (\s-1CHAR\s0) fields. No other field
types are affected, even where field values have trailing spaces.
.Sp
The default is false (although it is possible that the default may change).
Applications that need specific behavior should set the attribute as
needed. Emulation interfaces should set the attribute to match the
behavior of the interface they are emulating.
.Sp
Drivers are not required to support this attribute, but any driver which
does not support it must arrange to return \f(CW\*(C`undef\*(C'\fR as the attribute value.
.Ip "\f(CW\*(C`LongReadLen\*(C'\fR (unsigned integer, inherited)" 4
.IX Item "LongReadLen (unsigned integer, inherited)"
This attribute may be used to control the maximum length of long fields
(\*(L"blob\*(R", \*(L"memo\*(R", etc.) which the driver will read from the
database automatically when it fetches each row of data.  The
\&\f(CW\*(C`LongReadLen\*(C'\fR attribute only relates to fetching and reading long values; it
is not involved in inserting or updating them.
.Sp
A value of 0 means not to automatically fetch any long data. (\f(CW\*(C`fetch\*(C'\fR
should return \f(CW\*(C`undef\*(C'\fR for long fields when \f(CW\*(C`LongReadLen\*(C'\fR is 0.)
.Sp
The default is typically 0 (zero) bytes but may vary between drivers.
Applications fetching long fields should set this value to slightly
larger than the longest long field value to be fetched.
.Sp
Some databases return some long types encoded as pairs of hex digits.
For these types, \f(CW\*(C`LongReadLen\*(C'\fR relates to the underlying data length and not the
doubled-up length of the encoded string.
.Sp
Changing the value of \f(CW\*(C`LongReadLen\*(C'\fR for a statement handle after it
has been \f(CW\*(C`prepare\*(C'\fR'd will typically have no effect, so it's common to
set \f(CW\*(C`LongReadLen\*(C'\fR on the \f(CW\*(C`$dbh\*(C'\fR before calling \f(CW\*(C`prepare\*(C'\fR.
.Sp
Note that the value used here has a direct effect on the memory used
by the application, so don't be too generous.
.Sp
See the LongTruncOk entry elsewhere in this document for more information on truncation behavior.
.Ip "\f(CW\*(C`LongTruncOk\*(C'\fR (boolean, inherited)" 4
.IX Item "LongTruncOk (boolean, inherited)"
This attribute may be used to control the effect of fetching a long
field value which has been truncated (typically because it's longer
than the value of the \f(CW\*(C`LongReadLen\*(C'\fR attribute).
.Sp
By default, \f(CW\*(C`LongTruncOk\*(C'\fR is false and so fetching a long value that
needs to be truncated will cause the fetch to fail.
(Applications should always be sure to
check for errors after a fetch loop in case an error, such as a divide
by zero or long field truncation, caused the fetch to terminate
prematurely.)
.Sp
If a fetch fails due to a long field truncation when \f(CW\*(C`LongTruncOk\*(C'\fR is
false, many drivers will allow you to continue fetching further rows.
.Sp
See also the LongReadLen entry elsewhere in this document.
.Ip "\f(CW\*(C`Taint\*(C'\fR (boolean, inherited)" 4
.IX Item "Taint (boolean, inherited)"
If this attribute is set to a true value \fIand\fR Perl is running in
taint mode (e.g., started with the \f(CW\*(C`\-T\*(C'\fR option), then all data
fetched from the database is tainted, and the arguments to most \s-1DBI\s0
method calls are checked for being tainted. \fIThis may change.\fR
.Sp
The attribute defaults to off, even if Perl is in taint mode.
See the perlsec manpage for more about taint mode.  If Perl is not
running in taint mode, this attribute has no effect.
.Sp
When fetching data that you trust you can turn off the Taint attribute,
for that statement handle, for the duration of the fetch loop.
.Sp
Currently only fetched data is tainted. It is possible that the results
of other \s-1DBI\s0 method calls, and the value of fetched attributes, may
also be tainted in future versions. That change may well break your
applications unless you take great care now. If you use \s-1DBI\s0 Taint mode,
please report your experience and any suggestions for changes.
.Ip "\f(CW\*(C`Profile\*(C'\fR (inherited)" 4
.IX Item "Profile (inherited)"
Enable collection and reporting of method call timing statistics.
See the the DBI::Profile manpage module documentation for \fImuch\fR more detail.
.Ip "\f(CW\*(C`private_your_module_name_*\*(C'\fR" 4
.IX Item "private_your_module_name_*"
The \s-1DBI\s0 provides a way to store extra information in a \s-1DBI\s0 handle as
\&\*(L"private\*(R" attributes. The \s-1DBI\s0 will allow you to store and retreive any
attribute which has a name starting with "\f(CW\*(C`private_\*(C'\fR".
.Sp
It is \fIstrongly\fR recommended that you use just \fIone\fR private
attribute (e.g., use a hash ref) \fIand\fR give it a long and unambiguous
name that includes the module or application name that the attribute
relates to (e.g., "\f(CW\*(C`private_YourFullModuleName_thingy\*(C'\fR").
.Sp
Because of the way the Perl tie mechanism works you cannot reliably
use the \f(CW\*(C`||=\*(C'\fR operator directly to initialise the attribute, like this:
.Sp
.Vb 1
\&  my $foo = $dbh->{private_yourmodname_foo} ||= { ... }; # WRONG
.Ve
you should use a two step approach like this:
.Sp
.Vb 2
\&  my $foo = $dbh->{private_yourmodname_foo};
\&  $foo ||= $dbh->{private_yourmodname_foo} = { ... };
.Ve
.SH "DBI DATABASE HANDLE OBJECTS"
.IX Header "DBI DATABASE HANDLE OBJECTS"
This section covers the methods and attributes associated with
database handles.
.Sh "Database Handle Methods"
.IX Subsection "Database Handle Methods"
The following methods are specified for \s-1DBI\s0 database handles:
.Ip "\f(CW\*(C`do\*(C'\fR" 4
.IX Item "do"
.Vb 3
\&  $rows = $dbh->do($statement)           or die $dbh->errstr;
\&  $rows = $dbh->do($statement, \e%attr)   or die $dbh->errstr;
\&  $rows = $dbh->do($statement, \e%attr, @bind_values) or die ...
.Ve
Prepare and execute a single statement. Returns the number of rows
affected or \f(CW\*(C`undef\*(C'\fR on error. A return value of \f(CW\*(C`\-1\*(C'\fR means the
number of rows is not known, not applicable, or not available.
.Sp
This method is typically most useful for \fInon\fR-\f(CW\*(C`SELECT\*(C'\fR statements that
either cannot be prepared in advance (due to a limitation of the
driver) or do not need to be executed repeatedly. It should not
be used for \f(CW\*(C`SELECT\*(C'\fR statements because it does not return a statement
handle (so you can't fetch any data).
.Sp
The default \f(CW\*(C`do\*(C'\fR method is logically similar to:
.Sp
.Vb 7
\&  sub do {
\&      my($dbh, $statement, $attr, @bind_values) = @_;
\&      my $sth = $dbh->prepare($statement, $attr) or return undef;
\&      $sth->execute(@bind_values) or return undef;
\&      my $rows = $sth->rows;
\&      ($rows == 0) ? "0E0" : $rows; # always return true if no error
\&  }
.Ve
For example:
.Sp
.Vb 4
\&  my $rows_deleted = $dbh->do(q{
\&      DELETE FROM table
\&      WHERE status = ?
\&  }, undef, 'DONE') or die $dbh->errstr;
.Ve
Using placeholders and \f(CW\*(C`@bind_values\*(C'\fR with the \f(CW\*(C`do\*(C'\fR method can be
useful because it avoids the need to correctly quote any variables
in the \f(CW\*(C`$statement\*(C'\fR. But if you'll be executing the statement many
times then it's more efficient to \f(CW\*(C`prepare\*(C'\fR it once and call
\&\f(CW\*(C`execute\*(C'\fR many times instead.
.Sp
The \f(CW\*(C`q{...}\*(C'\fR style quoting used in this example avoids clashing with
quotes that may be used in the \s-1SQL\s0 statement. Use the double-quote-like
\&\f(CW\*(C`qq{...}\*(C'\fR operator if you want to interpolate variables into the string.
See the Quote and Quote-like Operators entry in the perlop manpage for more details.
.Ip "\f(CW\*(C`selectrow_array\*(C'\fR" 4
.IX Item "selectrow_array"
.Vb 3
\&  @row_ary = $dbh->selectrow_array($statement);
\&  @row_ary = $dbh->selectrow_array($statement, \e%attr);
\&  @row_ary = $dbh->selectrow_array($statement, \e%attr, @bind_values);
.Ve
This utility method combines the prepare, execute, and fetchrow_array entries elsewhere in this document into a single call. If called in a list context, it
returns the first row of data from the statement. If called in a scalar
context, it returns the first field of the first row. The \f(CW\*(C`$statement\*(C'\fR
parameter can be a previously prepared statement handle, in which case
the \f(CW\*(C`prepare\*(C'\fR is skipped.
.Sp
If any method fails, and the RaiseError entry elsewhere in this document is not set, \f(CW\*(C`selectrow_array\*(C'\fR
will return an empty list.
.Sp
In a scalar context, \f(CW\*(C`selectrow_array\*(C'\fR returns the value of the first
field. An \f(CW\*(C`undef\*(C'\fR is returned if there are no matching rows or an error
occurred. Since that \f(CW\*(C`undef\*(C'\fR can't be distinguished from an \f(CW\*(C`undef\*(C'\fR returned
because the first field value was \s-1NULL\s0, calling \f(CW\*(C`selectrow_array\*(C'\fR in
a scalar context should be used with caution.
.Ip "\f(CW\*(C`selectrow_arrayref\*(C'\fR" 4
.IX Item "selectrow_arrayref"
.Vb 3
\&  $ary_ref = $dbh->selectrow_array($statement);
\&  $ary_ref = $dbh->selectrow_array($statement, \e%attr);
\&  $ary_ref = $dbh->selectrow_array($statement, \e%attr, @bind_values);
.Ve
This utility method combines the prepare, execute, and fetchrow_arrayref entries elsewhere in this document into a single call. It returns the first row of
data from the statement.  The \f(CW\*(C`$statement\*(C'\fR parameter can be a previously
prepared statement handle, in which case the \f(CW\*(C`prepare\*(C'\fR is skipped.
.Sp
If any method fails, and the RaiseError entry elsewhere in this document is not set, \f(CW\*(C`selectrow_array\*(C'\fR
will return undef.
.Ip "\f(CW\*(C`selectrow_hashref\*(C'\fR" 4
.IX Item "selectrow_hashref"
.Vb 3
\&  $hash_ref = $dbh->selectrow_hashref($statement);
\&  $hash_ref = $dbh->selectrow_hashref($statement, \e%attr);
\&  $hash_ref = $dbh->selectrow_hashref($statement, \e%attr, @bind_values);
.Ve
This utility method combines the prepare, execute, and fetchrow_hashref entries elsewhere in this document into a single call. It returns the first row of
data from the statement.  The \f(CW\*(C`$statement\*(C'\fR parameter can be a previously
prepared statement handle, in which case the \f(CW\*(C`prepare\*(C'\fR is skipped.
.Sp
If any method fails, and the RaiseError entry elsewhere in this document is not set, \f(CW\*(C`selectrow_hashref\*(C'\fR
will return undef.
.Ip "\f(CW\*(C`selectall_arrayref\*(C'\fR" 4
.IX Item "selectall_arrayref"
.Vb 3
\&  $ary_ref = $dbh->selectall_arrayref($statement);
\&  $ary_ref = $dbh->selectall_arrayref($statement, \e%attr);
\&  $ary_ref = $dbh->selectall_arrayref($statement, \e%attr, @bind_values);
.Ve
This utility method combines the prepare, execute, and fetchall_arrayref entries elsewhere in this document into a single call. It returns a reference to an
array containing a reference to an array for each row of data fetched.
.Sp
The \f(CW\*(C`$statement\*(C'\fR parameter can be a previously prepared statement handle,
in which case the \f(CW\*(C`prepare\*(C'\fR is skipped. This is recommended if the
statement is going to be executed many times.
.Sp
If the RaiseError entry elsewhere in this document is not set and any method except \f(CW\*(C`fetchall_arrayref\*(C'\fR
fails then \f(CW\*(C`selectall_arrayref\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR; if
\&\f(CW\*(C`fetchall_arrayref\*(C'\fR fails then it will return with whatever data
has been fetched thus far. You should check \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`err\*(C'\fR
afterwards (or use the \f(CW\*(C`RaiseError\*(C'\fR attribute) to discover if the data is
complete or was truncated due to an error.
.Sp
The the fetchall_arrayref entry elsewhere in this document method called by \f(CW\*(C`selectall_arrayref\*(C'\fR
supports a \f(CW$max_rows\fR parameter. You can specify a value for \f(CW$max_rows\fR
by including a '\f(CW\*(C`MaxRows\*(C'\fR' attribute in \e%attr.
.Sp
The the fetchall_arrayref entry elsewhere in this document method called by \f(CW\*(C`selectall_arrayref\*(C'\fR
also supports a \f(CW$slice\fR parameter. You can specify a value for \f(CW$slice\fR by
including a '\f(CW\*(C`Slice\*(C'\fR' or '\f(CW\*(C`Columns\*(C'\fR' attribute in \e%attr. The only
difference between the two is that if \f(CW\*(C`Slice\*(C'\fR is not defined and
\&\f(CW\*(C`Columns\*(C'\fR is an array ref, then the array is assumed to contain column
index values (which count from 1), rather than perl array index values.
In which case the array is copied and each value decremented before
passing to \f(CW\*(C`/fetchall_arrayref\*(C'\fR.
.Ip "\f(CW\*(C`selectall_hashref\*(C'\fR" 4
.IX Item "selectall_hashref"
.Vb 3
\&  $hash_ref = $dbh->selectall_hashref($statement, $key_field);
\&  $hash_ref = $dbh->selectall_hashref($statement, $key_field, \e%attr);
\&  $hash_ref = $dbh->selectall_hashref($statement, $key_field, \e%attr, @bind_values);
.Ve
This utility method combines the prepare, execute, and fetchall_hashref entries elsewhere in this document into a single call. It returns a reference to a
hash containing one entry for each row. The key for each row entry is
specified by \f(CW$key_field\fR. The value is a reference to a hash returned by
\&\f(CW\*(C`fetchrow_hashref\*(C'\fR.
.Sp
The \f(CW\*(C`$statement\*(C'\fR parameter can be a previously prepared statement handle,
in which case the \f(CW\*(C`prepare\*(C'\fR is skipped. This is recommended if the
statement is going to be executed many times.
.Sp
If any method except \f(CW\*(C`fetchrow_hashref\*(C'\fR fails, and the RaiseError entry elsewhere in this document is not set,
\&\f(CW\*(C`selectall_hashref\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.  If \f(CW\*(C`fetchrow_hashref\*(C'\fR fails and
the RaiseError entry elsewhere in this document is not set, then it will return with whatever data it
has fetched thus far. \f(CW$DBI::err\fR should be checked to catch that.
.Ip "\f(CW\*(C`selectcol_arrayref\*(C'\fR" 4
.IX Item "selectcol_arrayref"
.Vb 3
\&  $ary_ref = $dbh->selectcol_arrayref($statement);
\&  $ary_ref = $dbh->selectcol_arrayref($statement, \e%attr);
\&  $ary_ref = $dbh->selectcol_arrayref($statement, \e%attr, @bind_values);
.Ve
This utility method combines the prepareand execute entries elsewhere in this document, and fetching one
column from all the rows, into a single call. It returns a reference to
an array containing the values of the first column from each row.
.Sp
The \f(CW\*(C`$statement\*(C'\fR parameter can be a previously prepared statement handle,
in which case the \f(CW\*(C`prepare\*(C'\fR is skipped. This is recommended if the
statement is going to be executed many times.
.Sp
If any method except \f(CW\*(C`fetch\*(C'\fR fails, and the RaiseError entry elsewhere in this document is not set,
\&\f(CW\*(C`selectcol_arrayref\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.  If \f(CW\*(C`fetch\*(C'\fR fails and
the RaiseError entry elsewhere in this document is not set, then it will return with whatever data it
has fetched thus far. \f(CW$DBI::err\fR should be checked to catch that.
.Sp
The \f(CW\*(C`selectcol_arrayref\*(C'\fR method defaults to pushing a single column
value (the first) from each row into the result array. However, it can
also push another column, or even multiple columns per row, into the
result array. This behaviour can be specified via a '\f(CW\*(C`Columns\*(C'\fR'
attribute which must be a ref to an array containing the column number
or numbers to use. For example:
.Sp
.Vb 3
\&  # get array of id and name pairs:
\&  my $ary_ref = $dbh->selectcol_arrayref("select id, name from table", { Columns=>[1,2] });
\&  my %hash = @$ary_ref; # build hash from key-value pairs so $hash{$id} => name
.Ve
.Ip "\f(CW\*(C`prepare\*(C'\fR" 4
.IX Item "prepare"
.Vb 2
\&  $sth = $dbh->prepare($statement)          or die $dbh->errstr;
\&  $sth = $dbh->prepare($statement, \e%attr)  or die $dbh->errstr;
.Ve
Prepares a single statement for later execution by the database
engine and returns a reference to a statement handle object.
.Sp
The returned statement handle can be used to get attributes of the
statement and invoke the the execute entry elsewhere in this document method. See the Statement Handle Methods entry elsewhere in this document.
.Sp
Drivers for engines without the concept of preparing a
statement will typically just store the statement in the returned
handle and process it when \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`execute\*(C'\fR is called. Such drivers are
unlikely to give much useful information about the
statement, such as \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`{NUM_OF_FIELDS}\*(C'\fR, until after \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`execute\*(C'\fR
has been called. Portable applications should take this into account.
.Sp
In general, \s-1DBI\s0 drivers do not parse the contents of the statement
(other than simply counting any the Placeholders entry elsewhere in this document). The statement is
passed directly to the database engine, sometimes known as pass-thru
mode. This has advantages and disadvantages. On the plus side, you can
access all the functionality of the engine being used. On the downside,
you're limited if you're using a simple engine, and you need to take extra care if
writing applications intended to be portable between engines.
.Sp
Portable applications should not assume that a new statement can be
prepared and/or executed while still fetching results from a previous
statement.
.Sp
Some command-line \s-1SQL\s0 tools use statement terminators, like a semicolon,
to indicate the end of a statement. Such terminators should not normally
be used with the \s-1DBI\s0.
.Ip "\f(CW\*(C`prepare_cached\*(C'\fR" 4
.IX Item "prepare_cached"
.Vb 3
\&  $sth = $dbh->prepare_cached($statement)
\&  $sth = $dbh->prepare_cached($statement, \e%attr)
\&  $sth = $dbh->prepare_cached($statement, \e%attr, $allow_active)
.Ve
Like the prepare entry elsewhere in this document except that the statement handle returned will be
stored in a hash associated with the \f(CW\*(C`$dbh\*(C'\fR. If another call is made to
\&\f(CW\*(C`prepare_cached\*(C'\fR with the same \f(CW\*(C`$statement\*(C'\fR and \f(CW\*(C`%attr\*(C'\fR values, then the
corresponding cached \f(CW\*(C`$sth\*(C'\fR will be returned without contacting the
database server.
.Sp
Here are some examples of \f(CW\*(C`prepare_cached\*(C'\fR:
.Sp
.Vb 9
\&  sub insert_hash {
\&    my ($table, $field_values) = @_;
\&    my @fields = sort keys %$field_values; # sort required
\&    my @values = @{$field_values}{@fields};
\&    my $sql = sprintf "insert into %s (%s) values (%s)",
\&        $table, join(",", @fields), join(",", ("?")x@fields);
\&    my $sth = $dbh->prepare_cached($sql);
\&    return $sth->execute(@values);
\&  }
.Ve
.Vb 9
\&  sub search_hash {
\&    my ($table, $field_values) = @_;
\&    my @fields = sort keys %$field_values; # sort required
\&    my @values = @{$field_values}{@fields};
\&    my $qualifier = "";
\&    $qualifier = "where ".join(" and ", map { "$_=?" } @fields) if @fields;
\&    $sth = $dbh->prepare_cached("SELECT * FROM $table $qualifier");
\&    return $dbh->selectall_arrayref($sth, {}, @values);
\&  }
.Ve
\&\fICaveat emptor:\fR This caching can be useful in some applications,
but it can also cause problems and should be used with care. Here
is a contrived case where caching would cause a significant problem:
.Sp
.Vb 9
\&  my $sth = $dbh->prepare_cached('SELECT * FROM foo WHERE bar=?');
\&  $sth->execute($bar);
\&  while (my $data = $sth->fetchrow_hashref) {
\&    my $sth2 = $dbh->prepare_cached('SELECT * FROM foo WHERE bar=?');
\&    $sth2->execute($data->{bar});
\&    while (my $data2 = $sth2->fetchrow_arrayref) {
\&      do_stuff(...);
\&    }
\&  }
.Ve
In this example, since both handles are preparing the exact same statement,
\&\f(CW\*(C`$sth2\*(C'\fR will not be its own statement handle, but a duplicate of \f(CW\*(C`$sth\*(C'\fR
returned from the cache. The results will certainly not be what you expect.
Typically the the inner fetch loop will work normally, fetching all
the records and terminating when there are no more, but now \f(CW$sth\fR
is the same as \f(CW$sth2\fR the outer fetch loop will also terminate.
.Sp
The \f(CW\*(C`$allow_active\*(C'\fR parameter lets you adjust \s-1DBI\s0's behavior when
prepare_cached is returning a statement handle that is still active.
There are three settings:
.RS 4
.Sp
\&\fB0\fR: A warning will be generated, and \f(CW\*(C`finish\*(C'\fR will be called on
the statement handle before it is returned.  This is the default
behavior if \f(CW\*(C`$allow_active\*(C'\fR is not passed.
.Sp
\&\fB1\fR: \f(CW\*(C`finish\*(C'\fR will be called on the statement handle, but the
warning is suppressed.
.Sp
\&\fB2\fR: \s-1DBI\s0 will not touch the statement handle before returning it.
You will need to check \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`{Active}\*(C'\fR on the returned
statement handle and deal with it in your own code.
.RE
.RS 4
.Sp
Because the cache used by \fIprepare_cached()\fR is keyed by all the
parameters, including any attributes passed, you can also avoid
this issue by doing something like:
.Sp
.Vb 1
\&  my $sth = $dbh->prepare_cached("...", { dbi_dummy => __FILE__.__LINE__ });
.Ve
which will ensure that prepare_cached only returns statements cached
by that line of code in that source file. 
.RE
.Ip "\f(CW\*(C`commit\*(C'\fR" 4
.IX Item "commit"
.Vb 1
\&  $rc  = $dbh->commit     or die $dbh->errstr;
.Ve
Commit (make permanent) the most recent series of database changes
if the database supports transactions and AutoCommit is off.
.Sp
If \f(CW\*(C`AutoCommit\*(C'\fR is on, then calling
\&\f(CW\*(C`commit\*(C'\fR will issue a \*(L"commit ineffective with AutoCommit\*(R" warning.
.Sp
See also the Transactions entry elsewhere in this document in the the FURTHER INFORMATION entry elsewhere in this document section below.
.Ip "\f(CW\*(C`rollback\*(C'\fR" 4
.IX Item "rollback"
.Vb 1
\&  $rc  = $dbh->rollback   or die $dbh->errstr;
.Ve
Rollback (undo) the most recent series of uncommitted database
changes if the database supports transactions and AutoCommit is off.
.Sp
If \f(CW\*(C`AutoCommit\*(C'\fR is on, then calling
\&\f(CW\*(C`rollback\*(C'\fR will issue a \*(L"rollback ineffective with AutoCommit\*(R" warning.
.Sp
See also the Transactions entry elsewhere in this document in the the FURTHER INFORMATION entry elsewhere in this document section below.
.Ip "\f(CW\*(C`begin_work\*(C'\fR" 4
.IX Item "begin_work"
.Vb 1
\&  $rc  = $dbh->begin_work   or die $dbh->errstr;
.Ve
Enable transactions (by turning \f(CW\*(C`AutoCommit\*(C'\fR off) until the next call
to \f(CW\*(C`commit\*(C'\fR or \f(CW\*(C`rollback\*(C'\fR. After the next \f(CW\*(C`commit\*(C'\fR or \f(CW\*(C`rollback\*(C'\fR,
\&\f(CW\*(C`AutoCommit\*(C'\fR will automatically be turned on again.
.Sp
If \f(CW\*(C`AutoCommit\*(C'\fR is already off when \f(CW\*(C`begin_work\*(C'\fR is called then
it does nothing except return an error. If the driver does not support
transactions then when \f(CW\*(C`begin_work\*(C'\fR attempts to set \f(CW\*(C`AutoCommit\*(C'\fR off
the driver will trigger a fatal error.
.Sp
See also the Transactions entry elsewhere in this document in the the FURTHER INFORMATION entry elsewhere in this document section below.
.Ip "\f(CW\*(C`disconnect\*(C'\fR" 4
.IX Item "disconnect"
.Vb 1
\&  $rc = $dbh->disconnect  or warn $dbh->errstr;
.Ve
Disconnects the database from the database handle. \f(CW\*(C`disconnect\*(C'\fR is typically only used
before exiting the program. The handle is of little use after disconnecting.
.Sp
The transaction behavior of the \f(CW\*(C`disconnect\*(C'\fR method is, sadly,
undefined.  Some database systems (such as Oracle and Ingres) will
automatically commit any outstanding changes, but others (such as
Informix) will rollback any outstanding changes.  Applications not
using \f(CW\*(C`AutoCommit\*(C'\fR should explicitly call \f(CW\*(C`commit\*(C'\fR or \f(CW\*(C`rollback\*(C'\fR before
calling \f(CW\*(C`disconnect\*(C'\fR.
.Sp
The database is automatically disconnected by the \f(CW\*(C`DESTROY\*(C'\fR method if
still connected when there are no longer any references to the handle.
The \f(CW\*(C`DESTROY\*(C'\fR method for each driver should implicitly call \f(CW\*(C`rollback\*(C'\fR to
undo any uncommitted changes. This is vital behavior to ensure that
incomplete transactions don't get committed simply because Perl calls
\&\f(CW\*(C`DESTROY\*(C'\fR on every object before exiting. Also, do not rely on the order
of object destruction during \*(L"global destruction\*(R", as it is undefined.
.Sp
Generally, if you want your changes to be commited or rolled back when
you disconnect, then you should explicitly call the commit entry elsewhere in this document or the rollback entry elsewhere in this document
before disconnecting.
.Sp
If you disconnect from a database while you still have active
statement handles (e.g., \s-1SELECT\s0 statement handles that may have
more data to fetch), you will get a warning. The warning may indicate
that a fetch loop terminated early, perhaps due to an uncaught error.
To avoid the warning call the \f(CW\*(C`finish\*(C'\fR method on the active handles.
.Ip "\f(CW\*(C`ping\*(C'\fR" 4
.IX Item "ping"
.Vb 1
\&  $rc = $dbh->ping;
.Ve
Attempts to determine, in a reasonably efficient way, if the database
server is still running and the connection to it is still working.
Individual drivers should implement this function in the most suitable
manner for their database engine.
.Sp
The current \fIdefault\fR implementation always returns true without
actually doing anything. Actually, it returns "\f(CW\*(C`0 but true\*(C'\fR" which is
true but zero. That way you can tell if the return value is genuine or
just the default. Drivers should override this method with one that
does the right thing for their type of database.
.Sp
Few applications would have direct use for this method. See the specialized
Apache::DBI module for one example usage.
.Ip "\f(CW\*(C`get_info\*(C'\fR \fI\s-1NEW\s0\fR" 4
.IX Item "get_info NEW"
\&\fBWarning:\fR This method is experimental and may change.
.Sp
.Vb 1
\&  $value = $dbh->get_info( $info_type );
.Ve
Returns information about the implementation, i.e. driver and data
source capabilities, restrictions etc. It returns \f(CW\*(C`undef\*(C'\fR for
unknown or unimplemented information types. For example:
.Sp
.Vb 2
\&  $database_version  = $dbh->get_info(  18 ); # SQL_DBMS_VER
\&  $max_select_tables = $dbh->get_info( 106 ); # SQL_MAXIMUM_TABLES_IN_SELECT
.Ve
See the Standards Reference Information entry elsewhere in this document for more detailed information
about the information types and their meanings and possible return values.
.Sp
The \s-1DBI\s0 curently doesn't provide a name to number mapping for the
information type codes or the results. Applications are expected to use
the integer values directly, with the name in a comment, or define
their own named values using something like the the constant manpage pragma.
.Sp
Because some \s-1DBI\s0 methods make use of \fIget_info()\fR, drivers are strongly
encouraged to support \fIat least\fR the following very minimal set
of information types to ensure the \s-1DBI\s0 itself works properly:
.Sp
.Vb 7
\& Type  Name                        Example A     Example B
\& ----  --------------------------  ------------  ------------
\&   17  SQL_DBMS_NAME               'ACCESS'      'Oracle'
\&   18  SQL_DBMS_VER                '03.50.0000'  '08.01.0721'
\&   29  SQL_IDENTIFIER_QUOTE_CHAR   '`'           '"'
\&   41  SQL_CATALOG_NAME_SEPARATOR  '.'           '@'
\&  114  SQL_CATALOG_LOCATION        1             2
.Ve
.Ip "\f(CW\*(C`table_info\*(C'\fR \fI\s-1NEW\s0\fR" 4
.IX Item "table_info NEW"
\&\fBWarning:\fR This method is experimental and may change.
.Sp
.Vb 3
\&  $sth = $dbh->table_info( $catalog, $schema, $table, $type );
\&  $sth = $dbh->table_info( $catalog, $schema, $table, $type, \e%attr );
\&  $sth = $dbh->table_info( \e%attr ); # old style
.Ve
Returns an active statement handle that can be used to fetch
information about tables and views that exist in the database.
.Sp
The old style interface passes all the parameters as a reference
to an attribute hash with some or all of the following attributes:
.Sp
.Vb 6
\&  %attr = (
\&       TABLE_CAT   => $catalog  # String value of the catalog name
\&     , TABLE_SCHEM => $schema   # String value of the schema name
\&     , TABLE_NAME  => $table    # String value of the table name
\&     , TABLE_TYPE  => $type     # String value of the table type(s)
\&  );
.Ve
The old style interface is deprecated and will be removed in a future version.
.Sp
The support for the selection criteria is driver specific. If the
driver doesn't support one or more of them then you may get back more
than you asked for and can do the filtering yourself.
.Sp
The arguments \f(CW$catalog\fR, \f(CW$schema\fR and \f(CW$table\fR may accept search patterns
according to the database/driver, for example: \f(CW$table\fR = '%FOO%';
Remember that the underscore character ('\f(CW\*(C`_\*(C'\fR') is a search pattern
that means match any character, so 'FOO_%' is the same as 'FOO%'
and 'FOO_BAR%' will match names like '\s-1FOO1BAR\s0'.
.Sp
The value of \f(CW$type\fR is a comma-separated list of one or more types of
tables to be returned in the result set. Each value may optionally be
quoted, e.g.:
.Sp
.Vb 2
\&  $type = "TABLE";
\&  $type = "'TABLE','VIEW'";
.Ve
In addition the following special cases may also be supported by some drivers:
.RS 4
.Ip "\(bu If the value of \f(CW$catalog\fR is '%' and \f(CW$schema\fR and \f(CW$table\fR name are empty strings, the result set contains a list of catalog names. For example:" 4
.IX Item "If the value of $catalog is '%' and $schema and $table name are empty strings, the result set contains a list of catalog names. For example:"
.Vb 1
\&  $sth = $dbh->table_info('%', '', '');
.Ve
.Ip "\(bu If the value of \f(CW$schema\fR is '%' and \f(CW$catalog\fR and \f(CW$table\fR are empty strings, the result set contains a list of schema names." 4
.IX Item "If the value of $schema is '%' and $catalog and $table are empty strings, the result set contains a list of schema names."
.Ip "\(bu If the value of \f(CW$type\fR is '%' and \f(CW$catalog\fR, \f(CW$schema\fR, and \f(CW$table\fR are all empty strings, the result set contains a list of table types." 4
.IX Item "If the value of $type is '%' and $catalog, $schema, and $table are all empty strings, the result set contains a list of table types."
.RE
.RS 4
.Sp
The statement handle returned has at least the following fields in the
order show below. Other fields, after these, may also be present.
.Sp
\&\fB\s-1TABLE_CAT\s0\fR: Table catalog identifier. This field is \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not
applicable to the data source, which is usually the case. This field
is empty if not applicable to the table.
.Sp
\&\fB\s-1TABLE_SCHEM\s0\fR: The name of the schema containing the \s-1TABLE_NAME\s0 value.
This field is \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not applicable to data source, and
empty if not applicable to the table.
.Sp
\&\fB\s-1TABLE_NAME\s0\fR: Name of the table (or view, synonym, etc).
.Sp
\&\fB\s-1TABLE_TYPE\s0\fR: One of the following: \*(L"\s-1TABLE\s0\*(R", \*(L"\s-1VIEW\s0\*(R", \*(L"\s-1SYSTEM\s0 \s-1TABLE\s0\*(R",
\&\*(L"\s-1GLOBAL\s0 \s-1TEMPORARY\s0\*(R", \*(L"\s-1LOCAL\s0 \s-1TEMPORARY\s0\*(R", \*(L"\s-1ALIAS\s0\*(R", \*(L"\s-1SYNONYM\s0\*(R" or a type
identifier that is specific to the data
source.
.Sp
\&\fB\s-1REMARKS\s0\fR: A description of the table. May be \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR).
.Sp
Note that \f(CW\*(C`table_info\*(C'\fR might not return records for all tables.
Applications can use any valid table regardless of whether it's
returned by \f(CW\*(C`table_info\*(C'\fR.
.Sp
See also the tables entry elsewhere in this document, the Catalog Methods entry elsewhere in this document and
the Standards Reference Information entry elsewhere in this document.
.RE
.Ip "\f(CW\*(C`column_info\*(C'\fR \fI\s-1NEW\s0\fR" 4
.IX Item "column_info NEW"
\&\fBWarning:\fR This method is experimental and may change.
.Sp
.Vb 1
\&  $sth = $dbh->column_info( $catalog, $schema, $table, $column );
.Ve
Returns an active statement handle that can be used to fetch
information about columns in specified tables.
.Sp
The arguments \f(CW$schema\fR, \f(CW$table\fR and \f(CW$column\fR may accept search patterns
according to the database/driver, for example: \f(CW$table\fR = '%FOO%';
.Sp
Note: The support for the selection criteria is driver specific. If the
driver doesn't support one or more of them then you may get back more
than you asked for and can do the filtering yourself.
.Sp
The statement handle returned has at least the following fields in the
order shown below. Other fields, after these, may also be present.
.Sp
\&\fB\s-1TABLE_CAT\s0\fR: The catalog identifier.
This field is \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not applicable to the data source,
which is often the case.  This field is empty if not applicable to the
table.
.Sp
\&\fB\s-1TABLE_SCHEM\s0\fR: The schema identifier.
This field is \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not applicable to the data source,
and empty if not applicable to the table.
.Sp
\&\fB\s-1TABLE_NAME\s0\fR: The table identifier.
Note: A driver may provide column metadata not only for base tables, but
also for derived objects like \s-1SYNONYMS\s0 etc.
.Sp
\&\fB\s-1COLUMN_NAME\s0\fR: The column identifier.
.Sp
\&\fB\s-1DATA_TYPE\s0\fR: The concise data type code.
.Sp
\&\fB\s-1TYPE_NAME\s0\fR: A data source dependent data type name.
.Sp
\&\fB\s-1COLUMN_SIZE\s0\fR: The column size.
This is the maximum length in characters for character data types,
the number of digits or bits for numeric data types or the length
in the representation of temporal types.
See the relevant specifications for detailed information.
.Sp
\&\fB\s-1BUFFER_LENGTH\s0\fR: The length in bytes of transferred data.
.Sp
\&\fB\s-1DECIMAL_DIGITS\s0\fR: The total number of significant digits to the right of
the decimal point.
.Sp
\&\fB\s-1NUM_PREC_RADIX\s0\fR: The radix for numeric precision.
The value is 10 or 2 for numeric data types and \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not
applicable.
.Sp
\&\fB\s-1NULLABLE\s0\fR: Indicates if a column can accept NULLs.
The following values are defined:
.Sp
.Vb 3
\&  SQL_NO_NULLS          0
\&  SQL_NULLABLE          1
\&  SQL_NULLABLE_UNKNOWN  2
.Ve
\&\fB\s-1REMARKS\s0\fR: A description of the column.
.Sp
\&\fB\s-1COLUMN_DEF\s0\fR: The default value of the column.
.Sp
\&\fB\s-1SQL_DATA_TYPE\s0\fR: The \s-1SQL\s0 data type.
.Sp
\&\fB\s-1SQL_DATETIME_SUB\s0\fR: The subtype code for datetime and interval data types.
.Sp
\&\fB\s-1CHAR_OCTET_LENGTH\s0\fR: The maximum length in bytes of a character or binary
data type column.
.Sp
\&\fB\s-1ORDINAL_POSITION\s0\fR: The column sequence number (starting with 1).
.Sp
\&\fB\s-1IS_NULLABLE\s0\fR: Indicates if the column can accept NULLs.
Possible values are: '\s-1NO\s0', '\s-1YES\s0' and ''.
.Sp
\&\s-1SQL/CLI\s0 defines the following additional columns:
.Sp
.Vb 18
\&  CHAR_SET_CAT
\&  CHAR_SET_SCHEM
\&  CHAR_SET_NAME
\&  COLLATION_CAT
\&  COLLATION_SCHEM
\&  COLLATION_NAME
\&  UDT_CAT
\&  UDT_SCHEM
\&  UDT_NAME
\&  DOMAIN_CAT
\&  DOMAIN_SCHEM
\&  DOMAIN_NAME
\&  SCOPE_CAT
\&  SCOPE_SCHEM
\&  SCOPE_NAME
\&  MAX_CARDINALITY
\&  DTD_IDENTIFIER
\&  IS_SELF_REF
.Ve
Drivers capable of supplying any of those values should do so in
the corresponding column and supply undef values for the others.
.Sp
Drivers wishing to provide extra database/driver specific information
should do so in extra columns beyond all those listed above, and
use lowercase field names with the driver-specific prefix (i.e.,
\&'ora_...'). Applications accessing such fields should do so by name
and not by column number.
.Sp
The result set is ordered by \s-1TABLE_CAT\s0, \s-1TABLE_SCHEM\s0, \s-1TABLE_NAME\s0
and \s-1ORDINAL_POSITION\s0.
.Sp
Note: There is some overlap with statement attributes (in perl) and
SQLDescribeCol (in \s-1ODBC\s0). However, SQLColumns provides more metadata.
.Sp
See also the Catalog Methods entry elsewhere in this document and the Standards Reference Information entry elsewhere in this document.
.Ip "\f(CW\*(C`primary_key_info\*(C'\fR \fI\s-1NEW\s0\fR" 4
.IX Item "primary_key_info NEW"
\&\fBWarning:\fR This method is experimental and may change.
.Sp
.Vb 1
\&  $sth = $dbh->primary_key_info( $catalog, $schema, $table );
.Ve
Returns an active statement handle that can be used to fetch information
about columns that make up the primary key for a table.
The arguments don't accept search patterns (unlike \fItable_info()\fR).
.Sp
For example:
.Sp
.Vb 2
\&  $sth = $dbh->primary_key_info( undef, $user, 'foo' );
\&  $data = $sth->fetchall_arrayref;
.Ve
Note: The support for the selection criteria, such as \f(CW$catalog\fR, is
driver specific.  If the driver doesn't support catalogs and/or
schemas, it may ignore these criteria.
.Sp
The statement handle returned has at least the following fields in the
order shown below. Other fields, after these, may also be present.
.Sp
\&\fB\s-1TABLE_CAT\s0\fR: The catalog identifier.
This field is \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not applicable to the data source,
which is often the case.  This field is empty if not applicable to the
table.
.Sp
\&\fB\s-1TABLE_SCHEM\s0\fR: The schema identifier.
This field is \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not applicable to the data source,
and empty if not applicable to the table.
.Sp
\&\fB\s-1TABLE_NAME\s0\fR: The table identifier.
.Sp
\&\fB\s-1COLUMN_NAME\s0\fR: The column identifier.
.Sp
\&\fB\s-1KEY_SEQ\s0\fR: The column sequence number (starting with 1).
Note: This field is named \fB\s-1ORDINAL_POSITION\s0\fR in \s-1SQL/CLI\s0.
.Sp
\&\fB\s-1PK_NAME\s0\fR: The primary key constraint identifier.
This field is \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not applicable to the data source.
.Sp
See also the Catalog Methods entry elsewhere in this document and the Standards Reference Information entry elsewhere in this document.
.Ip "\f(CW\*(C`primary_key\*(C'\fR \fI\s-1NEW\s0\fR" 4
.IX Item "primary_key NEW"
\&\fBWarning:\fR This method is experimental and may change.
.Sp
.Vb 1
\&  @key_column_names = $dbh->primary_key( $catalog, $schema, $table );
.Ve
Simple interface to the \fIprimary_key_info()\fR method. Returns a list of
the column names that comprise the primary key of the specified table.
The list is in primary key column sequence order.
.Ip "\f(CW\*(C`foreign_key_info\*(C'\fR \fI\s-1NEW\s0\fR" 4
.IX Item "foreign_key_info NEW"
\&\fBWarning:\fR This method is experimental and may change.
.Sp
.Vb 2
\&  $sth = $dbh->foreign_key_info( $pk_catalog, $pk_schema, $pk_table
\&                               , $fk_catalog, $fk_schema, $fk_table );
.Ve
Returns an active statement handle that can be used to fetch information
about foreign keys in and/or referencing the specified \fItable\fR\|(s).
The arguments don't accept search patterns (unlike \fItable_info()\fR).
.Sp
\&\f(CW\*(C`$pk_catalog\*(C'\fR, \f(CW\*(C`$pk_schema\*(C'\fR, \f(CW\*(C`$pk_table\*(C'\fR
identify the primary (unique) key table (\fB\s-1PKT\s0\fR).
.Sp
\&\f(CW\*(C`$fk_catalog\*(C'\fR, \f(CW\*(C`$fk_schema\*(C'\fR, \f(CW\*(C`$fk_table\*(C'\fR
identify the foreign key table (\fB\s-1FKT\s0\fR).
.Sp
If both \fB\s-1PKT\s0\fR and \fB\s-1FKT\s0\fR are given, the function returns the foreign key, if
any, in table \fB\s-1FKT\s0\fR that refers to the primary (unique) key of table \fB\s-1PKT\s0\fR.
(Note: In \s-1SQL/CLI\s0, the result is implementation-defined.)
.Sp
If only \fB\s-1PKT\s0\fR is given, then the result set contains the primary key
of that table and all foreign keys that refer to it.
.Sp
If only \fB\s-1FKT\s0\fR is given, then the result set contains all foreign keys
in that table and the primary keys to which they refer.
(Note: In \s-1SQL/CLI\s0, the result includes unique keys too.)
.Sp
For example:
.Sp
.Vb 3
\&  $sth = $dbh->foreign_key_info( undef, $user, 'master');
\&  $sth = $dbh->foreign_key_info( undef, undef,   undef , undef, $user, 'detail');
\&  $sth = $dbh->foreign_key_info( undef, $user, 'master', undef, $user, 'detail');
.Ve
Note: The support for the selection criteria, such as \f(CW\*(C`$catalog\*(C'\fR, is
driver specific.  If the driver doesn't support catalogs and/or
schemas, it may ignore these criteria.
.Sp
The statement handle returned has the following fields in the order shown below.
Because \s-1ODBC\s0 never includes unique keys, they define different columns in the
result set than \s-1SQL/CLI\s0. \s-1SQL/CLI\s0 column names are shown in parentheses.
.Sp
\&\fB\s-1PKTABLE_CAT\s0    ( \s-1UK_TABLE_CAT\s0      )\fR:
The primary (unique) key table catalog identifier.
This field is \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not applicable to the data source,
which is often the case.  This field is empty if not applicable to the
table.
.Sp
\&\fB\s-1PKTABLE_SCHEM\s0  ( \s-1UK_TABLE_SCHEM\s0    )\fR:
The primary (unique) key table schema identifier.
This field is \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not applicable to the data source,
and empty if not applicable to the table.
.Sp
\&\fB\s-1PKTABLE_NAME\s0   ( \s-1UK_TABLE_NAME\s0     )\fR:
The primary (unique) key table identifier.
.Sp
\&\fB\s-1PKCOLUMN_NAME\s0  (\s-1UK_COLUMN_NAME\s0    )\fR:
The primary (unique) key column identifier.
.Sp
\&\fB\s-1FKTABLE_CAT\s0    ( \s-1FK_TABLE_CAT\s0      )\fR:
The foreign key table catalog identifier.
This field is \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not applicable to the data source,
which is often the case.  This field is empty if not applicable to the
table.
.Sp
\&\fB\s-1FKTABLE_SCHEM\s0  ( \s-1FK_TABLE_SCHEM\s0    )\fR:
The foreign key table schema identifier.
This field is \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) if not applicable to the data source,
and empty if not applicable to the table.
.Sp
\&\fB\s-1FKTABLE_NAME\s0   ( \s-1FK_TABLE_NAME\s0     )\fR:
The foreign key table identifier.
.Sp
\&\fB\s-1FKCOLUMN_NAME\s0  ( \s-1FK_COLUMN_NAME\s0    )\fR:
The foreign key column identifier.
.Sp
\&\fB\s-1KEY_SEQ\s0        ( \s-1ORDINAL_POSITION\s0  )\fR:
The column sequence number (starting with 1).
.Sp
\&\fB\s-1UPDATE_RULE\s0    ( \s-1UPDATE_RULE\s0       )\fR:
The referential action for the \s-1UPDATE\s0 rule.
The following codes are defined:
.Sp
.Vb 5
\&  CASCADE              0
\&  RESTRICT             1
\&  SET NULL             2
\&  NO ACTION            3
\&  SET DEFAULT          4
.Ve
\&\fB\s-1DELETE_RULE\s0    ( \s-1DELETE_RULE\s0       )\fR:
The referential action for the \s-1DELETE\s0 rule.
The codes are the same as for \s-1UPDATE_RULE\s0.
.Sp
\&\fB\s-1FK_NAME\s0        ( \s-1FK_NAME\s0           )\fR:
The foreign key name.
.Sp
\&\fB\s-1PK_NAME\s0        ( \s-1UK_NAME\s0           )\fR:
The primary (unique) key name.
.Sp
\&\fB\s-1DEFERRABILITY\s0  ( \s-1DEFERABILITY\s0      )\fR:
The deferrability of the foreign key constraint.
The following codes are defined:
.Sp
.Vb 3
\&  INITIALLY DEFERRED   5
\&  INITIALLY IMMEDIATE  6
\&  NOT DEFERRABLE       7
.Ve
\&\fB               ( \s-1UNIQUE_OR_PRIMARY\s0 )\fR:
This column is necessary if a driver includes all candidate (i.e. primary and
alternate) keys in the result set (as specified by \s-1SQL/CLI\s0).
The value of this column is \s-1UNIQUE\s0 if the foreign key references an alternate
key and \s-1PRIMARY\s0 if the foreign key references a primary key, or it
may be undefined if the driver doesn't have access to the information.
.Sp
See also the Catalog Methods entry elsewhere in this document and the Standards Reference Information entry elsewhere in this document.
.Ip "\f(CW\*(C`tables\*(C'\fR \fI\s-1NEW\s0\fR" 4
.IX Item "tables NEW"
\&\fBWarning:\fR This method is experimental and may change.
.Sp
.Vb 2
\&  @names = $dbh->tables( $catalog, $schema, $table, $type );
\&  @names = $dbh->tables;        # deprecated
.Ve
Simple interface to \fItable_info()\fR. Returns a list of matching
table names, possibly including a catalog/schema prefix.
.Sp
See the table_info entry elsewhere in this document for a description of the parameters.
.Sp
If \f(CW\*(C`$dbh\-\*(C'\fR>\f(CW\*(C`get_info(29)\*(C'\fR returns true (29 is \s-1SQL_IDENTIFIER_QUOTE_CHAR\s0)
then the table names are constructed and quoted by the quote_identifier entry elsewhere in this document
to ensure they are usable even if they contain whitespace or reserved
words etc.
.Ip "\f(CW\*(C`type_info_all\*(C'\fR" 4
.IX Item "type_info_all"
\&\fBWarning:\fR This method is experimental and may change.
.Sp
.Vb 1
\&  $type_info_all = $dbh->type_info_all;
.Ve
Returns a reference to an array which holds information about each data
type variant supported by the database and driver. The array and its
contents should be treated as read-only.
.Sp
The first item is a reference to an 'index' hash of \f(CW\*(C`Name =\*(C'\fR> \f(CW\*(C`Index\*(C'\fR pairs.
The items following that are references to arrays, one per supported data
type variant. The leading index hash defines the names and order of the
fields within the arrays that follow it.
For example:
.Sp
.Vb 25
\&  $type_info_all = [
\&    {   TYPE_NAME         => 0,
\&        DATA_TYPE         => 1,
\&        COLUMN_SIZE       => 2,     # was PRECISION originally
\&        LITERAL_PREFIX    => 3,
\&        LITERAL_SUFFIX    => 4,
\&        CREATE_PARAMS     => 5,
\&        NULLABLE          => 6,
\&        CASE_SENSITIVE    => 7,
\&        SEARCHABLE        => 8,
\&        UNSIGNED_ATTRIBUTE=> 9,
\&        FIXED_PREC_SCALE  => 10,    # was MONEY originally
\&        AUTO_UNIQUE_VALUE => 11,    # was AUTO_INCREMENT originally
\&        LOCAL_TYPE_NAME   => 12,
\&        MINIMUM_SCALE     => 13,
\&        MAXIMUM_SCALE     => 14,
\&        NUM_PREC_RADIX    => 15,
\&    },
\&    [ 'VARCHAR', SQL_VARCHAR,
\&        undef, "'","'", undef,0, 1,1,0,0,0,undef,1,255, undef
\&    ],
\&    [ 'INTEGER', SQL_INTEGER,
\&        undef,  "", "", undef,0, 0,1,0,0,0,undef,0,  0, 10
\&    ],
\&  ];
.Ve
Note that more than one row may have the same value in the \f(CW\*(C`DATA_TYPE\*(C'\fR
field if there are different ways to spell the type name and/or there
are variants of the type with different attributes (e.g., with and
without \f(CW\*(C`AUTO_UNIQUE_VALUE\*(C'\fR set, with and without \f(CW\*(C`UNSIGNED_ATTRIBUTE\*(C'\fR, etc).
.Sp
The rows are ordered by \f(CW\*(C`DATA_TYPE\*(C'\fR first and then by how closely each
type maps to the corresponding \s-1ODBC\s0 \s-1SQL\s0 data type, closest first.
.Sp
The meaning of the fields is described in the documentation for
the the type_info entry elsewhere in this document method. The index values shown above (e.g.,
\&\f(CW\*(C`NULLABLE =\*(C'\fR> \f(CW\*(C`6\*(C'\fR) are for illustration only. Drivers may define the
fields with a different order.
.Sp
This method is not normally used directly. The the type_info entry elsewhere in this document method
provides a more useful interface to the data.
.Sp
Even though an 'index' hash is provided, all the field names in the
index hash defined above will always have the index values defined
above.  This is defined behaviour so that you don't need to rely on the
index hash, which is handy because the lettercase of the keys is not
defined. It is usually uppercase, as show here, but drivers are free to
return names with any lettercase. Drivers are also free to return extra
driver-specific columns of information \- though it's recommended that
they start at column index 50 to leave room for expansion of the
\&\s-1DBI/ODBC\s0 specification.
.Ip "\f(CW\*(C`type_info\*(C'\fR" 4
.IX Item "type_info"
\&\fBWarning:\fR This method is experimental and may change.
.Sp
.Vb 1
\&  @type_info = $dbh->type_info($data_type);
.Ve
Returns a list of hash references holding information about one or more
variants of \f(CW$data_type\fR. The list is ordered by \f(CW\*(C`DATA_TYPE\*(C'\fR first and
then by how closely each type maps to the corresponding \s-1ODBC\s0 \s-1SQL\s0 data
type, closest first.  If called in a scalar context then only the first
(best) element is returned.
.Sp
If \f(CW$data_type\fR is undefined or \f(CW\*(C`SQL_ALL_TYPES\*(C'\fR, then the list will
contain hashes for all data type variants supported by the database and driver.
.Sp
If \f(CW$data_type\fR is an array reference then \f(CW\*(C`type_info\*(C'\fR returns the
information for the \fIfirst\fR type in the array that has any matches.
.Sp
The keys of the hash follow the same letter case conventions as the
rest of the \s-1DBI\s0 (see the Naming Conventions and Name Space entry elsewhere in this document). The
following items should exist:
.RS 4
.Ip "\s-1TYPE_NAME\s0 (string)" 4
.IX Item "TYPE_NAME (string)"
Data type name for use in \s-1CREATE\s0 \s-1TABLE\s0 statements etc.
.Ip "\s-1DATA_TYPE\s0 (integer)" 4
.IX Item "DATA_TYPE (integer)"
\&\s-1SQL\s0 data type number.
.Ip "\s-1COLUMN_SIZE\s0 (integer)" 4
.IX Item "COLUMN_SIZE (integer)"
For numeric types, this is either the total number of digits (if the
\&\s-1NUM_PREC_RADIX\s0 value is 10) or the total number of bits allowed in the
column (if \s-1NUM_PREC_RADIX\s0 is 2).
.Sp
For string types, this is the maximum size of the string in bytes.
.Sp
For date and interval types, this is the maximum number of characters
needed to display the value.
.Ip "\s-1LITERAL_PREFIX\s0 (string)" 4
.IX Item "LITERAL_PREFIX (string)"
Characters used to prefix a literal. A typical prefix is "\f(CW\*(C`'\*(C'\fR\*(L" for characters,
or possibly \*(R"\f(CW\*(C`0x\*(C'\fR" for binary values passed as hexadecimal.  \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) is
returned for data types for which this is not applicable.
.Ip "\s-1LITERAL_SUFFIX\s0 (string)" 4
.IX Item "LITERAL_SUFFIX (string)"
Characters used to suffix a literal. Typically "\f(CW\*(C`'\*(C'\fR" for characters.
\&\s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) is returned for data types where this is not applicable.
.Ip "\s-1CREATE_PARAMS\s0 (string)" 4
.IX Item "CREATE_PARAMS (string)"
Parameter names for data type definition. For example, \f(CW\*(C`CREATE_PARAMS\*(C'\fR for a
\&\f(CW\*(C`DECIMAL\*(C'\fR would be "\f(CW\*(C`precision,scale\*(C'\fR" if the \s-1DECIMAL\s0 type should be
declared as \f(CW\*(C`DECIMAL(\*(C'\fR\fIprecision,scale\fR\f(CW\*(C`)\*(C'\fR where \fIprecision\fR and \fIscale\fR
are integer values.  For a \f(CW\*(C`VARCHAR\*(C'\fR it would be "\f(CW\*(C`max length\*(C'\fR".
\&\s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) is returned for data types for which this is not applicable.
.Ip "\s-1NULLABLE\s0 (integer)" 4
.IX Item "NULLABLE (integer)"
Indicates whether the data type accepts a \s-1NULL\s0 value:
\&\f(CW\*(C`0\*(C'\fR or an empty string = no, \f(CW\*(C`1\*(C'\fR = yes, \f(CW\*(C`2\*(C'\fR = unknown.
.Ip "\s-1CASE_SENSITIVE\s0 (boolean)" 4
.IX Item "CASE_SENSITIVE (boolean)"
Indicates whether the data type is case sensitive in collations and
comparisons.
.Ip "\s-1SEARCHABLE\s0 (integer)" 4
.IX Item "SEARCHABLE (integer)"
Indicates how the data type can be used in a \s-1WHERE\s0 clause, as
follows:
.Sp
.Vb 4
\&  0 - Cannot be used in a WHERE clause
\&  1 - Only with a LIKE predicate
\&  2 - All comparison operators except LIKE
\&  3 - Can be used in a WHERE clause with any comparison operator
.Ve
.Ip "\s-1UNSIGNED_ATTRIBUTE\s0 (boolean)" 4
.IX Item "UNSIGNED_ATTRIBUTE (boolean)"
Indicates whether the data type is unsigned.  \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) is returned
for data types for which this is not applicable.
.Ip "\s-1FIXED_PREC_SCALE\s0 (boolean)" 4
.IX Item "FIXED_PREC_SCALE (boolean)"
Indicates whether the data type always has the same precision and scale
(such as a money type).  \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) is returned for data types
for which
this is not applicable.
.Ip "\s-1AUTO_UNIQUE_VALUE\s0 (boolean)" 4
.IX Item "AUTO_UNIQUE_VALUE (boolean)"
Indicates whether a column of this data type is automatically set to a
unique value whenever a new row is inserted.  \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) is returned
for data types for which this is not applicable.
.Ip "\s-1LOCAL_TYPE_NAME\s0 (string)" 4
.IX Item "LOCAL_TYPE_NAME (string)"
Localized version of the \f(CW\*(C`TYPE_NAME\*(C'\fR for use in dialog with users.
\&\s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) is returned if a localized name is not available (in which
case \f(CW\*(C`TYPE_NAME\*(C'\fR should be used).
.Ip "\s-1MINIMUM_SCALE\s0 (integer)" 4
.IX Item "MINIMUM_SCALE (integer)"
The minimum scale of the data type. If a data type has a fixed scale,
then \f(CW\*(C`MAXIMUM_SCALE\*(C'\fR holds the same value.  \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) is returned for
data types for which this is not applicable.
.Ip "\s-1MAXIMUM_SCALE\s0 (integer)" 4
.IX Item "MAXIMUM_SCALE (integer)"
The maximum scale of the data type. If a data type has a fixed scale,
then \f(CW\*(C`MINIMUM_SCALE\*(C'\fR holds the same value.  \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) is returned for
data types for which this is not applicable.
.Ip "\s-1SQL_DATA_TYPE\s0 (integer)" 4
.IX Item "SQL_DATA_TYPE (integer)"
This column is the same as the \f(CW\*(C`DATA_TYPE\*(C'\fR column, except for interval
and datetime data types.  For interval and datetime data types, the
\&\f(CW\*(C`SQL_DATA_TYPE\*(C'\fR field will return \f(CW\*(C`SQL_INTERVAL\*(C'\fR or \f(CW\*(C`SQL_DATETIME\*(C'\fR, and the
\&\f(CW\*(C`SQL_DATETIME_SUB\*(C'\fR field below will return the subcode for the specific
interval or datetime data type. If this field is \s-1NULL\s0, then the driver
does not support or report on interval or date subtypes.
.Ip "\s-1SQL_DATETIME_SUB\s0 (integer)" 4
.IX Item "SQL_DATETIME_SUB (integer)"
For interval or datetime data types, where the \f(CW\*(C`SQL_DATA_TYPE\*(C'\fR field
above is \f(CW\*(C`SQL_INTERVAL\*(C'\fR or \f(CW\*(C`SQL_DATETIME\*(C'\fR, this field will hold the subcode
for the specific interval or datetime data type. Otherwise it will be
\&\s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR).
.Ip "\s-1NUM_PREC_RADIX\s0 (integer)" 4
.IX Item "NUM_PREC_RADIX (integer)"
The radix value of the data type. For approximate numeric types,
\&\f(CW\*(C`NUM_PREC_RADIX\*(C'\fR
contains the value 2 and \f(CW\*(C`COLUMN_SIZE\*(C'\fR holds the number of bits. For
exact numeric types, \f(CW\*(C`NUM_PREC_RADIX\*(C'\fR contains the value 10 and \f(CW\*(C`COLUMN_SIZE\*(C'\fR holds
the number of decimal digits. \s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) is returned either for data types
for which this is not applicable or if the driver cannot report this information.
.Ip "\s-1INTERVAL_PRECISION\s0 (integer)" 4
.IX Item "INTERVAL_PRECISION (integer)"
The interval leading precision for interval types. \s-1NULL\s0 is returned
either for data types for which this is not applicable or if the driver
cannot report this information.
.RE
.RS 4
.Sp
For example, to find the type name for the fields in a select statement
you can do:
.Sp
.Vb 1
\&  @names = map { scalar $dbh->type_info($_)->{TYPE_NAME} } @{ $sth->{TYPE} }
.Ve
Since \s-1DBI\s0 and \s-1ODBC\s0 drivers vary in how they map their types into the
\&\s-1ISO\s0 standard types you may need to search for more than one type.
Here's an example looking for a usable type to store a date:
.Sp
.Vb 1
\&  $my_date_type = $dbh->type_info( [ SQL_DATE, SQL_TIMESTAMP ] );
.Ve
Similarly, to more reliably find a type to store small integers, you could
use a list starting with \f(CW\*(C`SQL_SMALLINT\*(C'\fR, \f(CW\*(C`SQL_INTEGER\*(C'\fR, \f(CW\*(C`SQL_DECIMAL\*(C'\fR, etc.
.Sp
See also the Standards Reference Information entry elsewhere in this document.
.RE
.Ip "\f(CW\*(C`quote\*(C'\fR" 4
.IX Item "quote"
.Vb 2
\&  $sql = $dbh->quote($value);
\&  $sql = $dbh->quote($value, $data_type);
.Ve
Quote a string literal for use as a literal value in an \s-1SQL\s0 statement,
by escaping any special characters (such as quotation marks)
contained within the string and adding the required type of outer
quotation marks.
.Sp
.Vb 2
\&  $sql = sprintf "SELECT foo FROM bar WHERE baz = %s",
\&                $dbh->quote("Don't");
.Ve
For most database types, quote would return \f(CW\*(C`'Don''t'\*(C'\fR (including the
outer quotation marks).
.Sp
An undefined \f(CW\*(C`$value\*(C'\fR value will be returned as the string \f(CW\*(C`NULL\*(C'\fR (without
single quotation marks) to match how NULLs are represented in \s-1SQL\s0.
.Sp
If \f(CW\*(C`$data_type\*(C'\fR is supplied, it is used to try to determine the required
quoting behavior by using the information returned by the type_info entry elsewhere in this document.
As a special case, the standard numeric types are optimized to return
\&\f(CW\*(C`$value\*(C'\fR without calling \f(CW\*(C`type_info\*(C'\fR.
.Sp
Quote will probably \fInot\fR be able to deal with all possible input
(such as binary data or data containing newlines), and is not related in
any way with escaping or quoting shell meta-characters. There is no
need to quote values being used with the Placeholders and Bind Values entry elsewhere in this document.
.Ip "\f(CW\*(C`quote_identifier\*(C'\fR" 4
.IX Item "quote_identifier"
.Vb 2
\&  $sql = $dbh->quote_identifier( $name );
\&  $sql = $dbh->quote_identifier( $name1, $name2, $name3, \e%attr );
.Ve
Quote an identifier (table name etc.) for use in an \s-1SQL\s0 statement,
by escaping any special characters (such as double quotation marks)
it contains and adding the required type of outer quotation marks.
.Sp
Undefined names are ignored and the remainder are quoted and then
joined together, typically with a dot (\f(CW\*(C`.\*(C'\fR) character. For example:
.Sp
.Vb 1
\&  $id = $dbh->quote_identifier( undef, 'Her schema', 'My table' );
.Ve
would, for most database types, return \f(CW\*(C`"Her schema"."My table"\*(C'\fR
(including all the double quotation marks).
.Sp
If three names are supplied then the first is assumed to be a catalog
name and special rules may be applied based on what the get_info entry elsewhere in this document
returns for \s-1SQL_CATALOG_NAME_SEPARATOR\s0 (41) and \s-1SQL_CATALOG_LOCATION\s0 (114).
For example, for Oracle:
.Sp
.Vb 1
\&  $id = $dbh->quote_identifier( 'link', 'schema', 'table' );
.Ve
would return \f(CW\*(C`"schema"."table"@"link"\*(C'\fR.
.Sh "Database Handle Attributes"
.IX Subsection "Database Handle Attributes"
This section describes attributes specific to database handles.
.PP
Changes to these database handle attributes do not affect any other
existing or future database handles.
.PP
Attempting to set or get the value of an unknown attribute is fatal,
except for private driver-specific attributes (which all have names
starting with a lowercase letter).
.PP
Example:
.PP
.Vb 2
\&  $h->{AutoCommit} = ...;       # set/write
\&  ... = $h->{AutoCommit};       # get/read
.Ve
.Ip "\f(CW\*(C`AutoCommit\*(C'\fR  (boolean)" 4
.IX Item "AutoCommit  (boolean)"
If true, then database changes cannot be rolled-back (undone).  If false,
then database changes automatically occur within a \*(L"transaction\*(R", which
must either be committed or rolled back using the \f(CW\*(C`commit\*(C'\fR or \f(CW\*(C`rollback\*(C'\fR
methods.
.Sp
Drivers should always default to \f(CW\*(C`AutoCommit\*(C'\fR mode (an unfortunate
choice largely forced on the \s-1DBI\s0 by \s-1ODBC\s0 and \s-1JDBC\s0 conventions.)
.Sp
Attempting to set \f(CW\*(C`AutoCommit\*(C'\fR to an unsupported value is a fatal error.
This is an important feature of the \s-1DBI\s0. Applications that need
full transaction behavior can set \f(CW\*(C`$dbh\-\*(C'\fR>\f(CW\*(C`{AutoCommit} = 0\*(C'\fR (or
set \f(CW\*(C`AutoCommit\*(C'\fR to 0 via the connect entry elsewhere in this document)
without having to check that the value was assigned successfully.
.Sp
For the purposes of this description, we can divide databases into three
categories:
.Sp
.Vb 3
\&  Databases which don't support transactions at all.
\&  Databases in which a transaction is always active.
\&  Databases in which a transaction must be explicitly started (C<'BEGIN WORK'>).
.Ve
\&\fB* Databases which don't support transactions at all\fR
.Sp
For these databases, attempting to turn \f(CW\*(C`AutoCommit\*(C'\fR off is a fatal error.
\&\f(CW\*(C`commit\*(C'\fR and \f(CW\*(C`rollback\*(C'\fR both issue warnings about being ineffective while
\&\f(CW\*(C`AutoCommit\*(C'\fR is in effect.
.Sp
\&\fB* Databases in which a transaction is always active\fR
.Sp
These are typically mainstream commercial relational databases with
\&\*(L"\s-1ANSI\s0 standard\*(R" transaction behavior.
If \f(CW\*(C`AutoCommit\*(C'\fR is off, then changes to the database won't have any
lasting effect unless the commit entry elsewhere in this document is called (but see also
the disconnect entry elsewhere in this document). If the rollback entry elsewhere in this document is called then any changes since the
last commit are undone.
.Sp
If \f(CW\*(C`AutoCommit\*(C'\fR is on, then the effect is the same as if the \s-1DBI\s0
called \f(CW\*(C`commit\*(C'\fR automatically after every successful database
operation. So calling \f(CW\*(C`commit\*(C'\fR or \f(CW\*(C`rollback\*(C'\fR explicitly while
\&\f(CW\*(C`AutoCommit\*(C'\fR is on would be ineffective because the changes would
have already been commited.
.Sp
Changing \f(CW\*(C`AutoCommit\*(C'\fR from off to on will trigger a the commit entry elsewhere in this document.
.Sp
For databases which don't support a specific auto-commit mode, the
driver has to commit each statement automatically using an explicit
\&\f(CW\*(C`COMMIT\*(C'\fR after it completes successfully (and roll it back using an
explicit \f(CW\*(C`ROLLBACK\*(C'\fR if it fails).  The error information reported to the
application will correspond to the statement which was executed, unless
it succeeded and the commit or rollback failed.
.Sp
\&\fB* Databases in which a transaction must be explicitly started\fR
.Sp
For these databases, the intention is to have them act like databases in
which a transaction is always active (as described above).
.Sp
To do this, the driver will automatically begin an explicit transaction
when \f(CW\*(C`AutoCommit\*(C'\fR is turned off, or after a the commit entry elsewhere in this document or
the rollback entry elsewhere in this document (or when the application issues the next database
operation after one of those events).
.Sp
In this way, the application does not have to treat these databases
as a special case.
.Sp
See the commit, disconnect, and Transactions entries elsewhere in this document for other important
notes about transactions.
.Ip "\f(CW\*(C`Driver\*(C'\fR  (handle)" 4
.IX Item "Driver  (handle)"
Holds the handle of the parent driver. The only recommended use for this
is to find the name of the driver using:
.Sp
.Vb 1
\&  $dbh->{Driver}->{Name}
.Ve
.Ip "\f(CW\*(C`Name\*(C'\fR  (string)" 4
.IX Item "Name  (string)"
Holds the \*(L"name\*(R" of the database. Usually (and recommended to be) the
same as the "\f(CW\*(C`dbi:DriverName:...\*(C'\fR\*(L" string used to connect to the database,
but with the leading \*(R"\f(CW\*(C`dbi:DriverName:\*(C'\fR" removed.
.Ip "\f(CW\*(C`Statement\*(C'\fR  (string, read-only)" 4
.IX Item "Statement  (string, read-only)"
Returns the statement string passed to the most recent the prepare entry elsewhere in this document method
called in this database handle, even if that method failed. This is especially
useful where \f(CW\*(C`RaiseError\*(C'\fR is enabled and the exception handler checks $@
and sees that a 'prepare' method call failed.
.Ip "\f(CW\*(C`RowCacheSize\*(C'\fR  (integer)" 4
.IX Item "RowCacheSize  (integer)"
A hint to the driver indicating the size of the local row cache that the
application would like the driver to use for future \f(CW\*(C`SELECT\*(C'\fR statements.
If a row cache is not implemented, then setting \f(CW\*(C`RowCacheSize\*(C'\fR is ignored
and getting the value returns \f(CW\*(C`undef\*(C'\fR.
.Sp
Some \f(CW\*(C`RowCacheSize\*(C'\fR values have special meaning, as follows:
.Sp
.Vb 4
\&  0 - Automatically determine a reasonable cache size for each C<SELECT>
\&  1 - Disable the local row cache
\& >1 - Cache this many rows
\& <0 - Cache as many rows that will fit into this much memory for each C<SELECT>.
.Ve
Note that large cache sizes may require a very large amount of memory
(\fIcached rows * maximum size of row\fR). Also, a large cache will cause
a longer delay not only for the first fetch, but also whenever the
cache needs refilling.
.Sp
See also the the RowsInCache entry elsewhere in this document statement handle attribute.
.SH "DBI STATEMENT HANDLE OBJECTS"
.IX Header "DBI STATEMENT HANDLE OBJECTS"
This section lists the methods and attributes associated with \s-1DBI\s0
statement handles.
.Sh "Statement Handle Methods"
.IX Subsection "Statement Handle Methods"
The \s-1DBI\s0 defines the following methods for use on \s-1DBI\s0 statement handles:
.Ip "\f(CW\*(C`bind_param\*(C'\fR" 4
.IX Item "bind_param"
.Vb 3
\&  $rc = $sth->bind_param($p_num, $bind_value)  or die $sth->errstr;
\&  $rv = $sth->bind_param($p_num, $bind_value, \e%attr)     or ...
\&  $rv = $sth->bind_param($p_num, $bind_value, $bind_type) or ...
.Ve
The \f(CW\*(C`bind_param\*(C'\fR method can be used to bind a value
with a placeholder embedded in the prepared statement. Placeholders
are indicated with question mark character (\f(CW\*(C`?\*(C'\fR). For example:
.Sp
.Vb 5
\&  $dbh->{RaiseError} = 1;        # save having to check each method call
\&  $sth = $dbh->prepare("SELECT name, age FROM people WHERE name LIKE ?");
\&  $sth->bind_param(1, "John%");  # placeholders are numbered from 1
\&  $sth->execute;
\&  DBI::dump_results($sth);
.Ve
Note that the \f(CW\*(C`?\*(C'\fR is not enclosed in quotation marks, even when the
placeholder represents a string.  Some drivers also allow placeholders
like \f(CW\*(C`:\*(C'\fR\fIname\fR and \f(CW\*(C`:\*(C'\fR\fIn\fR (e.g., \f(CW\*(C`:1\*(C'\fR, \f(CW\*(C`:2\*(C'\fR, and so on)
in addition to \f(CW\*(C`?\*(C'\fR, but their use
is not portable.  Undefined bind values or \f(CW\*(C`undef\*(C'\fR can be used to
indicate null values.
.Sp
Some drivers do not support placeholders.
.Sp
With most drivers, placeholders can't be used for any element of a
statement that would prevent the database server from validating the
statement and creating a query execution plan for it. For example:
.Sp
.Vb 2
\&  "SELECT name, age FROM ?"         # wrong (will probably fail)
\&  "SELECT name, ?   FROM people"    # wrong (but may not 'fail')
.Ve
Also, placeholders can only represent single scalar values.
For example, the following
statement won't work as expected for more than one value:
.Sp
.Vb 1
\&  "SELECT name, age FROM people WHERE name IN (?)"    # wrong
.Ve
\&\fBData Types for Placeholders\fR
.Sp
The \f(CW\*(C`\e%attr\*(C'\fR parameter can be used to hint at the data type the
placeholder should have. Typically, the driver is only interested in
knowing if the placeholder should be bound as a number or a string.
.Sp
.Vb 1
\&  $sth->bind_param(1, $value, { TYPE => SQL_INTEGER });
.Ve
As a short-cut for this common case, the data type can be passed
directly, in place of the \f(CW\*(C`\e%attr\*(C'\fR hash reference. This example is
equivalent to the one above:
.Sp
.Vb 1
\&  $sth->bind_param(1, $value, SQL_INTEGER);
.Ve
The \f(CW\*(C`TYPE\*(C'\fR value indicates the standard (non-driver-specific) type for
this parameter. To specify the driver-specific type, the driver may
support a driver-specific attribute, such as \f(CW\*(C`{ ora_type =\*(C'\fR>\f(CW\*(C` 97 }\*(C'\fR.  The
data type for a placeholder cannot be changed after the first
\&\f(CW\*(C`bind_param\*(C'\fR call. However, it can be left unspecified, in which case it
defaults to the previous value.
.Sp
The \s-1SQL_INTEGER\s0 and other related constants can be imported using
.Sp
.Vb 1
\&  use DBI qw(:sql_types);
.Ve
See the DBI Constants entry elsewhere in this document for more information.
.Sp
Perl only has string and number scalar data types. All database types
that aren't numbers are bound as strings and must be in a format the
database will understand.
.Sp
As an alternative to specifying the data type in the \f(CW\*(C`bind_param\*(C'\fR call,
you can let the driver pass the value as the default type (\f(CW\*(C`VARCHAR\*(C'\fR).
You can then use an \s-1SQL\s0 function to convert the type within the statement.
For example:
.Sp
.Vb 1
\&  INSERT INTO price(code, price) VALUES (?, CONVERT(MONEY,?))
.Ve
The \f(CW\*(C`CONVERT\*(C'\fR function used here is just an example. The actual function
and syntax will vary between different databases and is non-portable.
.Sp
See also the Placeholders and Bind Values entry elsewhere in this document for more information.
.Ip "\f(CW\*(C`bind_param_inout\*(C'\fR" 4
.IX Item "bind_param_inout"
.Vb 3
\&  $rc = $sth->bind_param_inout($p_num, \e$bind_value, $max_len)  or die $sth->errstr;
\&  $rv = $sth->bind_param_inout($p_num, \e$bind_value, $max_len, \e%attr)     or ...
\&  $rv = $sth->bind_param_inout($p_num, \e$bind_value, $max_len, $bind_type) or ...
.Ve
This method acts like the bind_param entry elsewhere in this document, but also enables values to be
updated by the statement. The statement is typically
a call to a stored procedure. The \f(CW\*(C`$bind_value\*(C'\fR must be passed as a
reference to the actual value to be used.
.Sp
Note that unlike the bind_param entry elsewhere in this document, the \f(CW\*(C`$bind_value\*(C'\fR variable is not
read when \f(CW\*(C`bind_param_inout\*(C'\fR is called. Instead, the value in the
variable is read at the time the execute entry elsewhere in this document is called.
.Sp
The additional \f(CW\*(C`$max_len\*(C'\fR parameter specifies the minimum amount of
memory to allocate to \f(CW\*(C`$bind_value\*(C'\fR for the new value. If the value
returned from the database is too
big to fit, then the execution should fail. If unsure what value to use,
pick a generous length, i.e., a length larger than the longest value that would ever be
returned.  The only cost of using a larger value than needed is wasted memory.
.Sp
It is expected that few drivers will support this method. The only
driver currently known to do so is \s-1DBD:\s0:Oracle (\s-1DBD::ODBC\s0 may support
it in a future release). Therefore it should not be used for database
independent applications.
.Sp
Undefined values or \f(CW\*(C`undef\*(C'\fR are used to indicate null values.
See also the Placeholders and Bind Values entry elsewhere in this document for more information.
.Ip "\f(CW\*(C`bind_param_array\*(C'\fR" 4
.IX Item "bind_param_array"
.Vb 3
\&  $rc = $sth->bind_param_array($p_num, $array_ref_or_value)
\&  $rc = $sth->bind_param_array($p_num, $array_ref_or_value, \e%attr)
\&  $rc = $sth->bind_param_array($p_num, $array_ref_or_value, $bind_type)
.Ve
The \f(CW\*(C`bind_param_array\*(C'\fR method is used to bind an array of values
to a placeholder embedded in the prepared statement which is to be executed
with the execute_array entry elsewhere in this document. For example:
.Sp
.Vb 6
\&  $dbh->{RaiseError} = 1;        # save having to check each method call
\&  $sth = $dbh->prepare("INSERT INTO people(first_name, last_name) VALUES(?, ?)");
\&  $sth->bind_param_array(1, [ 'John', 'Mary', 'Tim' ]);
\&  $sth->bind_param_array(2, [ 'Booth', 'Todd', 'Robinson' ]);
\&  my @tuple_status;
\&  $sth->execute_array(\e@tuple_status);
.Ve
The \f(CW\*(C`%attr\*(C'\fR argument is the same as defined for the bind_param entry elsewhere in this document.
Refer to the bind_param entry elsewhere in this document for general details on using placeholders.
.Sp
Each array bound to the statement must have the same number of
elements.  Some drivers may define a method attribute to relax this
safety check.
.Sp
Scalar values, including \f(CW\*(C`undef\*(C'\fR, may also be bound by
\&\f(CW\*(C`bind_param_array\*(C'\fR. In which case the same value will be used for each
the execute entry elsewhere in this document call. Driver-specific implementations may behave
differently, e.g., when binding to a stored procedure call, some
databases permit mixing scalars and arrays as arguments.
.Sp
The default implementation provided by \s-1DBI\s0 (for drivers that have
not implemented array binding) is to iteratively the execute entry elsewhere in this document for
each parameter tuple provided in the bound arrays.  Drivers may
provide more optimized implementations using whatever bulk operation
support the database \s-1API\s0 provides. The default driver behaviour should 
match the default \s-1DBI\s0 behaviour, but always consult your driver
documentation as there may be driver specific issues to consider.
.Sp
Note that the default implementation currently only supports non-data
returning statements. Also, \f(CW\*(C`bind_param_array\*(C'\fR and the bind_param entry elsewhere in this document
cannot be mixed in the same statement execution, and \f(CW\*(C`bind_param_array\*(C'\fR
must be used with the execute_array entry elsewhere in this document; using \f(CW\*(C`bind_param_array\*(C'\fR will
have no effect for the execute entry elsewhere in this document.
.Ip "\f(CW\*(C`execute\*(C'\fR" 4
.IX Item "execute"
.Vb 2
\&  $rv = $sth->execute                or die $sth->errstr;
\&  $rv = $sth->execute(@bind_values)  or die $sth->errstr;
.Ve
Perform whatever processing is necessary to execute the prepared
statement.  An \f(CW\*(C`undef\*(C'\fR is returned if an error occurs.  A successful
\&\f(CW\*(C`execute\*(C'\fR always returns true regardless of the number of rows affected,
even if it's zero (see below). It is always important to check the
return status of \f(CW\*(C`execute\*(C'\fR (and most other \s-1DBI\s0 methods) for errors.
.Sp
For a \fInon\fR-\f(CW\*(C`SELECT\*(C'\fR statement, \f(CW\*(C`execute\*(C'\fR returns the number of rows
affected, if known. If no rows were affected, then \f(CW\*(C`execute\*(C'\fR returns
"\f(CW\*(C`0E0\*(C'\fR", which Perl will treat as 0 but will regard as true. Note that it
is \fInot\fR an error for no rows to be affected by a statement. If the
number of rows affected is not known, then \f(CW\*(C`execute\*(C'\fR returns \-1.
.Sp
For \f(CW\*(C`SELECT\*(C'\fR statements, execute simply \*(L"starts\*(R" the query within the
database engine. Use one of the fetch methods to retreive the data after
calling \f(CW\*(C`execute\*(C'\fR.  The \f(CW\*(C`execute\*(C'\fR method does \fInot\fR return the number of
rows that will be returned by the query (because most databases can't
tell in advance), it simply returns a true value.
.Sp
If any arguments are given, then \f(CW\*(C`execute\*(C'\fR will effectively call
the bind_param entry elsewhere in this document for each value before executing the statement.
Values bound in this way are usually treated as \f(CW\*(C`SQL_VARCHAR\*(C'\fR types
unless the driver can determine the correct type (which is rare), or
unless
\&\f(CW\*(C`bind_param\*(C'\fR (or \f(CW\*(C`bind_param_inout\*(C'\fR) has already been used to specify the
type.
.Ip "\f(CW\*(C`execute_array\*(C'\fR" 4
.IX Item "execute_array"
.Vb 2
\&  $rv = $sth->execute_array(\e%attr) or die $sth->errstr;
\&  $rv = $sth->execute_array(\e%attr, @bind_values)  or die $sth->errstr;
.Ve
Execute the prepared statement for each parameter tuple provided
either in the \f(CW@bind_values\fR, or by prior calls to the bind_param_array entry elsewhere in this document.
.Sp
An \f(CW\*(C`undef\*(C'\fR is returned if an error occurs.  A successful
\&\f(CW\*(C`execute_array\*(C'\fR always returns true regardless of the number of
rows affected, even if it's zero (see below). It is always important
to check the return status of \f(CW\*(C`execute_array\*(C'\fR (and most other \s-1DBI\s0
methods) for errors.
.Sp
Parameters may be supplied either by prior calls to the bind_param_array entry elsewhere in this document,
or in the \f(CW\*(C`@bind_values\*(C'\fR argument. The values supplied may be either
scalars, or arrayrefs. See the bind_param_array entry elsewhere in this document for details.
.Sp
The supplied \f(CW\*(C`\e%attr\*(C'\fR hashref currently supports only the \f(CW\*(C`ArrayTupleStatus\*(C'\fR
attribute, which should specify an arrayref to receive the status of each
parameter tuple bound to the statement. For parameter tuples which
are successfully executed, the element at the same ordinal position in the 
status array will return the resulting rowcount.
.Sp
If a parameter tuple causes an error, the associated status array
element will be set to an arrayref of [ \f(CW$sth\fR->err, \f(CW$sth\fR->errstr ]
returned by the failed execution.  If \fBany\fR tuple returns an error,
\&\f(CW\*(C`execute_array\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR \fBafter\fR it has executed all
the parameter tuples. In that case, the application should inspect
the status array to determine which parameter tuples failed.
.Sp
If no \f(CW\*(C`ArrayTupleStatus\*(C'\fR is provided, \f(CW\*(C`execute_array\*(C'\fR will return
\&\f(CW\*(C`undef\*(C'\fR on the first occurance of a parameter tuple causing an error.
[\s-1XXX\s0 This may change as it doesn't match the behaviour of drivers
which use bulk operation \s-1API\s0 to ship the data to the server.]
.Sp
If all parameter tuples are successfully executed, \f(CW\*(C`execute_array\*(C'\fR returns 
the sum of the number of rows affected by all the parameter tuples,
if known. If no rows were affected, then \f(CW\*(C`execute\*(C'\fR returns
"\f(CW\*(C`0E0\*(C'\fR", which Perl will treat as 0 but will regard as true. Note that it
is \fInot\fR an error for no rows to be affected by a statement. If the
number of rows affected is not known, then \f(CW\*(C`execute_array\*(C'\fR may return a 
negative number. Applications should not rely on the returned value to
indicate actual total rowcounts, but use the \f(CW\*(C`ArrayTupleStatus\*(C'\fR and explicitly
inspect each returned element of the status array.
.Sp
Support for data returning statements is driver-specific and subject
to change. At present, the default implementation provided by \s-1DBI\s0
only supports non-data returning statements.
.Sp
If any \f(CW\*(C`@bind_values\*(C'\fR are given, then \f(CW\*(C`execute_array\*(C'\fR will effectively call
the bind_param_array entry elsewhere in this document for each value before executing the statement.
Values bound in this way are usually treated as \f(CW\*(C`SQL_VARCHAR\*(C'\fR types
unless the driver can determine the correct type (which is rare), or
unless \f(CW\*(C`bind_param\*(C'\fR, \f(CW\*(C`bind_param_inout\*(C'\fR, \f(CW\*(C`bind_param_array\*(C'\fR, 
or \f(CW\*(C`bind_param_inout_array\*(C'\fR has already been used to specify the type.
.Sp
Transaction semantics using array binding are driver and database specific.
If \f(CW\*(C`AutoCommit\*(C'\fR is on, the default \s-1DBI\s0 implementation will cause each 
parameter tuple to be inidividually committed (or rolled back in the event
of an error). If \f(CW\*(C`AutoCommit\*(C'\fR is off, the application is responsible
for explicitly committing the entire set of bound parameter tuples.
Note that different drivers and databases may have different behaviors
when some parameter tuples cause failures. In some cases, the driver or
database may automatically rollback the effect of all prior parameter 
tuples that succeeded in the transaction; other drivers or databases may 
retain the effect of prior successfully executed parameter tuples. Be
sure to check your driver and database for its specific behavior.
.Sp
Note that, in general, performance will usually be better with \f(CW\*(C`AutoCommit\*(C'\fR
turned off, and using explicit \f(CW\*(C`commit\*(C'\fR after each \f(CW\*(C`execute_array\*(C'\fR
call.
.Ip "\f(CW\*(C`fetchrow_arrayref\*(C'\fR" 4
.IX Item "fetchrow_arrayref"
.Vb 2
\&  $ary_ref = $sth->fetchrow_arrayref;
\&  $ary_ref = $sth->fetch;    # alias
.Ve
Fetches the next row of data and returns a reference to an array
holding the field values.  Null fields are returned as \f(CW\*(C`undef\*(C'\fR
values in the array.
This is the fastest way to fetch data, particularly if used with
\&\f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`bind_columns\*(C'\fR.
.Sp
If there are no more rows or if an error occurs, then \f(CW\*(C`fetchrow_arrayref\*(C'\fR
returns an \f(CW\*(C`undef\*(C'\fR. You should check \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`err\*(C'\fR afterwards (or use the
\&\f(CW\*(C`RaiseError\*(C'\fR attribute) to discover if the \f(CW\*(C`undef\*(C'\fR returned was due to an
error.
.Sp
Note that the same array reference is returned for each fetch, so don't
store the reference and then use it after a later fetch.  Also, the
elements of the array are also reused for each row, so take care if you
want to take a reference to an element. See also the bind_columns entry elsewhere in this document.
.Ip "\f(CW\*(C`fetchrow_array\*(C'\fR" 4
.IX Item "fetchrow_array"
.Vb 1
\& @ary = $sth->fetchrow_array;
.Ve
An alternative to \f(CW\*(C`fetchrow_arrayref\*(C'\fR. Fetches the next row of data
and returns it as a list containing the field values.  Null fields
are returned as \f(CW\*(C`undef\*(C'\fR values in the list.
.Sp
If there are no more rows or if an error occurs, then \f(CW\*(C`fetchrow_array\*(C'\fR
returns an empty list. You should check \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`err\*(C'\fR afterwards (or use
the \f(CW\*(C`RaiseError\*(C'\fR attribute) to discover if the empty list returned was
due to an error.
.Sp
In a scalar context, \f(CW\*(C`fetchrow_array\*(C'\fR returns the value of the first
field. An \f(CW\*(C`undef\*(C'\fR is returned if there are no more rows or if an error
occurred. Since that \f(CW\*(C`undef\*(C'\fR can't be distinguished from an \f(CW\*(C`undef\*(C'\fR returned
because the first field value was \s-1NULL\s0, you should exercise some
caution if you use \f(CW\*(C`fetchrow_array\*(C'\fR in a scalar context.
.Ip "\f(CW\*(C`fetchrow_hashref\*(C'\fR" 4
.IX Item "fetchrow_hashref"
.Vb 2
\& $hash_ref = $sth->fetchrow_hashref;
\& $hash_ref = $sth->fetchrow_hashref($name);
.Ve
An alternative to \f(CW\*(C`fetchrow_arrayref\*(C'\fR. Fetches the next row of data
and returns it as a reference to a hash containing field name and field
value pairs.  Null fields are returned as \f(CW\*(C`undef\*(C'\fR values in the hash.
.Sp
If there are no more rows or if an error occurs, then \f(CW\*(C`fetchrow_hashref\*(C'\fR
returns an \f(CW\*(C`undef\*(C'\fR. You should check \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`err\*(C'\fR afterwards (or use the
\&\f(CW\*(C`RaiseError\*(C'\fR attribute) to discover if the \f(CW\*(C`undef\*(C'\fR returned was due to an
error.
.Sp
The optional \f(CW\*(C`$name\*(C'\fR parameter specifies the name of the statement handle
attribute. For historical reasons it defaults to "\f(CW\*(C`NAME\*(C'\fR\*(L", however using either
\&\*(R"\f(CW\*(C`NAME_lc\*(C'\fR\*(L" or \*(R"\f(CW\*(C`NAME_uc\*(C'\fR" is recomended for portability.
.Sp
The keys of the hash are the same names returned by \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`{$name}\*(C'\fR. If
more than one field has the same name, there will only be one entry in
the returned hash for those fields.
.Sp
Because of the extra work \f(CW\*(C`fetchrow_hashref\*(C'\fR and Perl have to perform, it
is not as efficient as \f(CW\*(C`fetchrow_arrayref\*(C'\fR or \f(CW\*(C`fetchrow_array\*(C'\fR.
.Sp
Currently, a new hash reference is returned for each row.  \fIThis will
change\fR in the future to return the same hash ref each time, so don't
rely on the current behaviour.
.Ip "\f(CW\*(C`fetchall_arrayref\*(C'\fR" 4
.IX Item "fetchall_arrayref"
.Vb 3
\&  $tbl_ary_ref = $sth->fetchall_arrayref;
\&  $tbl_ary_ref = $sth->fetchall_arrayref( $slice );
\&  $tbl_ary_ref = $sth->fetchall_arrayref( $slice, $max_rows  );
.Ve
The \f(CW\*(C`fetchall_arrayref\*(C'\fR method can be used to fetch all the data to be
returned from a prepared and executed statement handle. It returns a
reference to an array that contains one reference per row.
.Sp
If there are no rows to return, \f(CW\*(C`fetchall_arrayref\*(C'\fR returns a reference
to an empty array. If an error occurs, \f(CW\*(C`fetchall_arrayref\*(C'\fR returns the
data fetched thus far, which may be none.  You should check \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`err\*(C'\fR
afterwards (or use the \f(CW\*(C`RaiseError\*(C'\fR attribute) to discover if the data is
complete or was truncated due to an error.
.Sp
If \f(CW$slice\fR is an array reference, \f(CW\*(C`fetchall_arrayref\*(C'\fR uses the fetchrow_arrayref entry elsewhere in this document
to fetch each row as an array ref. If the parameter array is not empty
then it is used as a slice to select individual columns by perl array
index number (starting at 0, unlike column and parameter numbers which
start at 1).
.Sp
With no parameters, or if \f(CW$slice\fR is undefined, \f(CW\*(C`fetchall_arrayref\*(C'\fR
acts as if passed an empty array ref.
.Sp
If \f(CW$slice\fR is a hash reference, \f(CW\*(C`fetchall_arrayref\*(C'\fR uses the fetchrow_hashref entry elsewhere in this document
to fetch each row as a hash reference. If the \f(CW$slice\fR hash is empty then
\&\fIfetchrow_hashref()\fR is simply called in a tight loop and the keys in the hashes
have whatever name lettercase is returned by default from fetchrow_hashref.
(See the FetchHashKeyName entry elsewhere in this document attribute.) If the \f(CW$slice\fR hash is not
empty, then it is used as a slice to select individual columns by
name.  The values of the hash should be set to 1.  The key names
of the returned hashes match the letter case of the names in the
parameter hash, regardless of the the FetchHashKeyName entry elsewhere in this document attribute.
.Sp
For example, to fetch just the first column of every row:
.Sp
.Vb 1
\&  $tbl_ary_ref = $sth->fetchall_arrayref([0]);
.Ve
To fetch the second to last and last column of every row:
.Sp
.Vb 1
\&  $tbl_ary_ref = $sth->fetchall_arrayref([-2,-1]);
.Ve
To fetch all fields of every row as a hash ref:
.Sp
.Vb 1
\&  $tbl_ary_ref = $sth->fetchall_arrayref({});
.Ve
To fetch only the fields called \*(L"foo\*(R" and \*(L"bar\*(R" of every row as a hash ref
(with keys named \*(L"foo\*(R" and \*(L"\s-1BAR\s0\*(R"):
.Sp
.Vb 1
\&  $tbl_ary_ref = $sth->fetchall_arrayref({ foo=>1, BAR=>1 });
.Ve
The first two examples return a reference to an array of array refs.
The third and forth return a reference to an array of hash refs.
.Sp
If \f(CW$max_rows\fR is defined and greater than or equal to zero then it
is used to limit the number of rows fetched before returning.
\&\fIfetchall_arrayref()\fR can then be called again to fetch more rows.
This is especially useful when you need the better performance of
\&\fIfetchall_arrayref()\fR but don't have enough memory to fetch and return
all the rows in one go.
.Ip "\f(CW\*(C`fetchall_hashref\*(C'\fR" 4
.IX Item "fetchall_hashref"
.Vb 1
\&  $hash_ref = $dbh->fetchall_hashref($key_field);
.Ve
The \f(CW\*(C`fetchall_hashref\*(C'\fR method can be used to fetch all the data to be
returned from a prepared and executed statement handle. It returns a
reference to a hash that contains, at most, one entry per row.
.Sp
If there are no rows to return, \f(CW\*(C`fetchall_hashref\*(C'\fR returns a reference
to an empty hash. If an error occurs, \f(CW\*(C`fetchall_hashref\*(C'\fR returns the
data fetched thus far, which may be none.  You should check
\&\f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`err\*(C'\fR afterwards (or use the \f(CW\*(C`RaiseError\*(C'\fR attribute) to
discover if the data is complete or was truncated due to an error.
.Sp
The \f(CW$key_field\fR parameter provides the name of the field that holds the
value to be used for the key for the returned hash.  For example:
.Sp
.Vb 4
\&  $dbh->{FetchHashKeyName} = 'NAME_lc';
\&  $sth = $dbh->prepare("SELECT FOO, BAR, ID, NAME, BAZ FROM TABLE");
\&  $hash_ref = $sth->fetchall_hashref('id');
\&  print "Name for id 42 is $hash_ref->{42}->{name}\en";
.Ve
The \f(CW$key_field\fR parameter can also be specified as an integer column
number (counting from 1).  If \f(CW$key_field\fR doesn't match any column in
the statement, as a name first then as a number, then an error is
returned.
.Sp
This method is normally used only where the key field value for each
row is unique.  If multiple rows are returned with the same value for
the key field then later rows overwrite earlier ones.
.Ip "\f(CW\*(C`finish\*(C'\fR" 4
.IX Item "finish"
.Vb 1
\&  $rc  = $sth->finish;
.Ve
Indicates that no more data will be fetched from this statement handle
before it is either executed again or destroyed.  The \f(CW\*(C`finish\*(C'\fR method
is rarely needed, but can sometimes be helpful in very specific
situations to allow the server to free up resources (such as sort
buffers).
.Sp
When all the data has been fetched from a \f(CW\*(C`SELECT\*(C'\fR statement, the
driver should automatically call \f(CW\*(C`finish\*(C'\fR for you. So you should
\&\fInot\fR normally need to call it explicitly \fIexcept\fR when you know
that you've not fetched all the data from a statement handle.
The most common example is when you only want to fetch one row,
but in that case the \f(CW\*(C`selectrow_*\*(C'\fR methods may be better anyway.
Adding calls to \f(CW\*(C`finish\*(C'\fR after each fetch loop is a common mistake,
don't do it, it can mask genuine problems like uncaught fetch errors.
.Sp
Consider a query like:
.Sp
.Vb 1
\&  SELECT foo FROM table WHERE bar=? ORDER BY foo
.Ve
where you want to select just the first (smallest) \*(L"foo\*(R" value from a
very large table. When executed, the database server will have to use
temporary buffer space to store the sorted rows. If, after executing
the handle and selecting one row, the handle won't be re-executed for
some time and won't be destroyed, the \f(CW\*(C`finish\*(C'\fR method can be used to tell
the server that the buffer space can be freed.
.Sp
Calling \f(CW\*(C`finish\*(C'\fR resets the the Active entry elsewhere in this document attribute for the statement.  It
may also make some statement handle attributes (such as \f(CW\*(C`NAME\*(C'\fR and \f(CW\*(C`TYPE\*(C'\fR)
unavailable if they have not already been accessed (and thus cached).
.Sp
The \f(CW\*(C`finish\*(C'\fR method does not affect the transaction status of the
database connection.  It has nothing to do with transactions. It's mostly an
internal \*(L"housekeeping\*(R" method that is rarely needed.
See also the disconnect entry elsewhere in this document and the the Active entry elsewhere in this document attribute.
.Sp
The \f(CW\*(C`finish\*(C'\fR method should have been called \f(CW\*(C`cancel_select\*(C'\fR.
.Ip "\f(CW\*(C`rows\*(C'\fR" 4
.IX Item "rows"
.Vb 1
\&  $rv = $sth->rows;
.Ve
Returns the number of rows affected by the last row affecting command,
or \-1 if the number of rows is not known or not available.
.Sp
Generally, you can only rely on a row count after a \fInon\fR-\f(CW\*(C`SELECT\*(C'\fR
\&\f(CW\*(C`execute\*(C'\fR (for some specific operations like \f(CW\*(C`UPDATE\*(C'\fR and \f(CW\*(C`DELETE\*(C'\fR), or
after fetching all the rows of a \f(CW\*(C`SELECT\*(C'\fR statement.
.Sp
For \f(CW\*(C`SELECT\*(C'\fR statements, it is generally not possible to know how many
rows will be returned except by fetching them all.  Some drivers will
return the number of rows the application has fetched so far, but
others may return \-1 until all rows have been fetched.  So use of the
\&\f(CW\*(C`rows\*(C'\fR method or \f(CW\*(C`$DBI::rows\*(C'\fR with \f(CW\*(C`SELECT\*(C'\fR statements is not
recommended.
.Sp
One alternative method to get a row count for a \f(CW\*(C`SELECT\*(C'\fR is to execute a
\&\*(L"\s-1SELECT\s0 \fICOUNT\fR\|(*) \s-1FROM\s0 ...\*(R" \s-1SQL\s0 statement with the same \*(L"...\*(R" as your
query and then fetch the row count from that.
.Ip "\f(CW\*(C`bind_col\*(C'\fR" 4
.IX Item "bind_col"
.Vb 1
\&  $rc = $sth->bind_col($column_number, \e$var_to_bind);
.Ve
Binds an output column (field) of a \f(CW\*(C`SELECT\*(C'\fR statement to a Perl variable.
See \f(CW\*(C`bind_columns\*(C'\fR below for an example.  Note that column numbers count
up from 1.
.Sp
Whenever a row is fetched from the database, the corresponding Perl
variable is automatically updated. There is no need to fetch and assign
the values manually.  The binding is performed at a very low level
using Perl aliasing so there is no extra copying taking place.  This
makes using bound variables very efficient.
.Sp
For maximum portability between drivers, \f(CW\*(C`bind_col\*(C'\fR should be called after
\&\f(CW\*(C`execute\*(C'\fR. This restriction may be removed in a later version of the \s-1DBI\s0.
.Sp
You do not need to bind output columns in order to fetch data, but it
can be useful for some applications which need either maximum performance
or greater clarity of code.  The the bind_param entry elsewhere in this document method
performs a similar but opposite function for input variables.
.Ip "\f(CW\*(C`bind_columns\*(C'\fR" 4
.IX Item "bind_columns"
.Vb 1
\&  $rc = $sth->bind_columns(@list_of_refs_to_vars_to_bind);
.Ve
Calls the bind_col entry elsewhere in this document for each column of the \f(CW\*(C`SELECT\*(C'\fR statement.
The \f(CW\*(C`bind_columns\*(C'\fR method will die if the number of references does not
match the number of fields.
.Sp
For maximum portability between drivers, \f(CW\*(C`bind_columns\*(C'\fR should be called
after \f(CW\*(C`execute\*(C'\fR.
.Sp
For example:
.Sp
.Vb 4
\&  $dbh->{RaiseError} = 1; # do this, or check every call for errors
\&  $sth = $dbh->prepare(q{ SELECT region, sales FROM sales_by_region });
\&  $sth->execute;
\&  my ($region, $sales);
.Ve
.Vb 2
\&  # Bind Perl variables to columns:
\&  $rv = $sth->bind_columns(\e$region, \e$sales);
.Ve
.Vb 2
\&  # you can also use Perl's \e(...) syntax (see perlref docs):
\&  #     $sth->bind_columns(\e($region, $sales));
.Ve
.Vb 4
\&  # Column binding is the most efficient way to fetch data
\&  while ($sth->fetch) {
\&      print "$region: $sales\en";
\&  }
.Ve
For compatibility with old scripts, the first parameter will be
ignored if it is \f(CW\*(C`undef\*(C'\fR or a hash reference.
.Sp
Here's a more fancy example that binds columns to the values \fIinside\fR
a hash (thanks to H.Merijn Brand):
.Sp
.Vb 6
\&  $sth->execute;
\&  my %row;
\&  $sth->bind_columns( \e( @row{ @{$sth->{NAME_lc} } } ));
\&  while ($sth->fetch) {
\&      print "$row{region}: $row{sales}\en";
\&  }
.Ve
.Ip "\f(CW\*(C`dump_results\*(C'\fR" 4
.IX Item "dump_results"
.Vb 1
\&  $rows = $sth->dump_results($maxlen, $lsep, $fsep, $fh);
.Ve
Fetches all the rows from \f(CW\*(C`$sth\*(C'\fR, calls \f(CW\*(C`DBI::neat_list\*(C'\fR for each row, and
prints the results to \f(CW\*(C`$fh\*(C'\fR (defaults to \f(CW\*(C`STDOUT\*(C'\fR) separated by \f(CW\*(C`$lsep\*(C'\fR
(default \f(CW\*(C`"\en"\*(C'\fR). \f(CW\*(C`$fsep\*(C'\fR defaults to \f(CW\*(C`", "\*(C'\fR and \f(CW\*(C`$maxlen\*(C'\fR defaults to 35.
.Sp
This method is designed as a handy utility for prototyping and
testing queries. Since it uses the neat_list entry elsewhere in this document to
format and edit the string for reading by humans, it is not recomended
for data transfer applications.
.Sh "Statement Handle Attributes"
.IX Subsection "Statement Handle Attributes"
This section describes attributes specific to statement handles. Most
of these attributes are read-only.
.PP
Changes to these statement handle attributes do not affect any other
existing or future statement handles.
.PP
Attempting to set or get the value of an unknown attribute is fatal,
except for private driver specific attributes (which all have names
starting with a lowercase letter).
.PP
Example:
.PP
.Vb 1
\&  ... = $h->{NUM_OF_FIELDS};    # get/read
.Ve
Note that some drivers cannot provide valid values for some or all of
these attributes until after \f(CW\*(C`$sth\-\*(C'\fR>\f(CW\*(C`execute\*(C'\fR has been called.
.PP
See also the finish entry elsewhere in this document to learn more about the effect it
may have on some attributes.
.Ip "\f(CW\*(C`NUM_OF_FIELDS\*(C'\fR  (integer, read-only)" 4
.IX Item "NUM_OF_FIELDS  (integer, read-only)"
Number of fields (columns) the prepared statement will return. Non-\f(CW\*(C`SELECT\*(C'\fR
statements will have \f(CW\*(C`NUM_OF_FIELDS == 0\*(C'\fR.
.Ip "\f(CW\*(C`NUM_OF_PARAMS\*(C'\fR  (integer, read-only)" 4
.IX Item "NUM_OF_PARAMS  (integer, read-only)"
The number of parameters (placeholders) in the prepared statement.
See \s-1SUBSTITUTION\s0 \s-1VARIABLES\s0 below for more details.
.Ip "\f(CW\*(C`NAME\*(C'\fR  (array-ref, read-only)" 4
.IX Item "NAME  (array-ref, read-only)"
Returns a reference to an array of field names for each column. The
names may contain spaces but should not be truncated or have any
trailing space. Note that the names have the letter case (upper, lower
or mixed) as returned by the driver being used. Portable applications
should use the NAME_lc entry elsewhere in this document or the NAME_uc entry elsewhere in this document.
.Sp
.Vb 1
\&  print "First column name: $sth->{NAME}->[0]\en";
.Ve
.Ip "\f(CW\*(C`NAME_lc\*(C'\fR  (array-ref, read-only)" 4
.IX Item "NAME_lc  (array-ref, read-only)"
Like the NAME entry elsewhere in this document but always returns lowercase names.
.Ip "\f(CW\*(C`NAME_uc\*(C'\fR  (array-ref, read-only)" 4
.IX Item "NAME_uc  (array-ref, read-only)"
Like the NAME entry elsewhere in this document but always returns uppercase names.
.Ip "\f(CW\*(C`NAME_hash\*(C'\fR  (hash-ref, read-only)" 4
.IX Item "NAME_hash  (hash-ref, read-only)"
.Ip "\f(CW\*(C`NAME_lc_hash\*(C'\fR  (hash-ref, read-only)" 4
.IX Item "NAME_lc_hash  (hash-ref, read-only)"
.Ip "\f(CW\*(C`NAME_uc_hash\*(C'\fR  (hash-ref, read-only)" 4
.IX Item "NAME_uc_hash  (hash-ref, read-only)"
The \f(CW\*(C`NAME_hash\*(C'\fR, \f(CW\*(C`NAME_lc_hash\*(C'\fR, and \f(CW\*(C`NAME_uc_hash\*(C'\fR attributes
return column name information as a reference to a hash.
.Sp
The keys of the hash are the names of the columns.  The letter case of
the keys corresponds to the letter case returned by the \f(CW\*(C`NAME\*(C'\fR,
\&\f(CW\*(C`NAME_lc\*(C'\fR, and \f(CW\*(C`NAME_uc\*(C'\fR attributes respectively (as described above).
.Sp
The value of each hash entry is the perl index number of the
corresponding column (counting from 0). For example:
.Sp
.Vb 4
\&  $sth = $dbh->prepare("select Id, Name from table");
\&  $sth->execute;
\&  @row = $sth->fetchrow_array;
\&  print "Name $row[ $sth->{NAME_lc_hash}{name} ]\en";
.Ve
.Ip "\f(CW\*(C`TYPE\*(C'\fR  (array-ref, read-only)" 4
.IX Item "TYPE  (array-ref, read-only)"
Returns a reference to an array of integer values for each
column. The value indicates the data type of the corresponding column.
.Sp
The values correspond to the international standards (\s-1ANSI\s0 X3.135
and \s-1ISO/IEC\s0 9075) which, in general terms, means \s-1ODBC\s0. Driver-specific
types that don't exactly match standard types should generally return
the same values as an \s-1ODBC\s0 driver supplied by the makers of the
database. That might include private type numbers in ranges the vendor
has officially registered with the \s-1ISO\s0 working group:
.Sp
.Vb 1
\&  ftp://sqlstandards.org/SC32/SQL_Registry/
.Ve
Where there's no vendor-supplied \s-1ODBC\s0 driver to be compatible with,
the \s-1DBI\s0 driver can use type numbers in the range that is now
officially reserved for use by the \s-1DBI:\s0 \-9999 to \-9000.
.Sp
All possible values for \f(CW\*(C`TYPE\*(C'\fR should have at least one entry in the
output of the \f(CW\*(C`type_info_all\*(C'\fR method (see the type_info_all entry elsewhere in this document).
.Ip "\f(CW\*(C`PRECISION\*(C'\fR  (array-ref, read-only)" 4
.IX Item "PRECISION  (array-ref, read-only)"
Returns a reference to an array of integer values for each
column.  For non-numeric columns, the value generally refers to either
the maximum length or the defined length of the column.  For numeric
columns, the value refers to the maximum number of significant digits
used by the data type (without considering a sign character or decimal
point).  Note that for floating point types (\s-1REAL\s0, \s-1FLOAT\s0, \s-1DOUBLE\s0), the
\&\*(L"display size\*(R" can be up to 7 characters greater than the precision.
(for the sign + decimal point + the letter E + a sign + 2 or 3 digits).
.Ip "\f(CW\*(C`SCALE\*(C'\fR  (array-ref, read-only)" 4
.IX Item "SCALE  (array-ref, read-only)"
Returns a reference to an array of integer values for each column.
\&\s-1NULL\s0 (\f(CW\*(C`undef\*(C'\fR) values indicate columns where scale is not applicable.
.Ip "\f(CW\*(C`NULLABLE\*(C'\fR  (array-ref, read-only)" 4
.IX Item "NULLABLE  (array-ref, read-only)"
Returns a reference to an array indicating the possibility of each
column returning a null.  Possible values are \f(CW\*(C`0\*(C'\fR
(or an empty string) = no, \f(CW\*(C`1\*(C'\fR = yes, \f(CW\*(C`2\*(C'\fR = unknown.
.Sp
.Vb 1
\&  print "First column may return NULL\en" if $sth->{NULLABLE}->[0];
.Ve
.Ip "\f(CW\*(C`CursorName\*(C'\fR  (string, read-only)" 4
.IX Item "CursorName  (string, read-only)"
Returns the name of the cursor associated with the statement handle, if
available. If not available or if the database driver does not support the
\&\f(CW\*(C`"where current of ..."\*(C'\fR \s-1SQL\s0 syntax, then it returns \f(CW\*(C`undef\*(C'\fR.
.Ip "\f(CW\*(C`ParamValues\*(C'\fR  (hash ref, read-only)" 4
.IX Item "ParamValues  (hash ref, read-only)"
Returns a reference to a hash containing the values currently bound
to placeholders.  Returns undef if not supported by the driver.
If the driver does support \f(CW\*(C`ParamValues\*(C'\fR but no values have been
bound yet then either undef or an empty hash may be returned.
.Sp
See the ShowErrorStatement entry elsewhere in this document for an example of how this is used.
.Sp
It is possible that the values in the hash returned by \f(CW\*(C`ParamValues\*(C'\fR
are not exactly the same as those passed to \fIbind_param()\fR or \fIexecute()\fR.
The driver may have modified the values in some way based on the
\&\s-1TYPE\s0 the value was bound with. For example a floating point value
bound as an \s-1SQL_INTEGER\s0 type may be returned as an integer.
.Ip "\f(CW\*(C`Statement\*(C'\fR  (string, read-only)" 4
.IX Item "Statement  (string, read-only)"
Returns the statement string passed to the the prepare entry elsewhere in this document method.
.Ip "\f(CW\*(C`RowsInCache\*(C'\fR  (integer, read-only)" 4
.IX Item "RowsInCache  (integer, read-only)"
If the driver supports a local row cache for \f(CW\*(C`SELECT\*(C'\fR statements, then
this attribute holds the number of un-fetched rows in the cache. If the
driver doesn't, then it returns \f(CW\*(C`undef\*(C'\fR. Note that some drivers pre-fetch
rows on execute, whereas others wait till the first fetch.
.Sp
See also the the RowCacheSize entry elsewhere in this document database handle attribute.
.SH "FURTHER INFORMATION"
.IX Header "FURTHER INFORMATION"
.Sh "Catalog Methods"
.IX Subsection "Catalog Methods"
An application can retrieve metadata information from the \s-1DBMS\s0 by issuing
appropriate queries on the views of the Information Schema. Unfortunately,
\&\f(CW\*(C`INFORMATION_SCHEMA\*(C'\fR views are seldom supported by the \s-1DBMS\s0.
Special methods (catalog methods) are available to return result sets
for a small but important portion of that metadata:
.PP
.Vb 4
\&  column_info
\&  foreign_key_info
\&  primary_key_info
\&  table_info
.Ve
All catalog methods accept arguments in order to restrict the result sets.
Passing \f(CW\*(C`undef\*(C'\fR to an optional argument does not constrain the search for
that argument.
However, an empty string ('') is treated as a regular search criteria
and will only match an empty value.
.PP
\&\fBNote\fR: \s-1SQL/CLI\s0 and \s-1ODBC\s0 differ in the handling of empty strings. An
empty string will not restrict the result set in \s-1SQL/CLI\s0.
.PP
Most arguments in the catalog methods accept only \fIordinary values\fR, e.g.
the arguments of \f(CW\*(C`primary_key_info()\*(C'\fR.
Such arguments are treated as a literal string, i.e. the case is significant
and quote characters are taken literally.
.PP
Some arguments in the catalog methods accept \fIsearch patterns\fR (strings
containing '_' and/or '%'), e.g. the \f(CW\*(C`$table\*(C'\fR argument of \f(CW\*(C`column_info()\*(C'\fR.
Passing '%' is equivalent to leaving the argument \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBCaveat\fR: The underscore ('_') is valid and often used in \s-1SQL\s0 identifiers.
Passing such a value to a search pattern argument may return more rows than
expected!
To include pattern characters as literals, they must be preceded by an
escape character which can be achieved with
.PP
.Vb 2
\&  $esc = $dbh->get_info( 14 );  # SQL_SEARCH_PATTERN_ESCAPE
\&  $search_pattern =~ s/([_%])/$esc$1/g;
.Ve
The \s-1ODBC\s0 and \s-1SQL/CLI\s0 specifications define a way to change the default
behavior described above: All arguments (except \fIlist value arguments\fR)
are treated as \fIidentifier\fR if the \f(CW\*(C`SQL_ATTR_METADATA_ID\*(C'\fR attribute is
set to \f(CW\*(C`SQL_TRUE\*(C'\fR.
\&\fIQuoted identifiers\fR are very similar to \fIordinary values\fR, i.e. their
body (the string within the quotes) is interpreted literally.
\&\fIUnquoted identifiers\fR are compared in \s-1UPPERCASE\s0.
.PP
The \s-1DBI\s0 (currently) does not support the \f(CW\*(C`SQL_ATTR_METADATA_ID\*(C'\fR attribute,
i.e. it behaves like an \s-1ODBC\s0 driver where \f(CW\*(C`SQL_ATTR_METADATA_ID\*(C'\fR is set to
\&\f(CW\*(C`SQL_FALSE\*(C'\fR.
.Sh "Transactions"
.IX Subsection "Transactions"
Transactions are a fundamental part of any robust database system. They
protect against errors and database corruption by ensuring that sets of
related changes to the database take place in atomic (indivisible,
all-or-nothing) units.
.PP
This section applies to databases that support transactions and where
\&\f(CW\*(C`AutoCommit\*(C'\fR is off.  See the AutoCommit entry elsewhere in this document for details of using \f(CW\*(C`AutoCommit\*(C'\fR
with various types of databases.
.PP
The recommended way to implement robust transactions in Perl
applications is to use \f(CW\*(C`RaiseError\*(C'\fR and \f(CW\*(C`eval\ {\ ...\ }\*(C'\fR
(which is very fast, unlike \f(CW\*(C`eval\ "..."\*(C'\fR). For example:
.PP
.Vb 13
\&  $dbh->{AutoCommit} = 0;  # enable transactions, if possible
\&  $dbh->{RaiseError} = 1;
\&  eval {
\&      foo(...)        # do lots of work here
\&      bar(...)        # including inserts
\&      baz(...)        # and updates
\&      $dbh->commit;   # commit the changes if we get this far
\&  };
\&  if ($@) {
\&      warn "Transaction aborted because $@";
\&      $dbh->rollback; # undo the incomplete changes
\&      # add other application on-error-clean-up code here
\&  }
.Ve
If the \f(CW\*(C`RaiseError\*(C'\fR attribute is not set, then \s-1DBI\s0 calls would need to be
manually checked for errors, typically like this:
.PP
.Vb 1
\&  $h->method(@args) or die $h->errstr;
.Ve
With \f(CW\*(C`RaiseError\*(C'\fR set, the \s-1DBI\s0 will automatically \f(CW\*(C`die\*(C'\fR if any \s-1DBI\s0 method
call on that handle (or a child handle) fails, so you don't have to
test the return value of each method call. See the RaiseError entry elsewhere in this document for more
details.
.PP
A major advantage of the \f(CW\*(C`eval\*(C'\fR approach is that the transaction will be
properly rolled back if \fIany\fR code (not just \s-1DBI\s0 calls) in the inner
application dies for any reason. The major advantage of using the
\&\f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`{RaiseError}\*(C'\fR attribute is that all \s-1DBI\s0 calls will be checked
automatically. Both techniques are strongly recommended.
.PP
After calling \f(CW\*(C`commit\*(C'\fR or \f(CW\*(C`rollback\*(C'\fR many drivers will not let you
fetch from a previously active \f(CW\*(C`SELECT\*(C'\fR statement handle that's a child
of the same database handle. A typical way round this is to connect the
the database twice and use one connection for \f(CW\*(C`SELECT\*(C'\fR statements.
.PP
See the AutoCommitand disconnect entries elsewhere in this document for other important information
about transactions.
.Sh "Handling \s-1BLOB\s0 / \s-1LONG\s0 / Memo Fields"
.IX Subsection "Handling BLOB / LONG / Memo Fields"
Many databases support \*(L"blob\*(R" (binary large objects), \*(L"long\*(R", or similar
datatypes for holding very long strings or large amounts of binary
data in a single field. Some databases support variable length long
values over 2,000,000,000 bytes in length.
.PP
Since values of that size can't usually be held in memory, and because
databases can't usually know in advance the length of the longest long
that will be returned from a \f(CW\*(C`SELECT\*(C'\fR statement (unlike other data
types), some special handling is required.
.PP
In this situation, the value of the \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`{LongReadLen}\*(C'\fR attribute is used
to determine how much buffer space to allocate when fetching such
fields.  The \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`{LongTruncOk}\*(C'\fR attribute is used to determine how to
behave if a fetched value can't fit into the buffer.
.PP
When trying to insert long or binary values, placeholders should be used
since there are often limits on the maximum size of an \f(CW\*(C`INSERT\*(C'\fR
statement and the the quote entry elsewhere in this document method generally can't cope with binary
data.  See the Placeholders and Bind Values entry elsewhere in this document.
.Sh "Simple Examples"
.IX Subsection "Simple Examples"
Here's a complete example program to select and fetch some data:
.PP
.Vb 2
\&  my $dbh = DBI->connect("dbi:DriverName:db_name", $user, $password)
\&      or die "Can't connect to $data_source: $DBI::errstr";
.Ve
.Vb 4
\&  my $sth = $dbh->prepare( q{
\&          SELECT name, phone
\&          FROM mytelbook
\&  }) or die "Can't prepare statement: $DBI::errstr";
.Ve
.Vb 2
\&  my $rc = $sth->execute
\&      or die "Can't execute statement: $DBI::errstr";
.Ve
.Vb 2
\&  print "Query will return $sth->{NUM_OF_FIELDS} fields.\en\en";
\&  print "Field names: @{ $sth->{NAME} }\en";
.Ve
.Vb 5
\&  while (($name, $phone) = $sth->fetchrow_array) {
\&      print "$name: $phone\en";
\&  }
\&  # check for problems which may have terminated the fetch early
\&  die $sth->errstr if $sth->err;
.Ve
.Vb 1
\&  $dbh->disconnect;
.Ve
Here's a complete example program to insert some data from a file.
(This example uses \f(CW\*(C`RaiseError\*(C'\fR to avoid needing to check each call).
.PP
.Vb 3
\&  my $dbh = DBI->connect("dbi:DriverName:db_name", $user, $password, {
\&      RaiseError => 1, AutoCommit => 0
\&  });
.Ve
.Vb 3
\&  my $sth = $dbh->prepare( q{
\&      INSERT INTO table (name, phone) VALUES (?, ?)
\&  });
.Ve
.Vb 7
\&  open FH, "<phone.csv" or die "Unable to open phone.csv: $!";
\&  while (<FH>) {
\&      chomp;
\&      my ($name, $phone) = split /,/;
\&      $sth->execute($name, $phone);
\&  }
\&  close FH;
.Ve
.Vb 2
\&  $dbh->commit;
\&  $dbh->disconnect;
.Ve
Here's how to convert fetched NULLs (undefined values) into empty strings:
.PP
.Vb 5
\&  while($row = $sth->fetchrow_arrayref) {
\&    # this is a fast and simple way to deal with nulls:
\&    foreach (@$row) { $_ = '' unless defined }
\&    print "@$row\en";
\&  }
.Ve
The \f(CW\*(C`q{...}\*(C'\fR style quoting used in these examples avoids clashing with
quotes that may be used in the \s-1SQL\s0 statement. Use the double-quote like
\&\f(CW\*(C`qq{...}\*(C'\fR operator if you want to interpolate variables into the string.
See the Quote and Quote-like Operators entry in the perlop manpage for more details.
.Sh "Threads and Thread Safety"
.IX Subsection "Threads and Thread Safety"
If the \s-1DBI\s0 is built using a Perl that has perl 5.005 style threads
enabled then it will use a per-driver mutex to ensure that only one
thread is with a driver at any one time. However perl 5.005 style
threads are unstable and shoud not be used in production.
.PP
Perl 5.7 and later support a new threading model called iThreads
which is much more stable. However the \s-1DBI\s0 has not yet had any extra
code added or testing done to make sure it works properly with
iThreads. So at this time the \s-1DBI\s0 should not be used with iThreads
in situations where more than one thread may enter a cloned instance
of the \s-1DBI\s0. It is \fIpossibly\fR safe to have multiple threads load
the \s-1DBI\s0 module \fIafter\fR they have been created, but the \s-1DBI\s0 probably
won't be providing any protection against multiple threads entering a
databases own library code. As many databases don't have thread
safe libraries that is likely to cause problems.
.PP
Summary: Using \s-1DBI\s0 with perl threads of any kind is not recommended
for production environments.
.Sh "Signal Handling and Canceling Operations"
.IX Subsection "Signal Handling and Canceling Operations"
The first thing to say is that signal handling in Perl is currently
\&\fInot\fR safe. There is always a small risk of Perl crashing and/or
core dumping when, or after, handling a signal.  (The risk was reduced
with 5.004_04 but is still present.)
.PP
The two most common uses of signals in relation to the \s-1DBI\s0 are for
canceling operations when the user types Ctrl-C (interrupt), and for
implementing a timeout using \f(CW\*(C`alarm()\*(C'\fR and \f(CW\*(C`$SIG{ALRM}\*(C'\fR.
.PP
To assist in implementing these operations, the \s-1DBI\s0 provides a \f(CW\*(C`cancel\*(C'\fR
method for statement handles. The \f(CW\*(C`cancel\*(C'\fR method should abort the current
operation and is designed to be called from a signal handler.
.PP
However, it must be stressed that: a) few drivers implement this at
the moment (the \s-1DBI\s0 provides a default method that just returns \f(CW\*(C`undef\*(C'\fR);
and b) even if implemented, there is still a possibility that the statement
handle, and possibly the parent database handle, will not be usable
afterwards.
.PP
If \f(CW\*(C`cancel\*(C'\fR returns true, then it has successfully
invoked the database engine's own cancel function.  If it returns false,
then \f(CW\*(C`cancel\*(C'\fR failed. If it returns \f(CW\*(C`undef\*(C'\fR, then the database
engine does not have cancel implemented.
.Sh "Subclassing the \s-1DBI\s0"
.IX Subsection "Subclassing the DBI"
\&\s-1DBI\s0 can be subclassed and extended just like any other object
oriented module.  Before we talk about how to do that, it's important
to be clear about how the \s-1DBI\s0 classes and how they work together.
.PP
By default \f(CW\*(C`$dbh = DBI\-\*(C'\fR>\f(CW\*(C`connect(...)\*(C'\fR returns a \f(CW$dbh\fR blessed
into the \f(CW\*(C`DBI::db\*(C'\fR class.  And the \f(CW\*(C`$dbh\-\*(C'\fR>\f(CW\*(C`prepare\*(C'\fR method
returns an \f(CW$sth\fR blessed into the \f(CW\*(C`DBI::st\*(C'\fR class (actually it
simply changes the last four characters of the calling handle class
to be \f(CW\*(C`::st\*(C'\fR).
.PP
The leading '\f(CW\*(C`DBI\*(C'\fR' is known as the 'root class' and the extra
\&'\f(CW\*(C`::db\*(C'\fR' or '\f(CW\*(C`::st\*(C'\fR' are the 'handle type suffixes'. If you want
to subclass the \s-1DBI\s0 you'll need to put your overriding methods into
the appropriate classes.  For example, if you want to use a root class
of \f(CW\*(C`MySubDBI\*(C'\fR and override the \fIdo()\fR, \fIprepare()\fR and \fIexecute()\fR methods,
then your \fIdo()\fR and \fIprepare()\fR methods should be in the \f(CW\*(C`MySubDBI::db\*(C'\fR
class and the \fIexecute()\fR method should be in the \f(CW\*(C`MySubDBI::st\*(C'\fR class.
.PP
To setup the inheritance hierarchy the \f(CW@ISA\fR variable in \f(CW\*(C`MySubDBI::db\*(C'\fR
should include \f(CW\*(C`DBI::db\*(C'\fR and the \f(CW@ISA\fR variable in \f(CW\*(C`MySubDBI::st\*(C'\fR
should include \f(CW\*(C`DBI::st\*(C'\fR.  The \f(CW\*(C`MySubDBI\*(C'\fR root class itself isn't
currently used for anything visible and so, apart from setting \f(CW@ISA\fR
to include \f(CW\*(C`DBI\*(C'\fR, it should be left empty.
.PP
So, having put your overriding methods into the right classes, and
setup the inheritance hierarchy, how do you get the \s-1DBI\s0 to use them?
You have two choices, either a static method call using the name
of your subclass:
.PP
.Vb 1
\&  $dbh = MySubDBI->connect(...);
.Ve
or specifying a \f(CW\*(C`RootClass\*(C'\fR attribute:
.PP
.Vb 1
\&  $dbh = DBI->connect(..., { RootClass => 'MySubDBI' });
.Ve
The only difference between the two is that using an explicit
RootClass attribute will make the \s-1DBI\s0 automatically attempt to load
a module by that name (and not complain if such a module can't be
found). If both forms are used then the attribute takes precedence.
.PP
Here's a brief example of a \s-1DBI\s0 subclass.  A more thorough example
can be found in t/subclass.t in the \s-1DBI\s0 distribution.
.PP
.Vb 1
\&  package MySubDBI;
.Ve
.Vb 1
\&  use strict;
.Ve
.Vb 3
\&  use DBI;
\&  use vars qw(@ISA);
\&  @ISA = qw(DBI);
.Ve
.Vb 3
\&  package MySubDBI::db;
\&  use vars qw(@ISA);
\&  @ISA = qw(DBI::db);
.Ve
.Vb 7
\&  sub prepare {
\&    my ($dbh, @args) = @_;
\&    my $sth = $dbh->SUPER::prepare(@args)
\&        or return;
\&    $sth->{private_mysubdbi_info} = { foo => 'bar' };
\&    return $sth;
\&  }
.Ve
.Vb 3
\&  package MySubDBI::st;
\&  use vars qw(@ISA);
\&  @ISA = qw(DBI::st);
.Ve
.Vb 8
\&  sub fetch {
\&    my ($sth, @args) = @_;
\&    my $row = $sth->SUPER::fetch(@args)
\&        or return;
\&    do_something_magical_with_row_data($row)
\&        or return $sth->set_err(1234, "The magic failed", undef, "fetch");
\&    return $row;
\&  }
.Ve
When calling a \s-1SUPER:\s0:method that returns a handle, be careful to
check the return value before trying to do other things with it in
your overridden method. This is especially important if you want
to set a hash attribute on the handle, as Perl's autovivification
will bite you by (in)conveniently creating an unblessed hashref,
which your method will then return with usually baffling results
later on.  It's best to check right after the call and return undef
immediately on error, just like \s-1DBI\s0 would and just like the example
above.
.PP
If your method needs to record an error it should call the \fIset_err()\fR
method with the error code and error string, as shown in the example
above. The error code and error string will be recorded in the
handle and available via \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`err\*(C'\fR and \f(CW\*(C`$DBI::errstr\*(C'\fR etc.
The \fIset_err()\fR method always returns an undef or empty list as
approriate. Since your method should nearly always return an undef
or empty list as soon as an error is detected it's handy to simply
return what \fIset_err()\fR returns, as shown in the example above.
.PP
If the handle has \f(CW\*(C`RaiseError\*(C'\fR, \f(CW\*(C`PrintError\*(C'\fR, or \f(CW\*(C`HandleError\*(C'\fR
etc. set then the \fIset_err()\fR method will honour them. This means
that if \f(CW\*(C`RaiseError\*(C'\fR is set then \fIset_err()\fR won't return in the
normal way but will 'throw an exception' that can be caught with
an \f(CW\*(C`eval\*(C'\fR block.
.PP
You can stash private data into \s-1DBI\s0 handles
via \f(CW\*(C`$h\-\*(C'\fR>\f(CW\*(C`{private_..._*}\*(C'\fR.  See the entry under the ATTRIBUTES COMMON TO ALL HANDLES entry elsewhere in this document for info and important caveats.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
In addition to the the trace entry elsewhere in this document method, you can enable the same trace
information by setting the \f(CW\*(C`DBI_TRACE\*(C'\fR environment variable before
starting Perl.
.PP
On Unix-like systems using a Bourne-like shell, you can do this easily
on the command line:
.PP
.Vb 1
\&  DBI_TRACE=2 perl your_test_script.pl
.Ve
If \f(CW\*(C`DBI_TRACE\*(C'\fR is set to a non-numeric value, then it is assumed to
be a file name and the trace level will be set to 2 with all trace
output appended to that file. If the name begins with a number
followed by an equal sign (\f(CW\*(C`=\*(C'\fR), then the number and the equal sign are
stripped off from the name, and the number is used to set the trace
level. For example:
.PP
.Vb 1
\&  DBI_TRACE=1=dbitrace.log perl your_test_script.pl
.Ve
See also the the trace entry elsewhere in this document method.
.PP
It can sometimes be handy to compare trace files from two different
runs of the same script. However using a tool like \f(CW\*(C`diff\*(C'\fR doesn't work
well because the trace file is full of object addresses that may
differ each run. Here's a handy little command to strip those out:
.PP
.Vb 1
\& perl -pe 's/\eb0x[\eda-f]{6,}/0xNNNN/gi; s/\eb[\eda-f]{6,}/<long number>/gi'
.Ve
.SH "WARNING AND ERROR MESSAGES"
.IX Header "WARNING AND ERROR MESSAGES"
.Sh "Fatal Errors"
.IX Subsection "Fatal Errors"
.if n .Ip "Can't call method """"prepare"""" without a package or object reference" 4
.el .Ip "Can't call method ``prepare'' without a package or object reference" 4
.IX Item "Can't call method "prepare without a package or object reference"
The \f(CW\*(C`$dbh\*(C'\fR handle you're using to call \f(CW\*(C`prepare\*(C'\fR is probably undefined because
the preceding \f(CW\*(C`connect\*(C'\fR failed. You should always check the return status of
\&\s-1DBI\s0 methods, or use the the RaiseError entry elsewhere in this document attribute.
.if n .Ip "Can't call method """"execute"""" without a package or object reference" 4
.el .Ip "Can't call method ``execute'' without a package or object reference" 4
.IX Item "Can't call method "execute without a package or object reference"
The \f(CW\*(C`$sth\*(C'\fR handle you're using to call \f(CW\*(C`execute\*(C'\fR is probably undefined because
the preceeding \f(CW\*(C`prepare\*(C'\fR failed. You should always check the return status of
\&\s-1DBI\s0 methods, or use the the RaiseError entry elsewhere in this document attribute.
.Ip "\s-1DBI/DBD\s0 internal version mismatch" 4
.IX Item "DBI/DBD internal version mismatch"
The \s-1DBD\s0 driver module was built with a different version of \s-1DBI\s0 than
the one currently being used.  You should rebuild the \s-1DBD\s0 module under
the current version of \s-1DBI\s0.
.Sp
(Some rare platforms require \*(L"static linking\*(R". On those platforms, there
may be an old \s-1DBI\s0 or \s-1DBD\s0 driver version actually embedded in the Perl
executable being used.)
.Ip "\s-1DBD\s0 driver has not implemented the AutoCommit attribute" 4
.IX Item "DBD driver has not implemented the AutoCommit attribute"
The \s-1DBD\s0 driver implementation is incomplete. Consult the author.
.Ip "Can't [sg]et \f(CW%s\fR->{%s}: unrecognised attribute" 4
.IX Item "Can't [sg]et %s->{%s}: unrecognised attribute"
You attempted to set or get an unknown attribute of a handle.  Make
sure you have spelled the attribute name correctly; case is significant
(e.g., \*(L"Autocommit\*(R" is not the same as \*(L"AutoCommit\*(R").
.SH "Pure-Perl DBI"
.IX Header "Pure-Perl DBI"
A pure-perl emulation of the \s-1DBI\s0 is included in the distribution
for people using pure-perl drivers who, for whatever reason, can't
install the compiled \s-1DBI\s0. See the DBI::PurePerl manpage.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Sh "Driver and Database Documentation"
.IX Subsection "Driver and Database Documentation"
Refer to the documentation for the \s-1DBD\s0 driver that you are using.
.PP
Refer to the \s-1SQL\s0 Language Reference Manual for the database engine that you are using.
.Sh "Standards Reference Information"
.IX Subsection "Standards Reference Information"
More detailed information about the semantics of certain \s-1DBI\s0 methods
that are based on \s-1ODBC\s0 and \s-1SQL/CLI\s0 standards is available on-line
via microsoft.com, for \s-1ODBC\s0, and www.jtc1sc32.org for the \s-1SQL/CLI\s0
standard:
.PP
.Vb 8
\& DBI method        ODBC function     SQL/CLI Working Draft
\& ----------        -------------     ---------------------
\& column_info       SQLColumns        Page 124
\& foreign_key_info  SQLForeignKeys    Page 163
\& get_info          SQLGetInfo        Page 214
\& primary_key_info  SQLPrimaryKeys    Page 254
\& table_info        SQLTables         Page 294
\& type_info         SQLGetTypeInfo    Page 239
.Ve
For example, for \s-1ODBC\s0 information on SQLColumns you'd visit:
.PP
.Vb 1
\&  http://msdn.microsoft.com/library/en-us/odbc/htm/odbcsqlcolumns.asp
.Ve
If that \s-1URL\s0 ceases to work then use the \s-1MSDN\s0 search facility at:
.PP
.Vb 1
\&  http://search.microsoft.com/us/dev/
.Ve
and search for \f(CW\*(C`SQLColumns returns\*(C'\fR using the exact phrase option.
The link you want will probably just be called \f(CW\*(C`SQLColumns\*(C'\fR and will
be part of the Data Access \s-1SDK\s0.
.PP
And for \s-1SQL/CLI\s0 standard information on SQLColumns you'd read page 124 of
the (very large) \s-1SQL/CLI\s0 Working Draft available from:
.PP
.Vb 1
\&  http://www.jtc1sc32.org/sc32/jtc1sc32.nsf/Attachments/7E3B41486BD99C3488256B410064C877/$FILE/32N0744T.PDF
.Ve
A hyperlinked, browsable version of the \s-1BNF\s0 syntax for \s-1SQL92\s0 (plus
Oracle 7 \s-1SQL\s0 and \s-1PL/SQL\s0) is available here:
.PP
.Vb 1
\&  http://cui.unige.ch/db-research/Enseignement/analyseinfo/SQL92/BNFindex.html
.Ve
A \s-1BNF\s0 syntax for \s-1SQL3\s0 is available here:
.PP
.Vb 1
\&  http://www.sqlstandards.org/SC32/WG3/Progression_Documents/Informal_working_drafts/iso-9075-2-1999.bnf
.Ve
.Sh "Books and Journals"
.IX Subsection "Books and Journals"
.Vb 1
\& Programming the Perl DBI, by Alligator Descartes and Tim Bunce.
.Ve
.Vb 1
\& Programming Perl 2nd Ed. by Larry Wall, Tom Christiansen & Randal Schwartz.
.Ve
.Vb 1
\& Learning Perl by Randal Schwartz.
.Ve
.Vb 1
\& Dr Dobb's Journal, November 1996.
.Ve
.Vb 1
\& The Perl Journal, April 1997.
.Ve
.Sh "Perl Modules"
.IX Subsection "Perl Modules"
Index of \s-1DBI\s0 related modules available from \s-1CPAN:\s0
.PP
.Vb 2
\& http://search.cpan.org/search?mode=module&query=DBIx%3A%3A
\& http://search.cpan.org/search?mode=doc&query=DBI
.Ve
For a good comparison of \s-1RDBMS-OO\s0 mappers and some \s-1OO-RDBMS\s0 mappers
(including Class::DBI, Alzabo, and DBIx::RecordSet in the former
category and Tangram and \s-1SPOPS\s0 in the latter) see the Perl
Object-Oriented Persistence project pages at:
.PP
.Vb 1
\& http://poop.sourceforge.net
.Ve
.Sh "Manual Pages"
.IX Subsection "Manual Pages"
\&\fIperl\fR\|(1), \fIperlmod\fR\|(1), \fIperlbook\fR\|(1)
.Sh "Mailing List"
.IX Subsection "Mailing List"
The \fIdbi-users\fR mailing list is the primary means of communication among
users of the \s-1DBI\s0 and its related modules. For details send email to:
.PP
.Vb 1
\& dbi-users-help@perl.org
.Ve
There are typically between 700 and 900 messages per month.  You have
to subscribe in order to be able to post. However you can opt for a
\&'post-only' subscription.
.PP
Mailing list archives (of variable quality) are held at:
.PP
.Vb 5
\& http://www.xray.mpe.mpg.de/mailing-lists/dbi/
\& http://groups.yahoo.com/group/dbi-users
\& http://www.bitmechanic.com/mail-archives/dbi-users/
\& http://marc.theaimsgroup.com/?l=perl-dbi&r=1&w=2
\& http://www.mail-archive.com/dbi-users%40perl.org/
.Ve
.Sh "Assorted Related \s-1WWW\s0 Links"
.IX Subsection "Assorted Related WWW Links"
The \s-1DBI\s0 \*(L"Home Page\*(R":
.PP
.Vb 1
\& http://dbi.perl.org/
.Ve
Other \s-1DBI\s0 related links:
.PP
.Vb 5
\& http://tegan.deltanet.com/~phlip/DBUIdoc.html
\& http://dc.pm.org/perl_db.html
\& http://wdvl.com/Authoring/DB/Intro/toc.html
\& http://www.hotwired.com/webmonkey/backend/tutorials/tutorial1.html
\& http://bumppo.net/lists/macperl/1999/06/msg00197.html
.Ve
Other database related links:
.PP
.Vb 2
\& http://www.jcc.com/sql_stnd.html
\& http://cuiwww.unige.ch/OSG/info/FreeDB/FreeDB.home.html
.Ve
Commercial and Data Warehouse Links
.PP
.Vb 6
\& http://www.dwinfocenter.org
\& http://www.datawarehouse.com
\& http://www.datamining.org
\& http://www.olapcouncil.org
\& http://www.idwa.org
\& http://www.knowledgecenters.org/dwcenter.asp
.Ve
Recommended Perl Programming Links
.PP
.Vb 1
\& http://language.perl.com/style/
.Ve
.Sh "\s-1FAQ\s0"
.IX Subsection "FAQ"
Please also read the \s-1DBI\s0 \s-1FAQ\s0 which is installed as a \s-1DBI::FAQ\s0 module.
You can use \fIperldoc\fR to read it by executing the \f(CW\*(C`perldoc DBI::FAQ\*(C'\fR command.
.SH "AUTHORS"
.IX Header "AUTHORS"
\&\s-1DBI\s0 by Tim Bunce.  This pod text by Tim Bunce, J. Douglas Dunlop,
Jonathan Leffler and others.  Perl by Larry Wall and the
\&\f(CW\*(C`perl5\-porters\*(C'\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The \s-1DBI\s0 module is Copyright (c) 1994\-2002 Tim Bunce. Ireland.
All rights reserved.
.PP
You may distribute under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the Perl \s-1README\s0 file.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
I would like to acknowledge the valuable contributions of the many
people I have worked with on the \s-1DBI\s0 project, especially in the early
years (1992\-1994). In no particular order: Kevin Stock, Buzz Moschetti,
Kurt Andersen, Ted Lemon, William Hails, Garth Kennedy, Michael Peppler,
Neil S. Briscoe, Jeff Urlwin, David J. Hughes, Jeff Stander,
Forrest D Whitcher, Larry Wall, Jeff Fried, Roy Johnson, Paul Hudson,
Georg Rehfeld, Steve Sizemore, Ron Pool, Jon Meek, Tom Christiansen,
Steve Baumgarten, Randal Schwartz, and a whole lot more.
.PP
Then, of course, there are the poor souls who have struggled through
untold and undocumented obstacles to actually implement \s-1DBI\s0 drivers.
Among their ranks are Jochen Wiedmann, Alligator Descartes, Jonathan
Leffler, Jeff Urlwin, Michael Peppler, Henrik Tougaard, Edwin Pratomo,
Davide Migliavacca, Jan Pazdziora, Peter Haworth, Edmund Mergl, Steve
Williams, Thomas Lowery, and Phlip Plumlee. Without them, the \s-1DBI\s0 would
not be the practical reality it is today.  I'm also especially grateful
to Alligator Descartes for starting work on the \*(L"Programming the Perl
\&\s-1DBI\s0\*(R" book and letting me jump on board.
.PP
Much of the \s-1DBI\s0 and \s-1DBD:\s0:Oracle was developed while I was Technical
Director (\s-1CTO\s0) of the Paul Ingram Group (www.ig.co.uk).  So I'd
especially like to thank Paul for his generosity and vision in
supporting this work for many years.
.SH "TRANSLATIONS"
.IX Header "TRANSLATIONS"
A German translation of this manual (possibly slightly out of date) is
available, thanks to O'Reilly, at:
.PP
.Vb 1
\&  http://www.oreilly.de/catalog/perldbiger/
.Ve
Some other translations:
.PP
.Vb 2
\& http://cronopio.net/perl/                              - Spanish
\& http://member.nifty.ne.jp/hippo2000/dbimemo.htm        - Japanese
.Ve
.SH "SUPPORT / WARRANTY"
.IX Header "SUPPORT / WARRANTY"
The \s-1DBI\s0 is free software. \s-1IT\s0 \s-1COMES\s0 \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0.
.PP
Commercial support for Perl and the \s-1DBI\s0, \s-1DBD:\s0:Oracle and
Oraperl modules can be arranged via The Perl Clinic.
For more details visit:
.PP
.Vb 1
\&  http://www.perlclinic.com
.Ve
For direct \s-1DBI\s0 and \s-1DBD:\s0:Oracle support, enhancement, and related work
I am available for consultancy on standard commercial terms.
.SH "TRAINING"
.IX Header "TRAINING"
References to \s-1DBI\s0 related training resources. No recommendation implied.
.PP
.Vb 2
\&  http://www.treepax.co.uk/
\&  http://www.keller.com/dbweb/
.Ve
.SH "FREQUENTLY ASKED QUESTIONS"
.IX Header "FREQUENTLY ASKED QUESTIONS"
See the \s-1DBI\s0 \s-1FAQ\s0 for a more comprehensive list of FAQs. Use the
\&\f(CW\*(C`perldoc DBI::FAQ\*(C'\fR command to read it.
.Sh "How fast is the \s-1DBI\s0?"
.IX Subsection "How fast is the DBI?"
To measure the speed of the \s-1DBI\s0 and \s-1DBD:\s0:Oracle code, I modified
\&\s-1DBD:\s0:Oracle so you can set an attribute that will cause the
same row to be fetched from the row cache over and over again (without
involving Oracle code but exercising *all* the \s-1DBI\s0 and \s-1DBD:\s0:Oracle code
in the code path for a fetch).
.PP
The results (on my lightly loaded old Sparc 10) fetching 50000 rows using:
.PP
.Vb 1
\&        1 while $csr->fetch;
.Ve
were:
	one field:   5300 fetches per cpu second (approx)
	ten fields:  4000 fetches per cpu second (approx)
.PP
Obviously results will vary between platforms (newer faster platforms
can reach around 50000 fetches per second), but it does give a feel for
the maximum performance: fast.  By way of comparison, using the code:
.PP
.Vb 1
\&        1 while @row = $csr->fetchrow_array;
.Ve
(\f(CW\*(C`fetchrow_array\*(C'\fR is roughly the same as \f(CW\*(C`ora_fetch\*(C'\fR) gives:
.PP
.Vb 2
\&        one field:   3100 fetches per cpu second (approx)
\&        ten fields:  1000 fetches per cpu second (approx)
.Ve
Notice the slowdown and the more dramatic impact of extra fields.
(The fields were all one char long. The impact would be even bigger for
longer strings.)
.PP
Changing that slightly to represent actually doing something in Perl
with the fetched data:
.PP
.Vb 3
\&    while(@row = $csr->fetchrow_array) {
\&        $hash{++$i} = [ @row ];
\&    }
.Ve
gives:	ten fields:  500 fetches per cpu second (approx)
.PP
That simple addition has *halved* the performance.
.PP
I therefore conclude that \s-1DBI\s0 and \s-1DBD:\s0:Oracle overheads are small
compared with Perl language overheads (and probably database overheads).
.PP
So, if you think the \s-1DBI\s0 or your driver is slow, try replacing your
fetch loop with just:
.PP
.Vb 1
\&        1 while $csr->fetch;
.Ve
and time that. If that helps then point the finger at your own code. If
that doesn't help much then point the finger at the database, the
platform, the network etc. But think carefully before pointing it at
the \s-1DBI\s0 or your driver.
.PP
(Having said all that, if anyone can show me how to make the \s-1DBI\s0 or
drivers even more efficient, I'm all ears.)
.Sh "Why doesn't my \s-1CGI\s0 script work right?"
.IX Subsection "Why doesn't my CGI script work right?"
Read the information in the references below.  Please do \fInot\fR post
\&\s-1CGI\s0 related questions to the \fIdbi-users\fR mailing list (or to me).
.PP
.Vb 5
\& http://www.perl.com/cgi-bin/pace/pub/doc/FAQs/cgi/perl-cgi-faq.html
\& http://www3.pair.com/webthing/docs/cgi/faqs/cgifaq.shtml
\& http://www-genome.wi.mit.edu/WWW/faqs/www-security-faq.html
\& http://www.boutell.com/faq/
\& http://www.perl.com/perl/faq/
.Ve
General problems and good ideas:
.PP
.Vb 2
\& Use the CGI::ErrorWrap module.
\& Remember that many env vars won't be set for CGI scripts.
.Ve
.Sh "How can I maintain a \s-1WWW\s0 connection to a database?"
.IX Subsection "How can I maintain a WWW connection to a database?"
For information on the Apache httpd server and the \f(CW\*(C`mod_perl\*(C'\fR module see
.PP
.Vb 1
\&  http://perl.apache.org/
.Ve
.Sh "What about \s-1ODBC\s0?"
.IX Subsection "What about ODBC?"
A \s-1DBD::ODBC\s0 module is available.
.Sh "Does the \s-1DBI\s0 have a year 2000 problem?"
.IX Subsection "Does the DBI have a year 2000 problem?"
No. The \s-1DBI\s0 has no knowledge or understanding of dates at all.
.PP
Individual drivers (\s-1DBD:\s0:*) may have some date handling code but are
unlikely to have year 2000 related problems within their code. However,
your application code which \fIuses\fR the \s-1DBI\s0 and \s-1DBD\s0 drivers may have
year 2000 related problems if it has not been designed and written well.
.PP
See also the \*(L"Does Perl have a year 2000 problem?\*(R" section of the Perl \s-1FAQ:\s0
.PP
.Vb 1
\&  http://www.perl.com/CPAN/doc/FAQs/FAQ/PerlFAQ.html
.Ve
.SH "OTHER RELATED WORK AND PERL MODULES"
.IX Header "OTHER RELATED WORK AND PERL MODULES"
.Ip "Apache::DBI by E.Mergl@bawue.de" 4
.IX Item "Apache::DBI by E.Mergl@bawue.de"
To be used with the Apache daemon together with an embedded Perl
interpreter like \f(CW\*(C`mod_perl\*(C'\fR. Establishes a database connection which
remains open for the lifetime of the \s-1HTTP\s0 daemon. This way the \s-1CGI\s0
connect and disconnect for every database access becomes superfluous.
.Ip "\s-1JDBC\s0 Server by Stuart 'Zen' Bishop zen@bf.rmit.edu.au" 4
.IX Item "JDBC Server by Stuart 'Zen' Bishop zen@bf.rmit.edu.au"
The server is written in Perl. The client classes that talk to it are
of course in Java. Thus, a Java applet or application will be able to
comunicate via the \s-1JDBC\s0 \s-1API\s0 with any database that has a \s-1DBI\s0 driver installed.
The \s-1URL\s0 used is in the form \f(CW\*(C`jdbc:dbi://host.domain.etc:999/Driver/DBName\*(C'\fR.
It seems to be very similar to some commercial products, such as jdbcKona.
.Ip "Remote Proxy \s-1DBD\s0 support" 4
.IX Item "Remote Proxy DBD support"
As of \s-1DBI\s0 1.02, a complete implementation of a \s-1DBD:\s0:Proxy driver and the
\&\s-1DBI:\s0:ProxyServer are part of the \s-1DBI\s0 distribution.
.Ip "\s-1SQL\s0 Parser" 4
.IX Item "SQL Parser"
See also the \s-1SQL:\s0:Statement module, a very simple \s-1SQL\s0 parser and engine,
base of the \s-1DBD::CSV\s0 driver.
