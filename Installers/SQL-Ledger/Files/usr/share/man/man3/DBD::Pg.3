.\" Automatically generated by Pod::Man version 1.02
.\" Tue Jun 25 07:42:13 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Pg 3"
.TH Pg 3 "perl v5.6.0" "2002-04-27" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1DBD:\s0:Pg \- PostgreSQL database driver for the \s-1DBI\s0 module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use DBI;
.Ve
.Vb 1
\&  $dbh = DBI->connect("dbi:Pg:dbname=$dbname", "", "");
.Ve
.Vb 1
\&  # See the DBI module documentation for full details
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1DBD:\s0:Pg is a Perl module which works with the \s-1DBI\s0 module to provide
access to PostgreSQL databases.
.SH "MODULE DOCUMENTATION"
.IX Header "MODULE DOCUMENTATION"
This documentation describes driver specific behavior and restrictions. 
It is not supposed to be used as the only reference for the user. In any 
case consult the \s-1DBI\s0 documentation first !
.SH "THE DBI CLASS"
.IX Header "THE DBI CLASS"
.Sh "\s-1DBI\s0 Class Methods"
.IX Subsection "DBI Class Methods"
.Ip "\fBconnect\fR" 4
.IX Item "connect"
To connect to a database with a minimum of parameters, use the 
following syntax: 
.Sp
.Vb 1
\&   $dbh = DBI->connect("dbi:Pg:dbname=$dbname", "", "");
.Ve
This connects to the database \f(CW$dbname\fR at localhost without any user 
authentication. This is sufficient for the defaults of PostgreSQL. 
.Sp
The following connect statement shows all possible parameters: 
.Sp
.Vb 1
\&  $dbh = DBI->connect("dbi:Pg:dbname=$dbname;host=$host;port=$port;options=$options;tty=$tty", "$username", "$password");
.Ve
If a parameter is undefined PostgreSQL first looks for specific environment 
variables and then it uses hard coded defaults: 
.Sp
.Vb 9
\&    parameter  environment variable  hard coded default
\&    --------------------------------------------------
\&    dbname     PGDATABASE            current userid
\&    host       PGHOST                localhost
\&    port       PGPORT                5432
\&    options    PGOPTIONS             ""
\&    tty        PGTTY                 ""
\&    username   PGUSER                current userid
\&    password   PGPASSWORD            ""
.Ve
If a host is specified, the postmaster on this host needs to be 
started with the \f(CW\*(C`\-i\*(C'\fR option (\s-1TCP/IP\s0 sockets). 
.Sp
The options parameter specifies runtime options for the Postgres 
backend. Common usage is to increase the number of buffers with 
the \f(CW\*(C`\-B\*(C'\fR option. Also important is the \f(CW\*(C`\-F\*(C'\fR option, which disables 
automatiic \fIfsync()\fR call after each transaction. For further details 
please refer to the the postgres manpage. 
.Sp
For authentication with username and password appropriate entries have 
to be made in pg_hba.conf. Please refer to the the pg_hba.conf manpage and the 
the pg_passwd manpage for the different types of authentication. Note that for 
these two parameters \s-1DBI\s0 distinguishes between empty and undefined. If 
these parameters are undefined \s-1DBI\s0 substitutes the values of the environment 
variables \s-1DBI_USER\s0 and \s-1DBI_PASS\s0 if present. 
.Ip "\fBavailable_drivers\fR" 4
.IX Item "available_drivers"
.Vb 1
\&  @driver_names = DBI->available_drivers;
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBdata_sources\fR" 4
.IX Item "data_sources"
.Vb 1
\&  @data_sources = DBI->data_sources('Pg');
.Ve
The driver supports this method. Note, that the necessary database 
connect to the database template1 will be done on the localhost 
without any user-authentication. Other preferences can only be set 
with the environment variables \s-1PGHOST\s0, \s-1DBI_USER\s0 and \s-1DBI_PASS\s0. 
.Ip "\fBtrace\fR" 4
.IX Item "trace"
.Vb 1
\&  DBI->trace($trace_level, $trace_file)
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact.
.Sh "\s-1DBI\s0 Dynamic Attributes"
.IX Subsection "DBI Dynamic Attributes"
See Common Methods. 
.SH "METHODS COMMON TO ALL HANDLES"
.IX Header "METHODS COMMON TO ALL HANDLES"
.Ip "\fBerr\fR" 4
.IX Item "err"
.Vb 1
\&  $rv = $h->err;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. For the connect 
method it returns PQstatus. In all other cases it returns 
PQresultStatus of the current handle. 
.Ip "\fBerrstr\fR" 4
.IX Item "errstr"
.Vb 1
\&  $str = $h->errstr;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. It returns the 
PQerrorMessage related to the current handle. 
.Ip "\fBstate\fR" 4
.IX Item "state"
.Vb 1
\&  $str = $h->state;
.Ve
This driver does not (yet) support the state method. 
.Ip "\fBtrace\fR" 4
.IX Item "trace"
.Vb 1
\&  $h->trace($trace_level, $trace_filename);
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBtrace_msg\fR" 4
.IX Item "trace_msg"
.Vb 1
\&  $h->trace_msg($message_text);
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBfunc\fR" 4
.IX Item "func"
This driver supports a variety of driver specific functions 
accessible via the func interface:
.Sp
.Vb 1
\&  $attrs = $dbh->func($table, 'table_attributes');
.Ve
This method returns for the given table a reference to an 
array of hashes:
.Sp
.Vb 7
\&  NAME        attribute name
\&  TYPE        attribute type
\&  SIZE        attribute size (-1 for variable size)
\&  NULLABLE    flag nullable
\&  DEFAULT     default value 
\&  CONSTRAINT  constraint
\&  PRIMARY_KEY flag is_primary_key
.Ve
.Vb 1
\&  $lobjId = $dbh->func($mode, 'lo_creat');
.Ve
Creates a new large object and returns the object-id. \f(CW$mode\fR is a 
bit-mask describing different attributes of the new object. Use 
the following constants:
.Sp
.Vb 2
\&  $dbh->{pg_INV_WRITE}
\&  $dbh->{pg_INV_READ}
.Ve
Upon failure it returns undef.
.Sp
.Vb 1
\&  $lobj_fd = $dbh->func($lobjId, $mode, 'lo_open');
.Ve
Opens an existing large object and returns an object-descriptor 
for use in subsequent lo_* calls. 
For the mode bits see lo_create. Returns undef upon failure.
Note, that 0 is a perfectly correct object descriptor !
.Sp
.Vb 1
\&  $nbytes = $dbh->func($lobj_fd, $buf, $len, 'lo_write');
.Ve
Writes \f(CW$len\fR bytes of \f(CW$buf\fR into the large object \f(CW$lobj_fd\fR.
Returns the number of bytes written and undef upon failure.
.Sp
.Vb 1
\&  $nbytes = $dbh->func($lobj_fd, $buf, $len, 'lo_read');
.Ve
Reads \f(CW$len\fR bytes into \f(CW$buf\fR from large object \f(CW$lobj_fd\fR.
Returns the number of bytes read and undef upon failure.
.Sp
.Vb 1
\&  $loc = $dbh->func($lobj_fd, $offset, $whence, 'lo_lseek');
.Ve
Change the current read or write location on the large
object \f(CW$obj_id\fR. Currently \f(CW$whence\fR can only be 0 (L_SET).
Returns the current location and undef upon failure. 
.Sp
.Vb 1
\&  $loc = $dbh->func($lobj_fd, 'lo_tell');
.Ve
Returns the current read or write location on the large
object \f(CW$lobj_fd\fR and undef upon failure.
.Sp
.Vb 1
\&  $lobj_fd = $dbh->func($lobj_fd, 'lo_close');
.Ve
Closes an existing large object. Returns true upon success
and false upon failure.
.Sp
.Vb 1
\&  $lobj_fd = $dbh->func($lobj_fd, 'lo_unlink');
.Ve
Deletes an existing large object. Returns true upon success
and false upon failure.
.Sp
.Vb 1
\&  $lobjId = $dbh->func($filename, 'lo_import');
.Ve
Imports a Unix file as large object and returns the object
id of the new object or undef upon failure. 
.Sp
.Vb 1
\&  $ret = $dbh->func($lobjId, 'lo_export', 'filename');
.Ve
Exports a large object into a Unix file.  Returns false upon
failure, true otherwise.
.Sp
.Vb 1
\&  $ret = $dbh->func($line, 'putline');
.Ve
Used together with the SQL-command '\s-1COPY\s0 table \s-1FROM\s0 \s-1STDIN\s0' to 
copy large amount of data into a table avoiding the overhead 
of using single insert-comands. The application must explicitly 
send the two characters \*(L"\e.\*(R" to indicate to the backend that 
it has finished sending its data. See test.pl for an example 
on how to use this function. 
.Sp
.Vb 1
\&  $ret = $dbh->func($buffer, length, 'getline');
.Ve
Used together with the SQL-command '\s-1COPY\s0 table \s-1TO\s0 \s-1STDOUT\s0' to 
dump a complete table. See test.pl for an example on how to use 
this function. 
.SH "ATTRIBUTES COMMON TO ALL HANDLES"
.IX Header "ATTRIBUTES COMMON TO ALL HANDLES"
.Ip "\fBWarn\fR (boolean, inherited)" 4
.IX Item "Warn (boolean, inherited)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBActive\fR (boolean, read-only)" 4
.IX Item "Active (boolean, read-only)"
Supported by the driver as proposed by \s-1DBI\s0. A database 
handle is active while it is connected and  statement 
handle is active until it is finished. 
.Ip "\fBKids\fR (integer, read-only)" 4
.IX Item "Kids (integer, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBActiveKids\fR (integer, read-only)" 4
.IX Item "ActiveKids (integer, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBCachedKids\fR (hash ref)" 4
.IX Item "CachedKids (hash ref)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBCompatMode\fR (boolean, inherited)" 4
.IX Item "CompatMode (boolean, inherited)"
Not used by this driver. 
.Ip "\fBInactiveDestroy\fR (boolean)" 4
.IX Item "InactiveDestroy (boolean)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBPrintError\fR (boolean, inherited)" 4
.IX Item "PrintError (boolean, inherited)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBRaiseError\fR (boolean, inherited)" 4
.IX Item "RaiseError (boolean, inherited)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBChopBlanks\fR (boolean, inherited)" 4
.IX Item "ChopBlanks (boolean, inherited)"
Supported by the driver as proposed by \s-1DBI\s0. This 
method is similar to the SQL-function \s-1RTRIM\s0. 
.Ip "\fBLongReadLen\fR (integer, inherited)" 4
.IX Item "LongReadLen (integer, inherited)"
Implemented by \s-1DBI\s0, not used by the driver.
.Ip "\fBLongTruncOk\fR (boolean, inherited)" 4
.IX Item "LongTruncOk (boolean, inherited)"
Implemented by \s-1DBI\s0, not used by the driver.
.Ip "\fBTaint\fR (boolean, inherited)" 4
.IX Item "Taint (boolean, inherited)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBprivate_*\fR" 4
.IX Item "private_*"
Implemented by \s-1DBI\s0, no driver-specific impact.
.SH "DBI DATABASE HANDLE OBJECTS"
.IX Header "DBI DATABASE HANDLE OBJECTS"
.Sh "Database Handle Methods"
.IX Subsection "Database Handle Methods"
.Ip "\fBselectrow_array\fR" 4
.IX Item "selectrow_array"
.Vb 1
\&  @row_ary = $dbh->selectrow_array($statement, \e%attr, @bind_values);
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBselectall_arrayref\fR" 4
.IX Item "selectall_arrayref"
.Vb 1
\&  $ary_ref = $dbh->selectall_arrayref($statement, \e%attr, @bind_values);
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBselectcol_arrayref\fR" 4
.IX Item "selectcol_arrayref"
.Vb 1
\&  $ary_ref = $dbh->selectcol_arrayref($statement, \e%attr, @bind_values);
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact.
.Ip "\fBprepare\fR" 4
.IX Item "prepare"
.Vb 1
\&  $sth = $dbh->prepare($statement, \e%attr);
.Ve
PostgreSQL does not have the concept of preparing 
a statement. Hence the prepare method just stores 
the statement after checking for place-holders. 
No information about the statement is available 
after preparing it. 
.Ip "\fBprepare_cached\fR" 4
.IX Item "prepare_cached"
.Vb 1
\&  $sth = $dbh->prepare_cached($statement, \e%attr);
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact. 
This method is not useful for this driver, because 
preparing a statement has no database interaction. 
.Ip "\fBdo\fR" 4
.IX Item "do"
.Vb 1
\&  $rv  = $dbh->do($statement, \e%attr, @bind_values);
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact. See the 
notes for the execute method elsewhere in this document. 
.Ip "\fBcommit\fR" 4
.IX Item "commit"
.Vb 1
\&  $rc  = $dbh->commit;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. See also the 
notes about \fBTransactions\fR elsewhere in this document. 
.Ip "\fBrollback\fR" 4
.IX Item "rollback"
.Vb 1
\&  $rc  = $dbh->rollback;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. See also the 
notes about \fBTransactions\fR elsewhere in this document. 
.Ip "\fBdisconnect\fR" 4
.IX Item "disconnect"
.Vb 1
\&  $rc  = $dbh->disconnect;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. 
.Ip "\fBping\fR" 4
.IX Item "ping"
.Vb 1
\&  $rc = $dbh->ping;
.Ve
This driver supports the ping-method, which can be used to check the 
validity of a database-handle. The ping method issues an empty query 
and checks the result status. 
.Ip "\fBtable_info\fR" 4
.IX Item "table_info"
.Vb 1
\&  $sth = $dbh->table_info;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. This 
method returns all tables and views which are owned by the 
current user. It does not select any indices and sequences. 
Also System tables are not selected. As \s-1TABLE_QUALIFIER\s0 the 
reltype attribute is returned and the \s-1REMARKS\s0 are undefined. 
.Ip "\fBtables\fR" 4
.IX Item "tables"
.Vb 1
\&  @names = $dbh->tables;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. This 
method returns all tables and views which are owned by the 
current user. It does not select any indices and sequences. 
Also system tables are not selected. 
.Ip "\fBtype_info_all\fR" 4
.IX Item "type_info_all"
.Vb 1
\&  $type_info_all = $dbh->type_info_all;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. 
Only for \s-1SQL\s0 data-types and for frequently used data-types 
information is provided. The mapping between the PostgreSQL typename 
and the \s-1SQL92\s0 data-type (if possible) has been done according to the 
following table: 
.Sp
.Vb 22
\&        +---------------+------------------------------------+
\&        | typname       | SQL92                              |
\&        |---------------+------------------------------------|
\&        | bool          | BOOL                               |
\&        | text          | /                                  |
\&        | bpchar        | CHAR(n)                            |
\&        | varchar       | VARCHAR(n)                         |
\&        | int2          | SMALLINT                           |
\&        | int4          | INT                                |
\&        | int8          | /                                  |
\&        | money         | /                                  |
\&        | float4        | FLOAT(p)   p<7=float4, p<16=float8 |
\&        | float8        | REAL                               |
\&        | abstime       | /                                  |
\&        | reltime       | /                                  |
\&        | tinterval     | /                                  |
\&        | date          | /                                  |
\&        | time          | /                                  |
\&        | datetime      | /                                  |
\&        | timespan      | TINTERVAL                          |
\&        | timestamp     | TIMESTAMP                          |
\&        +---------------+------------------------------------+
.Ve
For further details concerning the PostgreSQL specific data-types 
please read the the pgbuiltin manpage. 
.Ip "\fBtype_info\fR" 4
.IX Item "type_info"
.Vb 1
\&  @type_info = $dbh->type_info($data_type);
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact. 
.Ip "\fBquote\fR" 4
.IX Item "quote"
.Vb 1
\&  $sql = $dbh->quote($value, $data_type);
.Ve
This module implements it's own quote method. In addition to the 
\&\s-1DBI\s0 method it doubles also the backslash, because PostgreSQL treats 
a backslash as an escape character. 
.Sh "Database Handle Attributes"
.IX Subsection "Database Handle Attributes"
.Ip "\fBAutoCommit\fR  (boolean)" 4
.IX Item "AutoCommit  (boolean)"
Supported by the driver as proposed by \s-1DBI\s0. According to the 
classification of \s-1DBI\s0, PostgreSQL is a database, in which a 
transaction must be explicitly started. Without starting a 
transaction, every change to the database becomes immediately 
permanent. The default of AutoCommit is on, which corresponds 
to the default behavior of PostgreSQL. When setting AutoCommit 
to off, a transaction will be started and every commit or rollback 
will automatically start a new transaction. For details see the 
notes about \fBTransactions\fR elsewhere in this document. 
.Ip "\fBDriver\fR  (handle)" 4
.IX Item "Driver  (handle)"
Implemented by \s-1DBI\s0, no driver-specific impact. 
.Ip "\fBName\fR  (string, read-only)" 4
.IX Item "Name  (string, read-only)"
The default method of \s-1DBI\s0 is overridden by a driver specific 
method, which returns only the database name. Anything else 
from the connection string is stripped off. Note, that here 
the method is read-only in contrast to the \s-1DBI\s0 specs. 
.Ip "\fBRowCacheSize\fR  (integer)" 4
.IX Item "RowCacheSize  (integer)"
Implemented by \s-1DBI\s0, not used by the driver.
.Ip "\fBpg_auto_escape\fR (boolean)" 4
.IX Item "pg_auto_escape (boolean)"
PostgreSQL specific attribute. If true, then quotes and backslashes in all 
parameters will be escaped in the following way: 
.Sp
.Vb 2
\&  escape quote with a quote (SQL)
\&  escape backslash with a backslash
.Ve
The default is on. Note, that PostgreSQL also accepts quotes, which 
are escaped by a backslash. Any other \s-1ASCII\s0 character can be used 
directly in a string constant. 
.Ip "\fBpg_INV_READ\fR (integer, read-only)" 4
.IX Item "pg_INV_READ (integer, read-only)"
Constant to be used for the mode in lo_creat and lo_open.
.Ip "\fBpg_INV_WRITE\fR (integer, read-only)" 4
.IX Item "pg_INV_WRITE (integer, read-only)"
Constant to be used for the mode in lo_creat and lo_open.
.SH "DBI STATEMENT HANDLE OBJECTS"
.IX Header "DBI STATEMENT HANDLE OBJECTS"
.Sh "Statement Handle Methods"
.IX Subsection "Statement Handle Methods"
.Ip "\fBbind_param\fR" 4
.IX Item "bind_param"
.Vb 1
\&  $rv = $sth->bind_param($param_num, $bind_value, \e%attr);
.Ve
Supported by the driver as proposed by \s-1DBI\s0. 
.Ip "\fBbind_param_inout\fR" 4
.IX Item "bind_param_inout"
Not supported by this driver. 
.Ip "\fBexecute\fR" 4
.IX Item "execute"
.Vb 1
\&  $rv = $sth->execute(@bind_values);
.Ve
Supported by the driver as proposed by \s-1DBI\s0. 
In addition to '\s-1UPDATE\s0', '\s-1DELETE\s0', '\s-1INSERT\s0' statements, for 
which it returns always the number of affected rows, the execute 
method can also be used for '\s-1SELECT\s0 ... \s-1INTO\s0 table' statements. 
.Ip "\fBfetchrow_arrayref\fR" 4
.IX Item "fetchrow_arrayref"
.Vb 1
\&  $ary_ref = $sth->fetchrow_arrayref;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. 
.Ip "\fBfetchrow_array\fR" 4
.IX Item "fetchrow_array"
.Vb 1
\&  @ary = $sth->fetchrow_array;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. 
.Ip "\fBfetchrow_hashref\fR" 4
.IX Item "fetchrow_hashref"
.Vb 1
\&  $hash_ref = $sth->fetchrow_hashref;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. 
.Ip "\fBfetchall_arrayref\fR" 4
.IX Item "fetchall_arrayref"
.Vb 1
\&  $tbl_ary_ref = $sth->fetchall_arrayref;
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact. 
.Ip "\fBfinish\fR" 4
.IX Item "finish"
.Vb 1
\&  $rc = $sth->finish;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. 
.Ip "\fBrows\fR" 4
.IX Item "rows"
.Vb 1
\&  $rv = $sth->rows;
.Ve
Supported by the driver as proposed by \s-1DBI\s0. 
In contrast to many other drivers the number of rows is 
available immediately after executing the statement. 
.Ip "\fBbind_col\fR" 4
.IX Item "bind_col"
.Vb 1
\&  $rc = $sth->bind_col($column_number, \e$var_to_bind, \e%attr);
.Ve
Supported by the driver as proposed by \s-1DBI\s0. 
.Ip "\fBbind_columns\fR" 4
.IX Item "bind_columns"
.Vb 1
\&  $rc = $sth->bind_columns(\e%attr, @list_of_refs_to_vars_to_bind);
.Ve
Supported by the driver as proposed by \s-1DBI\s0. 
.Ip "\fBdump_results\fR" 4
.IX Item "dump_results"
.Vb 1
\&  $rows = $sth->dump_results($maxlen, $lsep, $fsep, $fh);
.Ve
Implemented by \s-1DBI\s0, no driver-specific impact. 
.Ip "\fBblob_read\fR" 4
.IX Item "blob_read"
.Vb 1
\&  $blob = $sth->blob_read($id, $offset, $len);
.Ve
Supported by this driver as proposed by \s-1DBI\s0. Implemented by \s-1DBI\s0 
but not documented, so this method might change. 
.Sp
This method seems to be heavily influenced by the current implementation 
of blobs in Oracle. Nevertheless we try to be as compatible as possible. 
Whereas Oracle suffers from the limitation that blobs are related to tables 
and every table can have only one blob (data-type \s-1LONG\s0), PostgreSQL handles 
its blobs independent of any table by using so called object identifiers. 
This explains why the blob_read method is blessed into the \s-1STATEMENT\s0 package 
and not part of the \s-1DATABASE\s0 package. Here the field parameter has been used 
to handle this object identifier. The offset and len parameter may be set to 
zero, in which case the driver fetches the whole blob at once. 
.Sp
Starting with PostgreSQL-6.5 every access to a blob has to be put into a 
transaction. This holds even for a read-only access.
.Sp
See also the PostgreSQL-specific functions concerning blobs which are 
available via the func-interface. 
.Sp
For further information and examples about blobs, please read the chapter 
about Large Objects in the PostgreSQL Programmer's Guide. 
.Sh "Statement Handle Attributes"
.IX Subsection "Statement Handle Attributes"
.Ip "\fB\s-1NUM_OF_FIELDS\s0\fR  (integer, read-only)" 4
.IX Item "NUM_OF_FIELDS  (integer, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact. 
.Ip "\fB\s-1NUM_OF_PARAMS\s0\fR  (integer, read-only)" 4
.IX Item "NUM_OF_PARAMS  (integer, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact. 
.Ip "\fB\s-1NAME\s0\fR  (array-ref, read-only)" 4
.IX Item "NAME  (array-ref, read-only)"
Supported by the driver as proposed by \s-1DBI\s0. 
.Ip "\fBNAME_lc\fR  (array-ref, read-only)" 4
.IX Item "NAME_lc  (array-ref, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact. 
.Ip "\fBNAME_uc\fR  (array-ref, read-only)" 4
.IX Item "NAME_uc  (array-ref, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact. 
.Ip "\fB\s-1TYPE\s0\fR  (array-ref, read-only)" 4
.IX Item "TYPE  (array-ref, read-only)"
Supported by the driver as proposed by \s-1DBI\s0, with 
the restriction, that the types are PostgreSQL 
specific data-types which do not correspond to 
international standards.
.Ip "\fB\s-1PRECISION\s0\fR  (array-ref, read-only)" 4
.IX Item "PRECISION  (array-ref, read-only)"
Not supported by the driver. 
.Ip "\fB\s-1SCALE\s0\fR  (array-ref, read-only)" 4
.IX Item "SCALE  (array-ref, read-only)"
Not supported by the driver. 
.Ip "\fB\s-1NULLABLE\s0\fR  (array-ref, read-only)" 4
.IX Item "NULLABLE  (array-ref, read-only)"
Not supported by the driver. 
.Ip "\fBCursorName\fR  (string, read-only)" 4
.IX Item "CursorName  (string, read-only)"
Not supported by the driver. See the note about 
\&\fBCursors\fR elsewhere in this document. 
.Ip "\fBStatement\fR  (string, read-only)" 4
.IX Item "Statement  (string, read-only)"
Supported by the driver as proposed by \s-1DBI\s0. 
.Ip "\fBRowCache\fR  (integer, read-only)" 4
.IX Item "RowCache  (integer, read-only)"
Not supported by the driver. 
.Ip "\fBpg_size\fR  (array-ref, read-only)" 4
.IX Item "pg_size  (array-ref, read-only)"
PostgreSQL specific attribute. It returns a reference to an 
array of integer values for each column. The integer shows 
the size of the column in bytes. Variable length columns 
are indicated by \-1. 
.Ip "\fBpg_type\fR  (hash-ref, read-only)" 4
.IX Item "pg_type  (hash-ref, read-only)"
PostgreSQL specific attribute. It returns a reference to an 
array of strings for each column. The string shows the name 
of the data_type. 
.Ip "\fBpg_oid_status\fR (integer, read-only)" 4
.IX Item "pg_oid_status (integer, read-only)"
PostgreSQL specific attribute. It returns the \s-1OID\s0 of the last 
\&\s-1INSERT\s0 command. 
.Ip "\fBpg_cmd_status\fR (integer, read-only)" 4
.IX Item "pg_cmd_status (integer, read-only)"
PostgreSQL specific attribute. It returns the type of the last 
command. Possible types are: \s-1INSERT\s0, \s-1DELETE\s0, \s-1UPDATE\s0, \s-1SELECT\s0. 
.SH "FURTHER INFORMATION"
.IX Header "FURTHER INFORMATION"
.Sh "Transactions"
.IX Subsection "Transactions"
The transaction behavior is now controlled with the attribute AutoCommit. 
For a complete definition of AutoCommit please refer to the \s-1DBI\s0 documentation. 
.PP
According to the \s-1DBI\s0 specification the default for AutoCommit is \s-1TRUE\s0. 
In this mode, any change to the database becomes valid immediately. Any 
\&'begin', 'commit' or 'rollback' statement will be rejected. 
.PP
If AutoCommit is switched-off, immediately a transaction will be started by 
issuing a 'begin' statement. Any 'commit' or 'rollback' will start a new 
transaction. A disconnect will issue a 'rollback' statement. 
.Sh "Large Objects"
.IX Subsection "Large Objects"
The driver supports all large-objects related functions provided by 
libpq via the func-interface. Please note, that starting with 
PoostgreSQL-65. any access to a large object \- even read-only \- 
has to be put into a transaction ! 
.Sh "Cursors"
.IX Subsection "Cursors"
Although PostgreSQL has a cursor concept, it has not 
been used in the current implementation. Cursors in 
PostgreSQL can only be used inside a transaction block. 
Because only one transaction block at a time is allowed, 
this would have implied the restriction, not to use 
any nested \s-1SELECT\s0 statements. Hence the execute method 
fetches all data at once into data structures located 
in the frontend application. This has to be considered 
when selecting large amounts of data ! 
.Sh "Data-Type bool"
.IX Subsection "Data-Type bool"
The current implementation of PostgreSQL returns 't' for true and 'f' for 
false. From the perl point of view a rather unfortunate choice. The DBD-Pg 
module translates the result for the data-type bool in a perl-ish like manner: 
\&'f' \-> '0' and 't' \-> '1'. This way the application does not have to check 
the database-specific returned values for the data-type bool, because perl 
treats '0' as false and '1' as true. 
.PP
PostgreSQL Version 6.2 considers the input 't' as true 
and anything else as false. 
PostgreSQL Version 6.3 considers the input 't', '1' and 1 as true 
and anything else as false. 
PostgreSQL Version 6.4 considers the input 't', '1' and 'y' as true 
and any other character as false. 
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the DBI manpage
.SH "AUTHORS"
.IX Header "AUTHORS"
.Ip "\(bu \s-1DBI\s0 and DBD-Oracle by Tim Bunce (Tim.Bunce@ig.co.uk)"
.IX Item "DBI and DBD-Oracle by Tim Bunce (Tim.Bunce@ig.co.uk)"
.Ip "\(bu DBD-Pg by Edmund Mergl (E.Mergl@bawue.de) and Jeffrey W. Baker (jwbaker@acm.org)"
.IX Item "DBD-Pg by Edmund Mergl (E.Mergl@bawue.de) and Jeffrey W. Baker (jwbaker@acm.org)"
Major parts of this package have been copied from \s-1DBI\s0 and DBD-Oracle.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The \s-1DBD:\s0:Pg module is free software. 
You may distribute under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the Perl \s-1README\s0 file.
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
See also \fB\s-1DBI/ACKNOWLEDGMENTS\s0\fR.
