.\" Automatically generated by Pod::Man version 1.02
.\" Tue Jun 25 07:41:04 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "DBI::PurePerl 3"
.TH DBI::PurePerl 3 "perl v5.6.0" "2002-06-14" "User Contributed Perl Documentation"
.UC
.SH "NAME"
.Vb 1
\& DBI::PurePerl -- a DBI emulation using pure perl (no C/XS compilation required)
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& BEGIN { $ENV{DBI_PUREPERL} = 2 }
\& use DBI;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a pure perl emulation of the \s-1DBI\s0 internals.  In almost all
cases you will be better off using standard \s-1DBI\s0 since the portions
of the standard version written in C make it *much* faster.
.PP
However, if you are in a situation where it isn't possible to install
a compiled version of standard \s-1DBI\s0, and you're using pure-perl \s-1DBD\s0
drivers, then this module allows you to use most common features
of \s-1DBI\s0 without needing any changes in your scripts.
.SH "EXPERIMENTAL STATUS"
.IX Header "EXPERIMENTAL STATUS"
\&\s-1DBI:\s0:PurePerl is very new so please treat it as experimental pending
more extensive testing.  So far it has passed all tests with \s-1DBD::CSV\s0,
\&\s-1DBD:\s0:AnyData, \s-1DBD:\s0:XBase, \s-1DBD:\s0:Sprite, \s-1DBD:\s0:mysqlPP.  Please send
bug reports to Jeff Zucker at <jeff@vpservices.com> with a cc to
<dbi-dev@perl.org>.
.SH "USAGE"
.IX Header "USAGE"
The usage is the same as for standard \s-1DBI\s0 with the exception
that you need to set the enviornment variable \s-1DBI_PUREPERL\s0 if
you want to use the PurePerl version.
.PP
.Vb 2
\& DBI_PUREPERL == 0 (the default) Always use compiled DBI, die
\&                   if it isn't properly compiled & installed
.Ve
.Vb 2
\& DBI_PUREPERL == 1 Use compiled DBI if it is properly compiled
\&                   & installed, otherwise use PurePerl
.Ve
.Vb 1
\& DBI_PUREPERL == 2 Always use PurePerl
.Ve
You may set the enviornment variable in your shell (e.g. with
set or setenv or export, etc) or else set it in your script like
this:
.PP
.Vb 1
\& BEGIN { $ENV{DBI_PUREPERL}=2 }
.Ve
before you \f(CW\*(C`use DBI;\*(C'\fR.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
In most situations simply install \s-1DBI\s0 (see the \s-1DBI\s0 pod for details).
.PP
In the situation in which you can not install \s-1DBI\s0 itself, you
may manually copy \s-1DBI\s0.pm and PurePerl.pm into the appropriate
directories.
.PP
For example:
.PP
.Vb 2
\& cp DBI.pm      /usr/jdoe/mylibs/.
\& cp PurePerl.pm /usr/jdoe/mylibs/DBI/.
.Ve
Then add this to the top of scripts:
.PP
.Vb 4
\& BEGIN {
\&   $ENV{DBI_PUREPERL} = 1;      # or =2
\&   unshift @INC, '/usr/jdoe/mylibs';
\& }
.Ve
(Or should we perhaps patch Makefile.PL so that if \s-1DBI_PUREPERL\s0
is set to 2 prior to make, the normal compile process is skipped
and the files are installed automatically?)
.SH "DIFFERENCES BETWEEN DBI AND DBI::PurePerl"
.IX Header "DIFFERENCES BETWEEN DBI AND DBI::PurePerl"
.Sh "Attributes"
.IX Subsection "Attributes"
Some handle attributes are either not supported or have very limited
functionality:
.PP
.Vb 5
\&  ActiveKids
\&  InactiveDestroy
\&  Kids
\&  Taint
\&  TraceLevel
.Ve
(and probably others)
.Sh "Tracing"
.IX Subsection "Tracing"
Trace functionality is more limited and the code to handle tracing is
only embeded into \s-1DBI\s0:PurePerl if the \s-1DBI_TRACE\s0 environment variable
is defined.  To enable total tracing you can set the \s-1DBI_TRACE\s0
environment variable as usual.  But to enable individual handle
tracing using the \fItrace()\fR method you also need to set the \s-1DBI_TRACE\s0
environment variable, but set it to 0.
.Sh "Parameter Usage Checking"
.IX Subsection "Parameter Usage Checking"
The \s-1DBI\s0 does some basic parameter count checking on method calls.
\&\s-1DBI:\s0:PurePerl doesn't.
.Sh "Speed"
.IX Subsection "Speed"
\&\s-1DBI:\s0:PurePerl is slower. Although, with some drivers in some
contexts this may not be very significant for you.
.PP
By way of example... the test.pl script in the \s-1DBI\s0 source
distribution has a simple benchmark that just does:
.PP
.Vb 3
\&    my $null_dbh = DBI->connect('dbi:NullP:','','');
\&    my $i = 10_000;
\&    $null_dbh->prepare('') while $i--;
.Ve
In other words just prepares a statement, creating and destroying
a statement handle, over and over again.  Using the real \s-1DBI\s0 this
runs at ~4550 handles per second whereas \s-1DBI:\s0:PurePerl manages
~2800 per second on the same machine (not too bad really).
.Sh "May not fully support \fIhash()\fR"
.IX Subsection "May not fully support hash()"
If you want to use type 1 hash, i.e., \f(CW\*(C`hash($string,1)\*(C'\fR with
\&\s-1DBI:\s0:PurePerl, you'll need version 1.56 or higher of Math::BigInt
(available on \s-1CPAN\s0).
.Sh "Doesn't support \fIpreparse()\fR"
.IX Subsection "Doesn't support preparse()"
The \s-1DBI-\s0>\fIpreparse()\fR method isn't supported in \s-1DBI:\s0:PurePerl.
.Sh "Doesn't support \s-1DBD:\s0:Proxy"
.IX Subsection "Doesn't support DBD::Proxy"
There's a subtle problem somewhere I've not been able to identify.
\&\s-1DBI:\s0:ProxyServer seem to work fine with \s-1DBI:\s0:PurePerl but \s-1DBD:\s0:Proxy
does not work 100% (which is sad because that would be far more useful :)
Try re-enabling t/80proxy.t for \s-1DBI:\s0:PurePerl to see if the problem
that remains will affect you're usage.
.Sh "Undoubtedly Others"
.IX Subsection "Undoubtedly Others"
Please let us know if you find any other differences between \s-1DBI\s0
and \s-1DBI:\s0:PurePerl.
.SH "AUTHORS"
.IX Header "AUTHORS"
Tim Bunce and Jeff Zucker.
.PP
Tim provided the direction and basis for the code.  The original
idea for the module and most of the brute force porting from C to
Perl was by Jeff. Tim then reworked some core parts to boost the
performance and accuracy of the emulation. Thanks also to Randal
Schwartz and John Tobey for patches.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002  Tim Bunce  Ireland.
.PP
See \s-1COPYRIGHT\s0 section in \s-1DBI\s0.pm for usage and distribution rights.
